From c165b518e97bdefa447c4b7e03fe0ab164af064e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 24 Jan 2014 20:24:15 +0100
Subject: [PATCH] initial commit

---
 extension/scripts/lib/scriptEvalChild.js           |  36 ++++++
 extension/scripts/lib/scripts.js                   | 121 +++++++++++++++++++++
 extension/scripts/package.json                     |   5 +
 extension/scripts/public/js/main.js                |  99 +++++++++++++++++
 extension/scripts/public/js/main_dev.js            |  99 +++++++++++++++++
 extension/scripts/public/js/scripts.create.view.js |  24 ++++
 extension/scripts/public/js/scripts.detail.view.js |  21 ++++
 .../scripts/public/js/scripts.dialog.model.js      |  62 +++++++++++
 extension/scripts/public/js/scripts.dialog.view.js |  49 +++++++++
 extension/scripts/public/js/scripts.list.model.js  |  28 +++++
 extension/scripts/public/js/scripts.list.view.js   |  23 ++++
 extension/scripts/public/js/scripts.model.js       |  18 +++
 .../scripts/public/js/scripts.template.view.js     |  41 +++++++
 .../scripts/public/js/scripts.toolbar.view.js      |  14 +++
 .../scripts/public/templates/scripts-create.html   |  19 ++++
 .../scripts/public/templates/scripts-detail.html   |   5 +
 .../scripts/public/templates/scripts-dialog.html   |  36 ++++++
 .../public/templates/scripts-list-header.html      |   1 +
 .../public/templates/scripts-list-rows.html        |   1 +
 .../scripts/public/templates/scripts-list.html     |   3 +
 .../scripts/public/templates/scripts-template.html |   4 +
 .../scripts/public/templates/scripts-toolbar.html  |   6 +
 extension/scripts/test/scriptsTest.js              |  65 +++++++++++
 23 files changed, 780 insertions(+)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
new file mode 100644
index 0000000000000000000000000000000000000000..337f8a2de13a7e6fd410d1e67f8f40250112e583
--- /dev/null
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -0,0 +1,36 @@
+﻿process.on('message', function (m) {
+    try {
+        
+        var _require = function (moduleName) {
+            var allowedModules = ["handlebars", "request-json", "feedparser", "request"];
+
+            if (allowedModules.filter(function (mod) { return mod == moduleName; }).length == 1) {
+                return require(moduleName);
+            }
+
+            throw new Error("Unsupported module " + moduleName);
+        };
+        
+        var vm = require('vm');
+        var sandbox = {
+            request: m.request,
+            response: m.response,
+            require: _require,
+            done: function() {
+                 process.send({
+                     request: m.request,
+                     response: m.response
+                 });
+                 process.exit();
+            }
+        };
+
+       vm.runInNewContext(m.script, sandbox);
+    } catch (ex) {
+        process.send({
+            error: ex.message,
+            errorStack: ex.stack
+        });
+        process.exit();
+    }
+});
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
new file mode 100644
index 0000000000000000000000000000000000000000..28cdb57fc76e8a9ff4853b4fad1e94c82098824b
--- /dev/null
+++ b/extension/scripts/lib/scripts.js
@@ -0,0 +1,121 @@
+﻿var Readable = require("stream").Readable,
+    shortid = require("shortid"),
+    winston = require("winston"),
+    events = require("events"),
+    util = require("util"),
+    fork = require('child_process').fork,
+    sformat = require("stringformat"),
+    async = require("async"),
+    _ = require("underscore"),
+    join = require("path").join,
+    Q = require("q");
+
+var logger = winston.loggers.get('jsreport');
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Scripts(reporter, definition);
+};
+
+Scripts = function (reporter, definition) {
+    this.reporter = reporter;
+    this.definition = definition;
+
+    Object.defineProperty(this, "entitySet", {
+        get: function () {
+            return reporter.context.scripts;
+        }
+    });
+    
+    this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
+        content: { type: "string" },
+        name: { type: "string" },
+    }, null);
+
+    if (this.reporter.playgroundMode) {
+        reporter.templates.TemplateType.addMember("script", { type: this.ScriptType });
+    } else {
+        this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
+        reporter.templates.TemplateType.addMember("scriptId", { type: "id" });
+    }
+
+    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
+    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
+};
+
+Scripts.prototype.create = function(script) {
+    var entity = new this.ScriptType(script);
+    this.entitySet.add(entity);
+    return this.entitySet.saveChanges().then(function() { return Q(entity); });
+};
+
+Scripts.prototype.handleBeforeRender = function (request, response) {
+    var self = this;
+    
+    if (!request.template.scriptId && !request.template.script) {
+        logger.info("ScriptId not defined for this template.");
+        return;
+    }
+
+    function FindScript() {
+        if (request.template.script != null && request.template.script != "")
+            return Q(request.template.script);
+        
+        logger.info("Searching for before script to apply - " + request.template.scriptId);
+
+        return self.entitySet.find(request.template.scriptId);
+    };
+
+    return FindScript().then(function (script) {
+        var deferred = Q.defer();
+        script = script.content || script;
+
+        var child = fork(join(__dirname, "scriptEvalChild.js"));
+        logger.info("Found script " + script);
+
+        var isDone = false;
+
+        child.on('message', function(m) {
+            isDone = true;
+            if (m.error) {
+                logger.error("Child process process resulted in error " + JSON.stringify(m.error));
+                logger.error(m);
+                return deferred.reject({ message: m.error, stack: m.errorStack })
+            }
+
+            logger.info("Child process successfully finished.");
+            _.extend(request, m.request);
+            _.extend(response, m.response);
+            return deferred.resolve();
+        });
+
+        logger.info(JSON.stringify(request.template));
+
+        var serializableRequest = _.extend({}, request);
+        serializableRequest.reporter = null;
+        child.send({
+            script: script,
+            request: serializableRequest,
+            response: response
+        });
+
+        logger.info("Child process started.");
+
+        setTimeout(function() {
+            if (isDone)
+                return;
+
+            child.kill();
+            logger.error("Child process resulted in timeout.");
+            return deferred.reject({ message: "Timeout error during script execution" });
+        }, 3000);
+
+        return deferred.promise;
+    });
+};
+
+function createEntitySetDefinitions(entitySets, next) {
+    if (!this.reporter.playgroundMode) {
+        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType };
+    }
+    next();
+};
\ No newline at end of file
diff --git a/extension/scripts/package.json b/extension/scripts/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..a3d3fc253f595c2c573cfb52bbda1b5ca3749612
--- /dev/null
+++ b/extension/scripts/package.json
@@ -0,0 +1,5 @@
+﻿{
+  "name": "scripts",
+  "main": "lib/scripts.js",
+  "dependencies": [ "templates" ]
+}
\ No newline at end of file
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
new file mode 100644
index 0000000000000000000000000000000000000000..e17daba9274063b866c739237af165191e034c5e
--- /dev/null
+++ b/extension/scripts/public/js/main.js
@@ -0,0 +1,99 @@
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.create.view", "./scripts.template.view", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsModel, ScriptsDetailView, ScriptsCreateView, TemplateView, ToolbarView) {
+
+        app.module("scripts", function(module) {
+            
+            var Router = Backbone.Router.extend({
+                routes: {
+                    "extension/scripts": "scripts",
+                    "extension/scripts/:id": "scriptsDetail",
+                },
+
+                scripts: function () {
+                    this.navigate("/extension/scripts");
+
+                    var model = new ScriptsListModel();
+                    var view = new ScriptsListView({
+                        collection: model
+                    });
+
+                    app.layout.content.show(view);
+
+                    model.fetch();
+                },
+
+                scriptsDetail: function (id) {
+                    var model = new ScriptsModel();
+                    model.set("_id", id);
+                    
+                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({model: model}) );
+                    
+                    model.fetch();
+                },
+
+                scriptsCreate: function () {
+                    app.layout.dialog.show(new ScriptsCreateView({
+                        model: new ScriptsModel()
+                    }));
+                }
+            });
+            
+            app.data.on("create", function () {
+                app.scripts.router.scriptsCreate();
+            });
+
+            app.scripts.router = new Router();
+            
+            if (!app.settings.playgroundMode) {
+
+                app.on("menu-render", function (context) {
+                    context.result += "<li><a href='#/extension/scripts'>Scripts</a></li>";
+                });
+
+                app.on("menu-actions-render", function (context) {
+                    context.result += "<li><a id='createScriptLink'>Create Script</a></li>";
+                    context.on("after-render", function ($el) {
+                        $el.find("#createScriptLink").click(function () {
+                            app.scripts.router.scriptsCreate();
+                        });
+                    });
+                });
+            }
+
+            app.on("template-extensions-render", function(context) {
+                var view = new TemplateView();
+                view.setTemplateModel(context.template);
+                context.extensionsRegion.show(view);
+            });
+
+            app.on("template-extensions-get-state", function(model, state) {
+                if (model.get("script") != null && model.get("script").content != null)
+                    state.script = model.get("script").content;
+                else
+                    state.script = null;
+            });
+
+            app.on("entity-registration", function(context) {
+
+                $data.Class.define("$entity.Script", $data.Entity, null, {
+                    'content': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                }, null);
+
+                $entity.Script.prototype.toString = function() {
+                    return "Script " + (this.name || "");
+                };
+
+                if (app.settings.playgroundMode) {
+                    $entity.Template.addMember("script", { 'type': "$entity.Script" });
+                } else {
+                    $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                    $entity.Script.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                    context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+                }
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..e17daba9274063b866c739237af165191e034c5e
--- /dev/null
+++ b/extension/scripts/public/js/main_dev.js
@@ -0,0 +1,99 @@
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.create.view", "./scripts.template.view", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsModel, ScriptsDetailView, ScriptsCreateView, TemplateView, ToolbarView) {
+
+        app.module("scripts", function(module) {
+            
+            var Router = Backbone.Router.extend({
+                routes: {
+                    "extension/scripts": "scripts",
+                    "extension/scripts/:id": "scriptsDetail",
+                },
+
+                scripts: function () {
+                    this.navigate("/extension/scripts");
+
+                    var model = new ScriptsListModel();
+                    var view = new ScriptsListView({
+                        collection: model
+                    });
+
+                    app.layout.content.show(view);
+
+                    model.fetch();
+                },
+
+                scriptsDetail: function (id) {
+                    var model = new ScriptsModel();
+                    model.set("_id", id);
+                    
+                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({model: model}) );
+                    
+                    model.fetch();
+                },
+
+                scriptsCreate: function () {
+                    app.layout.dialog.show(new ScriptsCreateView({
+                        model: new ScriptsModel()
+                    }));
+                }
+            });
+            
+            app.data.on("create", function () {
+                app.scripts.router.scriptsCreate();
+            });
+
+            app.scripts.router = new Router();
+            
+            if (!app.settings.playgroundMode) {
+
+                app.on("menu-render", function (context) {
+                    context.result += "<li><a href='#/extension/scripts'>Scripts</a></li>";
+                });
+
+                app.on("menu-actions-render", function (context) {
+                    context.result += "<li><a id='createScriptLink'>Create Script</a></li>";
+                    context.on("after-render", function ($el) {
+                        $el.find("#createScriptLink").click(function () {
+                            app.scripts.router.scriptsCreate();
+                        });
+                    });
+                });
+            }
+
+            app.on("template-extensions-render", function(context) {
+                var view = new TemplateView();
+                view.setTemplateModel(context.template);
+                context.extensionsRegion.show(view);
+            });
+
+            app.on("template-extensions-get-state", function(model, state) {
+                if (model.get("script") != null && model.get("script").content != null)
+                    state.script = model.get("script").content;
+                else
+                    state.script = null;
+            });
+
+            app.on("entity-registration", function(context) {
+
+                $data.Class.define("$entity.Script", $data.Entity, null, {
+                    'content': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                }, null);
+
+                $entity.Script.prototype.toString = function() {
+                    return "Script " + (this.name || "");
+                };
+
+                if (app.settings.playgroundMode) {
+                    $entity.Template.addMember("script", { 'type': "$entity.Script" });
+                } else {
+                    $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                    $entity.Script.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                    context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+                }
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.create.view.js b/extension/scripts/public/js/scripts.create.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..212df742c0ac459346564143dbadf211a0a26386
--- /dev/null
+++ b/extension/scripts/public/js/scripts.create.view.js
@@ -0,0 +1,24 @@
+﻿define(["marionette", "app", "core/view.base"], function (Marionette, app, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-create",
+
+        initialize: function () {
+            var self = this;
+        },
+
+        events: {
+            "click #saveCommand": "save"
+        },
+
+        save: function () {
+            var self = this;
+            this.model.set("name", this.$el.find("#name").val());
+            this.model.save({}, {
+                success: function () {
+                    app.layout.dialog.hide();
+                    app.scripts.trigger("created");
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..a956c2d028c5ee40b2c3287cb78f98a0fc9c9321
--- /dev/null
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -0,0 +1,21 @@
+﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+
+             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+   });
+});
+
diff --git a/extension/scripts/public/js/scripts.dialog.model.js b/extension/scripts/public/js/scripts.dialog.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..b0198fb95d6cb2a79b3ec5305195e687291609d7
--- /dev/null
+++ b/extension/scripts/public/js/scripts.dialog.model.js
@@ -0,0 +1,62 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+
+        fetch: function (options) {
+            var self = this;
+            
+            if (app.settings.playgroundMode) {
+                var obj = this.templateModel.get("script") || {};
+                obj = obj.initData || {};
+                this.set(this.parse(obj), { silent: true });
+                return options.success();
+            }
+
+            app.dataContext.scripts.toArray().then(function(items) {
+                self.items = items;
+                if (self.templateModel.get("scriptId")) {
+                    return app.dataContext.scripts.find(self.templateModel.get("scriptId")).then(function(res) {
+                        self.set(self.parse(res.initData), { silent: true });
+                        return options.success();
+                    });
+                }
+
+                self.set(items.length > 0 ? items[0].initData : {}, { silent: true });
+                return options.success();
+            });
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:_id", function () {
+                this.set(this.parse(_.where(self.items, { _id: self.get("_id") })[0].initData));
+            });
+        },
+
+        save: function (options) {
+            var self = this;
+            var entity = new $entity.Script(this.attributes);
+
+            if (app.settings.playgroundMode) {
+                this.templateModel.set("script", entity);
+                return options.success();
+            }
+
+            if (entity._id != null) {
+                app.dataContext.scripts.attach(entity);
+                this.copyAttributesToEntity(entity);
+            } else {
+                app.dataContext.scripts.add(entity);
+            }
+
+            app.dataContext.scripts.saveChanges().then(function () {
+                self.templateModel.set("scriptId", entity._id);
+                options.success();
+            });
+        },
+    });
+});
+
diff --git a/extension/scripts/public/js/scripts.dialog.view.js b/extension/scripts/public/js/scripts.dialog.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..86280e86f1f0b8b44e7cc7dc561c0f2a14bfd619
--- /dev/null
+++ b/extension/scripts/public/js/scripts.dialog.view.js
@@ -0,0 +1,49 @@
+﻿define(["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+            "click #createCommand": "create",
+        },
+        
+        initialize: function () {
+            _.bindAll(this, "getItems", "getItemsLength");
+        },
+
+
+        getItems: function () {
+            return this.model.items;
+        },
+
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        
+        onDomRefresh: function () {
+            var self = this;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+
+        create: function () {
+            app.scripts.trigger("create");
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.list.model.js b/extension/scripts/public/js/scripts.list.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..e187a2dadfb503abeab61c997acaf81d6d05f9f5
--- /dev/null
+++ b/extension/scripts/public/js/scripts.list.model.js
@@ -0,0 +1,28 @@
+﻿define(["app", "backbone", "core/dataGrid", "./scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
diff --git a/extension/scripts/public/js/scripts.list.view.js b/extension/scripts/public/js/scripts.list.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..1a5b11496795ad7ca5fbf8f8b1418bf0780e3386
--- /dev/null
+++ b/extension/scripts/public/js/scripts.list.view.js
@@ -0,0 +1,23 @@
+﻿define(["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..d05ee5ec5473cb12ece95e892dc99b6b5874436c
--- /dev/null
+++ b/extension/scripts/public/js/scripts.model.js
@@ -0,0 +1,18 @@
+﻿define(["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+        fetchQuery: function () {
+            return app.dataContext.scripts.find(this.get("_id"));
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
diff --git a/extension/scripts/public/js/scripts.template.view.js b/extension/scripts/public/js/scripts.template.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..d6a86363e2fb5417ea49454f6de85f72840cc114
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.view.js
@@ -0,0 +1,41 @@
+﻿define(["marionette", "app", "./scripts.dialog.view", "./scripts.dialog.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return this.templateModel.get("scriptId") ||
+                 ((this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null));
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function () {
+                        self.render();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..9d226769c254230f919ad7d72eabbe334d560db3
--- /dev/null
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -0,0 +1,14 @@
+﻿define(["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                this.model.save();
+            },
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-create.html b/extension/scripts/public/templates/scripts-create.html
new file mode 100644
index 0000000000000000000000000000000000000000..d1ad78fd18d7c6550681d89ba22dfdf54f9a6ce4
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-create.html
@@ -0,0 +1,19 @@
+﻿<div class="modal-dialog">
+    <div class="modal-content">
+        <div class="modal-header">
+            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
+            <h4 class="modal-title">Create Script</h4>
+        </div>
+        <div class="modal-body">
+            <div>
+                <label>Name</label>
+                <input id="name" />
+            </div>
+        </div>
+        <div class="modal-footer">
+            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
+            <button type="button" id="saveCommand" class="btn btn-primary">Save</button>
+        </div>
+    </div>
+</div>
+
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..347499f89d0fc7448ec138f16772230204cb5f40
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -0,0 +1,5 @@
+﻿<h2> Script - {{:name}}</h2>
+
+<div>
+    <textarea id="contentArea">{{:content}}</textarea>
+</div>
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
new file mode 100644
index 0000000000000000000000000000000000000000..206c230482409fd0be19907648d8f666c6d7091c
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -0,0 +1,36 @@
+﻿<div class="modal-dialog">
+    <div class="modal-content">
+        <div class="modal-header">
+            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
+            <h4 class="modal-title">Script</h4>
+        </div>
+        <div class="modal-body">
+            {{if ~getMode()}}
+               <textarea id="contentArea">{{:content}}</textarea>
+            {{else}}
+              {{if ~getItemsLength() > 0}}
+                  Choose an existing script 
+                  <div class="btn-group" data-binding="_id" style="margin-bottom: 15px; margin-left: 10px">
+                      <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:_id}}">{{:name}}</button>
+                      <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+                          <span class="caret"></span>
+                      </button>
+                      <ul class="dropdown-menu" role="menu">
+                          {{for ~getItems()}}
+                          <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:_id}}">{{:name}}</a></li>
+                          {{/for}}
+                      </ul>
+                   </div>
+                   <textarea id="contentArea">{{:content}}</textarea>
+              {{else}}
+                        You dont have a script yet. Go ahead and create one. 
+                         <button type="button" id="createCommand" class="btn btn-primary" data-dismiss="modal">Create script</button>
+              {{/if}}
+            {{/if}}
+        </div>
+        <div class="modal-footer">            
+            <button type="button" id="saveCommand" class="btn btn-primary" data-dismiss="modal">Save</button>
+        </div>
+    </div>
+</div>
+
diff --git a/extension/scripts/public/templates/scripts-list-header.html b/extension/scripts/public/templates/scripts-list-header.html
new file mode 100644
index 0000000000000000000000000000000000000000..574425e2b26d38ff1168067990a3e099b46d15aa
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-list-header.html
@@ -0,0 +1 @@
+﻿<th>Name</th>
diff --git a/extension/scripts/public/templates/scripts-list-rows.html b/extension/scripts/public/templates/scripts-list-rows.html
new file mode 100644
index 0000000000000000000000000000000000000000..9d9d1c23397109e5c9aac9dc7ab6b8ab1aaa1fa8
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-list-rows.html
@@ -0,0 +1 @@
+﻿<td><a>{{:name}}</a></td>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-list.html b/extension/scripts/public/templates/scripts-list.html
new file mode 100644
index 0000000000000000000000000000000000000000..4f6dcb44c4ab3003bfb1fea04d0d1685d1226c12
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-list.html
@@ -0,0 +1,3 @@
+﻿<div id="scriptsGridBox">
+    
+</div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-template.html b/extension/scripts/public/templates/scripts-template.html
new file mode 100644
index 0000000000000000000000000000000000000000..1cacab7bf8d13ed12e5337de96b09ea1e36c9f15
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-template.html
@@ -0,0 +1,4 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+<div class="expandable-body properties" style="display: none">
+    <button class="btn btn-sm btn-primary" id="scriptCommand">Script Upload</button>
+</div>
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
new file mode 100644
index 0000000000000000000000000000000000000000..167ede6b77bc64df21c3ec5b5453f423ecb6f98d
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -0,0 +1,6 @@
+﻿<div class="navbar-header sub-header">
+    <ul class="nav navbar-nav sub-header">
+        <p class="navbar-text" name="name">{{:name}}</p>
+        <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
+    </ul>
+</div>
\ No newline at end of file
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
new file mode 100644
index 0000000000000000000000000000000000000000..7218bcd14c44b95b7e4384f47b605e4cfdbd43fe
--- /dev/null
+++ b/extension/scripts/test/scriptsTest.js
@@ -0,0 +1,65 @@
+﻿var assert = require("assert"),
+    describeReporting = require("../../../test/helpers.js").describeReporting,
+    Q = require("q");
+
+
+describeReporting(["scripts"], function (reporter) {
+
+    describe('scripts', function () {
+        
+        function prepareTemplate(scriptContent) {
+            var script = new reporter.scripts.ScriptType({ content: scriptContent });
+            reporter.scripts.entitySet.add(script);
+            return reporter.scripts.entitySet.saveChanges().then(function () {
+                return reporter.templates.create({
+                    html: "foo",
+                    scriptId: script._id
+                });
+            });
+        }
+        
+        function prepareRequest(scriptContent) {
+            return prepareTemplate(scriptContent).then(function(template) {
+                return Q({
+                    request: { template: template }, 
+                    response: {}
+                });
+            });
+        }
+
+        it('shoulb be able to modify response', function (done) {
+            prepareRequest("response.test = 'xxx'; done()").then(function(res) {
+                reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.response.test);
+                    done();
+                });
+            });
+        });
+        
+        it('shoulb be able to use linked modules', function (done) {
+            var scriptContent = "var h = require('handlebars'); " +
+                "var compiledTemplate = h.compile('foo'); " +
+                "response.test = compiledTemplate();" +
+                "done();";
+            
+            prepareRequest(scriptContent).then(function (res) {
+                reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
+                    assert.equal('foo', res.response.test);
+                    done();
+                });
+            });
+        });
+        
+        it('shoulb not be able to read local files', function (done) {
+            var scriptContent = "var fs = require('fs'); " +
+                "fs.readdir('d:\', function(err, files) { response.filesLength = files.length; done(); });";
+
+            prepareRequest(scriptContent).then(function(res) {
+                reporter.scripts.handleBeforeRender(res.request, res.response).fail(function() {
+                    assert.equal(res.response.filesLength == null, true);
+                    done();
+                });
+            });
+        });
+    });
+});
\ No newline at end of file

From d668d4fddc4ab8fe9df8cc95da16b4c5a7e127cd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 26 Jan 2014 14:50:17 +0100
Subject: [PATCH] avoid caching in browser

---
 extension/scripts/lib/scripts.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 28cdb57fc76e8a9ff4853b4fad1e94c82098824b..900033c90a100768bb57e7f5876b3e564c32cba4 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -107,7 +107,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             child.kill();
             logger.error("Child process resulted in timeout.");
             return deferred.reject({ message: "Timeout error during script execution" });
-        }, 3000);
+        }, 60000);
 
         return deferred.promise;
     });

From 11f5c1386f849c0192d0f7475f68cfb2244eb90e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 26 Jan 2014 18:20:26 +0100
Subject: [PATCH] bug fixing

---
 extension/scripts/lib/scripts.js | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 900033c90a100768bb57e7f5876b3e564c32cba4..5f373c79f2141d75397195a3d40997e475c38bf5 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -60,7 +60,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         if (request.template.script != null && request.template.script != "")
             return Q(request.template.script);
         
-        logger.info("Searching for before script to apply - " + request.template.scriptId);
+        logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
         return self.entitySet.find(request.template.scriptId);
     };
@@ -70,7 +70,6 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         script = script.content || script;
 
         var child = fork(join(__dirname, "scriptEvalChild.js"));
-        logger.info("Found script " + script);
 
         var isDone = false;
 
@@ -79,7 +78,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             if (m.error) {
                 logger.error("Child process process resulted in error " + JSON.stringify(m.error));
                 logger.error(m);
-                return deferred.reject({ message: m.error, stack: m.errorStack })
+                return deferred.reject({ message: m.error, stack: m.errorStack });
             }
 
             logger.info("Child process successfully finished.");
@@ -89,12 +88,10 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         });
 
         logger.info(JSON.stringify(request.template));
-
-        var serializableRequest = _.extend({}, request);
-        serializableRequest.reporter = null;
+        
         child.send({
             script: script,
-            request: serializableRequest,
+            request: { data: request.data},
             response: response
         });
 

From f6f7513d96c16a2e5e6d40df1c66f5e3cc935868 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 30 Jan 2014 20:43:53 +0100
Subject: [PATCH] ui refactoring

---
 extension/scripts/lib/scripts.js                   |  9 +++-
 extension/scripts/public/js/main.js                | 59 +++++++++++-----------
 extension/scripts/public/js/main_dev.js            | 59 +++++++++++-----------
 extension/scripts/public/js/scripts.create.view.js | 24 ---------
 .../scripts/public/js/scripts.list.toolbar.view.js | 19 +++++++
 extension/scripts/public/js/scripts.list.view.js   |  5 +-
 extension/scripts/public/js/scripts.model.js       |  6 +--
 .../scripts/public/js/scripts.toolbar.view.js      |  7 ++-
 .../scripts/public/templates/scripts-create.html   | 19 -------
 .../scripts/public/templates/scripts-detail.html   |  4 +-
 .../public/templates/scripts-list-toolbar.html     |  7 +++
 .../scripts/public/templates/scripts-template.html |  2 +-
 12 files changed, 108 insertions(+), 112 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 5f373c79f2141d75397195a3d40997e475c38bf5..cd7c1586b89d5bc126b39357fc88cf2b87290263 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -27,6 +27,7 @@ Scripts = function (reporter, definition) {
     });
     
     this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
+        shortid: { type: "string"},
         content: { type: "string" },
         name: { type: "string" },
     }, null);
@@ -37,7 +38,8 @@ Scripts = function (reporter, definition) {
         this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
         reporter.templates.TemplateType.addMember("scriptId", { type: "id" });
     }
-
+    
+    this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
     this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
@@ -110,6 +112,11 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     });
 };
 
+Scripts.prototype._beforeCreateHandler = function(args, entity) {
+     if (entity.shortid == null)
+        entity.shortid = shortid.generate();
+};
+
 function createEntitySetDefinitions(entitySets, next) {
     if (!this.reporter.playgroundMode) {
         entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType };
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index e17daba9274063b866c739237af165191e034c5e..c1e4fd4ce58170fd2f4b5d9d1003422c2eb0a0bc 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,65 +1,65 @@
 ﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.detail.view",
-        "./scripts.create.view", "./scripts.template.view", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsModel, ScriptsDetailView, ScriptsCreateView, TemplateView, ToolbarView) {
+        "./scripts.template.view", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, TemplateView, ToolbarView) {
 
         app.module("scripts", function(module) {
-            
+
             var Router = Backbone.Router.extend({
+                
+                initialize: function() {
+                    app.listenTo(app, "script-saved", function(model) {
+                        window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
+                    });
+                },
+
                 routes: {
-                    "extension/scripts": "scripts",
-                    "extension/scripts/:id": "scriptsDetail",
+                    "extension/scripts/list": "scripts",
+                    "extension/scripts/detail/:id": "scriptsDetail",
+                    "extension/scripts/detail": "scriptsDetail",
                 },
 
-                scripts: function () {
+                scripts: function() {
                     this.navigate("/extension/scripts");
 
                     var model = new ScriptsListModel();
-                    var view = new ScriptsListView({
-                        collection: model
-                    });
 
-                    app.layout.content.show(view);
+                    app.layout.showToolbarViewComposition(new ScriptsListView({ collection: model }), new ScriptsListToolbarView({ collection: model }));
+
 
                     model.fetch();
                 },
 
-                scriptsDetail: function (id) {
+                scriptsDetail: function(id) {
                     var model = new ScriptsModel();
-                    model.set("_id", id);
                     
-                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({model: model}) );
+                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
                     
-                    model.fetch();
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
                 },
 
-                scriptsCreate: function () {
+                scriptsCreate: function() {
                     app.layout.dialog.show(new ScriptsCreateView({
                         model: new ScriptsModel()
                     }));
                 }
             });
             
-            app.data.on("create", function () {
-                app.scripts.router.scriptsCreate();
-            });
 
             app.scripts.router = new Router();
-            
+
             if (!app.settings.playgroundMode) {
 
-                app.on("menu-render", function (context) {
-                    context.result += "<li><a href='#/extension/scripts'>Scripts</a></li>";
+                app.on("menu-render", function(context) {
+                    context.result += "<li><a href='#/extension/scripts/list'>Scripts</a></li>";
                 });
 
-                app.on("menu-actions-render", function (context) {
-                    context.result += "<li><a id='createScriptLink'>Create Script</a></li>";
-                    context.on("after-render", function ($el) {
-                        $el.find("#createScriptLink").click(function () {
-                            app.scripts.router.scriptsCreate();
-                        });
-                    });
+                app.on("menu-actions-render", function(context) {
+                    context.result += "<li><a id='createScriptLink' href='/#/extension/scripts/detail'>Create Script</a></li>";
                 });
             }
 
@@ -81,6 +81,7 @@
                 $data.Class.define("$entity.Script", $data.Entity, null, {
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
+                    'shortid': { 'type': 'Edm.String' }
                 }, null);
 
                 $entity.Script.prototype.toString = function() {
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index e17daba9274063b866c739237af165191e034c5e..c1e4fd4ce58170fd2f4b5d9d1003422c2eb0a0bc 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -1,65 +1,65 @@
 ﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.detail.view",
-        "./scripts.create.view", "./scripts.template.view", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsModel, ScriptsDetailView, ScriptsCreateView, TemplateView, ToolbarView) {
+        "./scripts.template.view", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, TemplateView, ToolbarView) {
 
         app.module("scripts", function(module) {
-            
+
             var Router = Backbone.Router.extend({
+                
+                initialize: function() {
+                    app.listenTo(app, "script-saved", function(model) {
+                        window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
+                    });
+                },
+
                 routes: {
-                    "extension/scripts": "scripts",
-                    "extension/scripts/:id": "scriptsDetail",
+                    "extension/scripts/list": "scripts",
+                    "extension/scripts/detail/:id": "scriptsDetail",
+                    "extension/scripts/detail": "scriptsDetail",
                 },
 
-                scripts: function () {
+                scripts: function() {
                     this.navigate("/extension/scripts");
 
                     var model = new ScriptsListModel();
-                    var view = new ScriptsListView({
-                        collection: model
-                    });
 
-                    app.layout.content.show(view);
+                    app.layout.showToolbarViewComposition(new ScriptsListView({ collection: model }), new ScriptsListToolbarView({ collection: model }));
+
 
                     model.fetch();
                 },
 
-                scriptsDetail: function (id) {
+                scriptsDetail: function(id) {
                     var model = new ScriptsModel();
-                    model.set("_id", id);
                     
-                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({model: model}) );
+                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
                     
-                    model.fetch();
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
                 },
 
-                scriptsCreate: function () {
+                scriptsCreate: function() {
                     app.layout.dialog.show(new ScriptsCreateView({
                         model: new ScriptsModel()
                     }));
                 }
             });
             
-            app.data.on("create", function () {
-                app.scripts.router.scriptsCreate();
-            });
 
             app.scripts.router = new Router();
-            
+
             if (!app.settings.playgroundMode) {
 
-                app.on("menu-render", function (context) {
-                    context.result += "<li><a href='#/extension/scripts'>Scripts</a></li>";
+                app.on("menu-render", function(context) {
+                    context.result += "<li><a href='#/extension/scripts/list'>Scripts</a></li>";
                 });
 
-                app.on("menu-actions-render", function (context) {
-                    context.result += "<li><a id='createScriptLink'>Create Script</a></li>";
-                    context.on("after-render", function ($el) {
-                        $el.find("#createScriptLink").click(function () {
-                            app.scripts.router.scriptsCreate();
-                        });
-                    });
+                app.on("menu-actions-render", function(context) {
+                    context.result += "<li><a id='createScriptLink' href='/#/extension/scripts/detail'>Create Script</a></li>";
                 });
             }
 
@@ -81,6 +81,7 @@
                 $data.Class.define("$entity.Script", $data.Entity, null, {
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
+                    'shortid': { 'type': 'Edm.String' }
                 }, null);
 
                 $entity.Script.prototype.toString = function() {
diff --git a/extension/scripts/public/js/scripts.create.view.js b/extension/scripts/public/js/scripts.create.view.js
deleted file mode 100644
index 212df742c0ac459346564143dbadf211a0a26386..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.create.view.js
+++ /dev/null
@@ -1,24 +0,0 @@
-﻿define(["marionette", "app", "core/view.base"], function (Marionette, app, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-create",
-
-        initialize: function () {
-            var self = this;
-        },
-
-        events: {
-            "click #saveCommand": "save"
-        },
-
-        save: function () {
-            var self = this;
-            this.model.set("name", this.$el.find("#name").val());
-            this.model.save({}, {
-                success: function () {
-                    app.layout.dialog.hide();
-                    app.scripts.trigger("created");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.list.toolbar.view.js b/extension/scripts/public/js/scripts.list.toolbar.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..4a596e1ce3f6bb4f0b75ce57f2054f79fbfab878
--- /dev/null
+++ b/extension/scripts/public/js/scripts.list.toolbar.view.js
@@ -0,0 +1,19 @@
+﻿define(["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
diff --git a/extension/scripts/public/js/scripts.list.view.js b/extension/scripts/public/js/scripts.list.view.js
index 1a5b11496795ad7ca5fbf8f8b1418bf0780e3386..27d83dde1bea32b39fdf97ef8be23dbf5ba37e18 100644
--- a/extension/scripts/public/js/scripts.list.view.js
+++ b/extension/scripts/public/js/scripts.list.view.js
@@ -8,11 +8,12 @@
         },
 
         onDomRefresh: function () {
-            DataGrid.show({
+            this.dataGrid = DataGrid.show({
                 collection: this.collection,
                 filter: this.collection.filter,
+                idKey: "shortid",
                 onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/" + id;
+                    window.location.hash = "extension/scripts/detail/" + id;
                 },
                 el: $("#scriptsGridBox"),
                 headerTemplate: "scripts-list-header",
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index d05ee5ec5473cb12ece95e892dc99b6b5874436c..bb40e732b047b4baf466d46ed2c779588237483a 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -2,9 +2,9 @@
     return ModelBase.extend({
         contextSet: function () { return app.dataContext.scripts; },
 
-        fetchQuery: function () {
-            return app.dataContext.scripts.find(this.get("_id"));
-        },
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
         
         setTemplateModel: function(templateModel) {
             this.templateModel = templateModel;
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index 9d226769c254230f919ad7d72eabbe334d560db3..53bed49f4b78bc7cf2e0da690222978bbf3ba763 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -8,7 +8,12 @@
             },
 
             save: function() {
-                this.model.save();
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
             },
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-create.html b/extension/scripts/public/templates/scripts-create.html
deleted file mode 100644
index d1ad78fd18d7c6550681d89ba22dfdf54f9a6ce4..0000000000000000000000000000000000000000
--- a/extension/scripts/public/templates/scripts-create.html
+++ /dev/null
@@ -1,19 +0,0 @@
-﻿<div class="modal-dialog">
-    <div class="modal-content">
-        <div class="modal-header">
-            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title">Create Script</h4>
-        </div>
-        <div class="modal-body">
-            <div>
-                <label>Name</label>
-                <input id="name" />
-            </div>
-        </div>
-        <div class="modal-footer">
-            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
-            <button type="button" id="saveCommand" class="btn btn-primary">Save</button>
-        </div>
-    </div>
-</div>
-
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
index 347499f89d0fc7448ec138f16772230204cb5f40..2f6a7d1a6bfa95502d5e9485186bfc2b7052aafd 100644
--- a/extension/scripts/public/templates/scripts-detail.html
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -1,5 +1,3 @@
-﻿<h2> Script - {{:name}}</h2>
-
-<div>
+﻿<div>
     <textarea id="contentArea">{{:content}}</textarea>
 </div>
diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
new file mode 100644
index 0000000000000000000000000000000000000000..534b8d404c933d28248081318d4cb5cf291e8e23
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -0,0 +1,7 @@
+﻿<div class="navbar-header sub-header">
+    <ul class="nav navbar-nav sub-header">
+        <p class="navbar-text">List of scripts</p>
+        <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
+    </ul>
+
+</div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-template.html b/extension/scripts/public/templates/scripts-template.html
index 1cacab7bf8d13ed12e5337de96b09ea1e36c9f15..3762dfaa4b5c440b7c07495cb49e25138507e9b4 100644
--- a/extension/scripts/public/templates/scripts-template.html
+++ b/extension/scripts/public/templates/scripts-template.html
@@ -1,4 +1,4 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 <div class="expandable-body properties" style="display: none">
     <button class="btn btn-sm btn-primary" id="scriptCommand">Script Upload</button>
 </div>

From 1b167e78b854d10a9a6e2348cebc1295f4ac4063 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 30 Jan 2014 21:46:34 +0100
Subject: [PATCH] toolbars, editable name

---
 extension/scripts/lib/scripts.js                         |  3 +++
 extension/scripts/public/js/scripts.detail.view.js       | 13 ++++++++++++-
 extension/scripts/public/js/scripts.list.toolbar.view.js | 16 +++++++---------
 extension/scripts/public/js/scripts.toolbar.view.js      | 13 +++++++++++++
 extension/scripts/public/templates/scripts-toolbar.html  |  4 +++-
 5 files changed, 38 insertions(+), 11 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index cd7c1586b89d5bc126b39357fc88cf2b87290263..721901ff2bec794e6a7da617521d4a3cc4d4542b 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -115,6 +115,9 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 Scripts.prototype._beforeCreateHandler = function(args, entity) {
      if (entity.shortid == null)
         entity.shortid = shortid.generate();
+    
+     if (entity.name == null)
+        entity.name = "not set";
 };
 
 function createEntitySetDefinitions(entitySets, next) {
diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index a956c2d028c5ee40b2c3287cb78f98a0fc9c9321..9035e0d7e891b93b15bdc3c34945b9cdbc761165 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -13,8 +13,19 @@
                 lineNumbers: true,
                 lineWrapping: true
             });
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
 
-             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            var self = this;
+            this.$el.find("#name").hover(function() {
+                alert("in");
+                self.$el.find("#nameInput").show();
+                self.$el.find("#name").hide();
+            }, function() {
+                alert("out");
+                self.$el.find("#nameInput").hide();
+                self.$el.find("#name").show();
+            });
         },
    });
 });
diff --git a/extension/scripts/public/js/scripts.list.toolbar.view.js b/extension/scripts/public/js/scripts.list.toolbar.view.js
index 4a596e1ce3f6bb4f0b75ce57f2054f79fbfab878..591fc703619edb77df5af4b62f5bc6e24c05b7ea 100644
--- a/extension/scripts/public/js/scripts.list.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.list.toolbar.view.js
@@ -1,19 +1,17 @@
 ﻿define(["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
+    function($, app, CodeMirror, Utils, LayoutBase) {
         return LayoutBase.extend({
             template: "scripts-list-toolbar",
-            
-            initialize: function () {
-            },
-         
+
+            initialize: function() {
+            },         
             
             events: {
                 "click #deleteCommand": "deleteCommand",
             },
-            
+
             deleteCommand: function() {
                 this.contentView.dataGrid.deleteItems();
-            }
+            },
         });
-    });
-
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index 53bed49f4b78bc7cf2e0da690222978bbf3ba763..de9f53307fda91cb14b8b7b27d4ee60825054068 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -15,5 +15,18 @@
                     }
                 });
             },
+
+            onDomRefresh: function() {
+                var self = this;
+
+                this.$el.find("#editableBox").hover(function() {
+                    self.$el.find("#nameInput").show();
+                    self.$el.find("#name").hide();
+                }, function() {
+                    self.$el.find("#nameInput").hide();
+                    self.$el.find("#name").html(self.$el.find("#nameInput").val());
+                    self.$el.find("#name").show();
+                });
+            },
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index 167ede6b77bc64df21c3ec5b5453f423ecb6f98d..f5661b1a2b7e16b0420471034da4908ca3421b5b 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,6 +1,8 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text" name="name">{{:name}}</p>
+        <section id="editableBox">
+        <p class="navbar-text" id="name" name="name">{{:name}}</p><input id="nameInput" name="name" style="display:none; min-width: 180px; float:left"/>
+        </section>
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 8c3ff062375b74ef94bfac84ac3122609406d76a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 31 Jan 2014 20:15:05 +0100
Subject: [PATCH] api help

---
 extension/scripts/lib/scripts.js                    |  4 ++--
 extension/scripts/public/js/main.js                 | 16 +++++++++++-----
 extension/scripts/public/js/main_dev.js             | 16 +++++++++++-----
 extension/scripts/public/js/scripts.detail.view.js  | 11 -----------
 extension/scripts/public/js/scripts.dialog.model.js |  2 +-
 5 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 721901ff2bec794e6a7da617521d4a3cc4d4542b..b01ff1ef402758aef729830e15022e4b44704472 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -36,7 +36,7 @@ Scripts = function (reporter, definition) {
         reporter.templates.TemplateType.addMember("script", { type: this.ScriptType });
     } else {
         this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-        reporter.templates.TemplateType.addMember("scriptId", { type: "id" });
+        reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
     }
     
     this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
@@ -64,7 +64,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         
         logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
-        return self.entitySet.find(request.template.scriptId);
+        return self.entitySet.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
     };
 
     return FindScript().then(function (script) {
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index c1e4fd4ce58170fd2f4b5d9d1003422c2eb0a0bc..88f9f92322ff5168904f5269d3e6b2743533521e 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -6,8 +6,7 @@
 
         app.module("scripts", function(module) {
 
-            var Router = Backbone.Router.extend({
-                
+            var Router = Backbone.Router.extend({                
                 initialize: function() {
                     app.listenTo(app, "script-saved", function(model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
@@ -33,9 +32,9 @@
 
                 scriptsDetail: function(id) {
                     var model = new ScriptsModel();
-                    
+
                     app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
-                    
+
                     if (id != null) {
                         model.set("shortid", id);
                         model.fetch();
@@ -48,7 +47,7 @@
                     }));
                 }
             });
-            
+
 
             app.scripts.router = new Router();
 
@@ -69,13 +68,20 @@
                 context.extensionsRegion.show(view);
             });
 
+
             app.on("template-extensions-get-state", function(model, state) {
+                if (!app.settings.playgroundMode) {
+                    state.scriptId = model.get("scriptId");
+                    return;
+                }
+
                 if (model.get("script") != null && model.get("script").content != null)
                     state.script = model.get("script").content;
                 else
                     state.script = null;
             });
 
+
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index c1e4fd4ce58170fd2f4b5d9d1003422c2eb0a0bc..88f9f92322ff5168904f5269d3e6b2743533521e 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -6,8 +6,7 @@
 
         app.module("scripts", function(module) {
 
-            var Router = Backbone.Router.extend({
-                
+            var Router = Backbone.Router.extend({                
                 initialize: function() {
                     app.listenTo(app, "script-saved", function(model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
@@ -33,9 +32,9 @@
 
                 scriptsDetail: function(id) {
                     var model = new ScriptsModel();
-                    
+
                     app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
-                    
+
                     if (id != null) {
                         model.set("shortid", id);
                         model.fetch();
@@ -48,7 +47,7 @@
                     }));
                 }
             });
-            
+
 
             app.scripts.router = new Router();
 
@@ -69,13 +68,20 @@
                 context.extensionsRegion.show(view);
             });
 
+
             app.on("template-extensions-get-state", function(model, state) {
+                if (!app.settings.playgroundMode) {
+                    state.scriptId = model.get("scriptId");
+                    return;
+                }
+
                 if (model.get("script") != null && model.get("script").content != null)
                     state.script = model.get("script").content;
                 else
                     state.script = null;
             });
 
+
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {
diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 9035e0d7e891b93b15bdc3c34945b9cdbc761165..4d000502bb1ba032c595042b07fed9e9c413a164 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -15,17 +15,6 @@
             });
             
             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            var self = this;
-            this.$el.find("#name").hover(function() {
-                alert("in");
-                self.$el.find("#nameInput").show();
-                self.$el.find("#name").hide();
-            }, function() {
-                alert("out");
-                self.$el.find("#nameInput").hide();
-                self.$el.find("#name").show();
-            });
         },
    });
 });
diff --git a/extension/scripts/public/js/scripts.dialog.model.js b/extension/scripts/public/js/scripts.dialog.model.js
index b0198fb95d6cb2a79b3ec5305195e687291609d7..076c88707dd4e0e58c8f3ea525352cabf0fc3b74 100644
--- a/extension/scripts/public/js/scripts.dialog.model.js
+++ b/extension/scripts/public/js/scripts.dialog.model.js
@@ -53,7 +53,7 @@
             }
 
             app.dataContext.scripts.saveChanges().then(function () {
-                self.templateModel.set("scriptId", entity._id);
+                self.templateModel.set("scriptId", entity.shortid);
                 options.success();
             });
         },

From 5cb948875769cb3fa0e7ef2d2796f8cc66274e2a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 5 Feb 2014 20:25:47 +0100
Subject: [PATCH] examples refactoring

---
 extension/scripts/lib/scripts.js                    | 15 ++++++++++++---
 extension/scripts/public/js/main.js                 |  4 ++++
 extension/scripts/public/js/main_dev.js             |  4 ++++
 extension/scripts/public/js/scripts.dialog.model.js |  3 ++-
 .../scripts/public/js/scripts.template.view.js      |  1 +
 extension/scripts/test/scriptsTest.js               | 21 +++++++++++++++------
 6 files changed, 38 insertions(+), 10 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index b01ff1ef402758aef729830e15022e4b44704472..18dd1d5d46b6807c769225b8f8c1b5239d2a1224 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -84,8 +84,11 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             }
 
             logger.info("Child process successfully finished.");
-            _.extend(request, m.request);
-            _.extend(response, m.response);
+
+            request.data = m.request.data;
+            request.template.html = m.request.template.html;
+            request.template.helpers = m.request.template.helpers;
+        
             return deferred.resolve();
         });
 
@@ -93,7 +96,13 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         
         child.send({
             script: script,
-            request: { data: request.data},
+            request: {
+                 data: request.data,
+                 template: {
+                     html: request.template.html,
+                     helpers: request.template.helpers,
+                 }
+            },
             response: response
         });
 
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 88f9f92322ff5168904f5269d3e6b2743533521e..970c328b7a125ba33739a4b0f97698f16a4d740e 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -71,6 +71,10 @@
 
             app.on("template-extensions-get-state", function(model, state) {
                 if (!app.settings.playgroundMode) {
+
+                    if (model.get("scriptId") == null)
+                        return;
+
                     state.scriptId = model.get("scriptId");
                     return;
                 }
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 88f9f92322ff5168904f5269d3e6b2743533521e..970c328b7a125ba33739a4b0f97698f16a4d740e 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -71,6 +71,10 @@
 
             app.on("template-extensions-get-state", function(model, state) {
                 if (!app.settings.playgroundMode) {
+
+                    if (model.get("scriptId") == null)
+                        return;
+
                     state.scriptId = model.get("scriptId");
                     return;
                 }
diff --git a/extension/scripts/public/js/scripts.dialog.model.js b/extension/scripts/public/js/scripts.dialog.model.js
index 076c88707dd4e0e58c8f3ea525352cabf0fc3b74..0ec83c88b35e4d0d0c3fdd4fc8502bb92e7b4059 100644
--- a/extension/scripts/public/js/scripts.dialog.model.js
+++ b/extension/scripts/public/js/scripts.dialog.model.js
@@ -14,7 +14,8 @@
             app.dataContext.scripts.toArray().then(function(items) {
                 self.items = items;
                 if (self.templateModel.get("scriptId")) {
-                    return app.dataContext.scripts.find(self.templateModel.get("scriptId")).then(function(res) {
+                    return app.dataContext.scripts.single(function(s) {
+                        return s.shortid == this.id; }, { id: self.templateModel.get("scriptId") }).then(function(res) {
                         self.set(self.parse(res.initData), { silent: true });
                         return options.success();
                     });
diff --git a/extension/scripts/public/js/scripts.template.view.js b/extension/scripts/public/js/scripts.template.view.js
index d6a86363e2fb5417ea49454f6de85f72840cc114..04837c9a94164e4337ed8783c27e0762526d688d 100644
--- a/extension/scripts/public/js/scripts.template.view.js
+++ b/extension/scripts/public/js/scripts.template.view.js
@@ -32,6 +32,7 @@
                     });
                     self.listenTo(dialog, "dialog-close", function () {
                         self.render();
+                        self.templateModel.save();
                     });
                     app.layout.dialog.show(dialog);
                 }
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 7218bcd14c44b95b7e4384f47b605e4cfdbd43fe..223b743c435b486edb14b4c9966a730d5a5ed766 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -13,7 +13,7 @@ describeReporting(["scripts"], function (reporter) {
             return reporter.scripts.entitySet.saveChanges().then(function () {
                 return reporter.templates.create({
                     html: "foo",
-                    scriptId: script._id
+                    scriptId: script.shortid
                 });
             });
         }
@@ -27,10 +27,19 @@ describeReporting(["scripts"], function (reporter) {
             });
         }
 
-        it('shoulb be able to modify response', function (done) {
-            prepareRequest("response.test = 'xxx'; done()").then(function(res) {
+        it('shoulb be able to modify request.data', function (done) {
+            prepareRequest("request.data = 'xxx'; done()").then(function(res) {
                 reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
-                    assert.equal('xxx', res.response.test);
+                    assert.equal('xxx', res.request.data);
+                    done();
+                });
+            });
+        });
+        
+         it('shoulb be able to modify request.template.html', function (done) {
+            prepareRequest("request.template.html = 'xxx'; done()").then(function(res) {
+                reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.request.template.html);
                     done();
                 });
             });
@@ -39,12 +48,12 @@ describeReporting(["scripts"], function (reporter) {
         it('shoulb be able to use linked modules', function (done) {
             var scriptContent = "var h = require('handlebars'); " +
                 "var compiledTemplate = h.compile('foo'); " +
-                "response.test = compiledTemplate();" +
+                "request.template.html = compiledTemplate();" +
                 "done();";
             
             prepareRequest(scriptContent).then(function (res) {
                 reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
-                    assert.equal('foo', res.response.test);
+                    assert.equal('foo', res.request.template.html);
                     done();
                 });
             });

From c2800e8d2a6b9b2084cc2662ca89b3ac5550953a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 16:00:58 +0100
Subject: [PATCH] refactored template exntensions layout for standard mode

---
 extension/scripts/public/js/main.js                | 26 ++++++---
 extension/scripts/public/js/main_dev.js            | 26 ++++++---
 .../scripts/public/js/scripts.dialog.model.js      | 63 ----------------------
 extension/scripts/public/js/scripts.dialog.view.js | 49 -----------------
 .../js/scripts.template.playground.dialog.js       | 27 ++++++++++
 .../public/js/scripts.template.playground.model.js | 25 +++++++++
 .../public/js/scripts.template.playground.view.js  | 41 ++++++++++++++
 .../public/js/scripts.template.standard.model.js   | 34 ++++++++++++
 .../public/js/scripts.template.standard.view.js    | 22 ++++++++
 .../scripts/public/js/scripts.template.view.js     | 42 ---------------
 .../scripts/public/templates/scripts-dialog.html   | 21 --------
 .../templates/scripts-template-playground.html     |  4 ++
 .../templates/scripts-template-standard.html       | 19 +++++++
 .../scripts/public/templates/scripts-template.html |  4 --
 14 files changed, 212 insertions(+), 191 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 970c328b7a125ba33739a4b0f97698f16a4d740e..fd540823cb8a099b2200025a5faaa3da2003a8f4 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,12 +1,14 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.view", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, TemplateView, ToolbarView) {
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
+        StandardTemplateView, StandardTemplateModel, ToolbarView) {
 
         app.module("scripts", function(module) {
 
-            var Router = Backbone.Router.extend({                
+            var Router = Backbone.Router.extend({
                 initialize: function() {
                     app.listenTo(app, "script-saved", function(model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
@@ -63,9 +65,21 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                var view = new TemplateView();
-                view.setTemplateModel(context.template);
-                context.extensionsRegion.show(view);
+                if (app.settings.playgroundMode) {
+                    var view = new PlaygroundTemplateView();
+                    view.setTemplateModel(context.template);
+                    context.extensionsRegion.show(view);
+                } else {
+                    var model = new StandardTemplateModel();
+                    model.setTemplate(context.template);
+
+                    model.fetch({
+                        success: function() {
+                            var view = new StandardTemplateView({ model: model });
+                            context.extensionsRegion.show(view);
+                        }
+                    });
+                }
             });
 
 
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 970c328b7a125ba33739a4b0f97698f16a4d740e..fd540823cb8a099b2200025a5faaa3da2003a8f4 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -1,12 +1,14 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.view", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, TemplateView, ToolbarView) {
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
+        StandardTemplateView, StandardTemplateModel, ToolbarView) {
 
         app.module("scripts", function(module) {
 
-            var Router = Backbone.Router.extend({                
+            var Router = Backbone.Router.extend({
                 initialize: function() {
                     app.listenTo(app, "script-saved", function(model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
@@ -63,9 +65,21 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                var view = new TemplateView();
-                view.setTemplateModel(context.template);
-                context.extensionsRegion.show(view);
+                if (app.settings.playgroundMode) {
+                    var view = new PlaygroundTemplateView();
+                    view.setTemplateModel(context.template);
+                    context.extensionsRegion.show(view);
+                } else {
+                    var model = new StandardTemplateModel();
+                    model.setTemplate(context.template);
+
+                    model.fetch({
+                        success: function() {
+                            var view = new StandardTemplateView({ model: model });
+                            context.extensionsRegion.show(view);
+                        }
+                    });
+                }
             });
 
 
diff --git a/extension/scripts/public/js/scripts.dialog.model.js b/extension/scripts/public/js/scripts.dialog.model.js
deleted file mode 100644
index 0ec83c88b35e4d0d0c3fdd4fc8502bb92e7b4059..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.dialog.model.js
+++ /dev/null
@@ -1,63 +0,0 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-
-        fetch: function (options) {
-            var self = this;
-            
-            if (app.settings.playgroundMode) {
-                var obj = this.templateModel.get("script") || {};
-                obj = obj.initData || {};
-                this.set(this.parse(obj), { silent: true });
-                return options.success();
-            }
-
-            app.dataContext.scripts.toArray().then(function(items) {
-                self.items = items;
-                if (self.templateModel.get("scriptId")) {
-                    return app.dataContext.scripts.single(function(s) {
-                        return s.shortid == this.id; }, { id: self.templateModel.get("scriptId") }).then(function(res) {
-                        self.set(self.parse(res.initData), { silent: true });
-                        return options.success();
-                    });
-                }
-
-                self.set(items.length > 0 ? items[0].initData : {}, { silent: true });
-                return options.success();
-            });
-        },
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:_id", function () {
-                this.set(this.parse(_.where(self.items, { _id: self.get("_id") })[0].initData));
-            });
-        },
-
-        save: function (options) {
-            var self = this;
-            var entity = new $entity.Script(this.attributes);
-
-            if (app.settings.playgroundMode) {
-                this.templateModel.set("script", entity);
-                return options.success();
-            }
-
-            if (entity._id != null) {
-                app.dataContext.scripts.attach(entity);
-                this.copyAttributesToEntity(entity);
-            } else {
-                app.dataContext.scripts.add(entity);
-            }
-
-            app.dataContext.scripts.saveChanges().then(function () {
-                self.templateModel.set("scriptId", entity.shortid);
-                options.success();
-            });
-        },
-    });
-});
-
diff --git a/extension/scripts/public/js/scripts.dialog.view.js b/extension/scripts/public/js/scripts.dialog.view.js
deleted file mode 100644
index 86280e86f1f0b8b44e7cc7dc561c0f2a14bfd619..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.dialog.view.js
+++ /dev/null
@@ -1,49 +0,0 @@
-﻿define(["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-            "click #createCommand": "create",
-        },
-        
-        initialize: function () {
-            _.bindAll(this, "getItems", "getItemsLength");
-        },
-
-
-        getItems: function () {
-            return this.model.items;
-        },
-
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        
-        onDomRefresh: function () {
-            var self = this;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-
-        create: function () {
-            app.scripts.trigger("create");
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.playground.dialog.js b/extension/scripts/public/js/scripts.template.playground.dialog.js
new file mode 100644
index 0000000000000000000000000000000000000000..352680c7490f4cea571e975b1083b34875f11d56
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.playground.dialog.js
@@ -0,0 +1,27 @@
+﻿define(["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.playground.model.js b/extension/scripts/public/js/scripts.template.playground.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..2810f986090d3fd7d8e717de1f52efe2c80fed6e
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.playground.model.js
@@ -0,0 +1,25 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+
+        fetch: function (options) {
+            var self = this;
+            
+            var obj = this.templateModel.get("script") || {};
+            obj = obj.initData || {};
+            this.set(this.parse(obj), { silent: true });
+            return options.success();
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+      
+
+        save: function (options) {
+            var entity = new $entity.Script(this.attributes);
+            this.templateModel.set("script", entity);
+            return options.success();
+        },
+    });
+});
+
diff --git a/extension/scripts/public/js/scripts.template.playground.view.js b/extension/scripts/public/js/scripts.template.playground.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..b33c8b9b4469f41d66ddf575c29fc7613533d2c9
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.playground.view.js
@@ -0,0 +1,41 @@
+﻿define(["marionette", "app", "./scripts.template.playground.dialog", "./scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function () {
+                        self.render();
+                        self.templateModel.save();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..d837cb73c6966baa7f2f9ddd1adb20ad97c752ec
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -0,0 +1,34 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.standard.view.js b/extension/scripts/public/js/scripts.template.standard.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..b72e746414d997dbaa389e73c47e9cc61ea5a95d
--- /dev/null
+++ b/extension/scripts/public/js/scripts.template.standard.view.js
@@ -0,0 +1,22 @@
+﻿define(["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.view.js b/extension/scripts/public/js/scripts.template.view.js
deleted file mode 100644
index 04837c9a94164e4337ed8783c27e0762526d688d..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.template.view.js
+++ /dev/null
@@ -1,42 +0,0 @@
-﻿define(["marionette", "app", "./scripts.dialog.view", "./scripts.dialog.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return this.templateModel.get("scriptId") ||
-                 ((this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null));
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function () {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
index 206c230482409fd0be19907648d8f666c6d7091c..fc8f9c676b434bf2652cf947d2feb7a8796f9ca2 100644
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -5,28 +5,7 @@
             <h4 class="modal-title">Script</h4>
         </div>
         <div class="modal-body">
-            {{if ~getMode()}}
                <textarea id="contentArea">{{:content}}</textarea>
-            {{else}}
-              {{if ~getItemsLength() > 0}}
-                  Choose an existing script 
-                  <div class="btn-group" data-binding="_id" style="margin-bottom: 15px; margin-left: 10px">
-                      <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:_id}}">{{:name}}</button>
-                      <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
-                          <span class="caret"></span>
-                      </button>
-                      <ul class="dropdown-menu" role="menu">
-                          {{for ~getItems()}}
-                          <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:_id}}">{{:name}}</a></li>
-                          {{/for}}
-                      </ul>
-                   </div>
-                   <textarea id="contentArea">{{:content}}</textarea>
-              {{else}}
-                        You dont have a script yet. Go ahead and create one. 
-                         <button type="button" id="createCommand" class="btn btn-primary" data-dismiss="modal">Create script</button>
-              {{/if}}
-            {{/if}}
         </div>
         <div class="modal-footer">            
             <button type="button" id="saveCommand" class="btn btn-primary" data-dismiss="modal">Save</button>
diff --git a/extension/scripts/public/templates/scripts-template-playground.html b/extension/scripts/public/templates/scripts-template-playground.html
new file mode 100644
index 0000000000000000000000000000000000000000..3762dfaa4b5c440b7c07495cb49e25138507e9b4
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-template-playground.html
@@ -0,0 +1,4 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+<div class="expandable-body properties" style="display: none">
+    <button class="btn btn-sm btn-primary" id="scriptCommand">Script Upload</button>
+</div>
diff --git a/extension/scripts/public/templates/scripts-template-standard.html b/extension/scripts/public/templates/scripts-template-standard.html
new file mode 100644
index 0000000000000000000000000000000000000000..e360a1920a9954ee3dd9daf355d7fd5fdd9c1e8e
--- /dev/null
+++ b/extension/scripts/public/templates/scripts-template-standard.html
@@ -0,0 +1,19 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+
+<div class="expandable-body properties" style="display: none">
+    {{if ~getItemsLength() > 1}}
+    <div class="btn-group" data-binding="shortid" style="margin-bottom: 15px; margin-left: 10px">
+        <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+            <span class="caret"></span>
+        </button>
+        <ul class="dropdown-menu" role="menu">
+            {{for ~getItems()}}
+            <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
+            {{/for}}
+        </ul>
+    </div>
+    {{else}}
+    <a class="btn btn-primary" href="/#/extension/scripts/detail">Create script</a>
+    {{/if}}
+</div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-template.html b/extension/scripts/public/templates/scripts-template.html
deleted file mode 100644
index 3762dfaa4b5c440b7c07495cb49e25138507e9b4..0000000000000000000000000000000000000000
--- a/extension/scripts/public/templates/scripts-template.html
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
-<div class="expandable-body properties" style="display: none">
-    <button class="btn btn-sm btn-primary" id="scriptCommand">Script Upload</button>
-</div>

From 4904ffc6fa68d4c02d4de952cb4424f1a987b36a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 20:23:56 +0100
Subject: [PATCH] title edit

---
 extension/scripts/public/js/scripts.toolbar.view.js     | 9 ---------
 extension/scripts/public/templates/scripts-detail.html  | 4 +++-
 extension/scripts/public/templates/scripts-toolbar.html | 6 ++----
 3 files changed, 5 insertions(+), 14 deletions(-)

diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index de9f53307fda91cb14b8b7b27d4ee60825054068..75e4a6fdf11a5db49fd95acae856fb35de1ac877 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -18,15 +18,6 @@
 
             onDomRefresh: function() {
                 var self = this;
-
-                this.$el.find("#editableBox").hover(function() {
-                    self.$el.find("#nameInput").show();
-                    self.$el.find("#name").hide();
-                }, function() {
-                    self.$el.find("#nameInput").hide();
-                    self.$el.find("#name").html(self.$el.find("#nameInput").val());
-                    self.$el.find("#name").show();
-                });
             },
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
index 2f6a7d1a6bfa95502d5e9485186bfc2b7052aafd..904f2b3b02091977dec70fecb8a419314cb5155d 100644
--- a/extension/scripts/public/templates/scripts-detail.html
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -1,3 +1,5 @@
-﻿<div>
+﻿{{title #data}}{{/title}}
+
+<div>
     <textarea id="contentArea">{{:content}}</textarea>
 </div>
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index f5661b1a2b7e16b0420471034da4908ca3421b5b..1a9895658303781cb654025f9057c4e44d6b24ce 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,8 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <section id="editableBox">
-        <p class="navbar-text" id="name" name="name">{{:name}}</p><input id="nameInput" name="name" style="display:none; min-width: 180px; float:left"/>
-        </section>
-        <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
+      <p class="navbar-text" id="name" name="name">{{:name}}
+      <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 43beb96192e4a501e9ec5dfa3aca12d18b1d222d Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 21:13:45 +0100
Subject: [PATCH] added columns to tables

---
 extension/scripts/lib/scripts.js                            | 12 ++++++++++--
 extension/scripts/public/js/main.js                         |  8 +++++---
 extension/scripts/public/js/main_dev.js                     |  8 +++++---
 extension/scripts/public/js/scripts.model.js                |  4 ++++
 extension/scripts/public/templates/scripts-list-header.html |  2 ++
 extension/scripts/public/templates/scripts-list-rows.html   |  4 +++-
 6 files changed, 29 insertions(+), 9 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 18dd1d5d46b6807c769225b8f8c1b5239d2a1224..ac9a4da0df092056d36bd6eff033747424895ec2 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -28,6 +28,8 @@ Scripts = function (reporter, definition) {
     
     this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
         shortid: { type: "string"},
+        creationDate: { type: "date" },
+        modificationDate: { type: "date" },
         content: { type: "string" },
         name: { type: "string" },
     }, null);
@@ -40,6 +42,8 @@ Scripts = function (reporter, definition) {
     }
     
     this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
+    this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
+    
     this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
@@ -125,8 +129,12 @@ Scripts.prototype._beforeCreateHandler = function(args, entity) {
      if (entity.shortid == null)
         entity.shortid = shortid.generate();
     
-     if (entity.name == null)
-        entity.name = "not set";
+    entity.creationDate = new Date();
+    entity.modificationDate = new Date();
+};
+
+Scripts.prototype._beforeUpdateHandler = function(args, entity) {
+    entity.modificationDate = new Date();
 };
 
 function createEntitySetDefinitions(entitySets, next) {
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fd540823cb8a099b2200025a5faaa3da2003a8f4..7dee8982d3318351742fa29786063664962896dc 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -22,7 +22,7 @@
                 },
 
                 scripts: function() {
-                    this.navigate("/extension/scripts");
+                    this.navigate("/extension/scripts/list");
 
                     var model = new ScriptsListModel();
 
@@ -56,7 +56,7 @@
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/scripts/list'>Scripts</a></li>";
+                    context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
@@ -105,7 +105,9 @@
                 $data.Class.define("$entity.Script", $data.Entity, null, {
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' }
+                    'shortid': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
                 }, null);
 
                 $entity.Script.prototype.toString = function() {
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index fd540823cb8a099b2200025a5faaa3da2003a8f4..7dee8982d3318351742fa29786063664962896dc 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -22,7 +22,7 @@
                 },
 
                 scripts: function() {
-                    this.navigate("/extension/scripts");
+                    this.navigate("/extension/scripts/list");
 
                     var model = new ScriptsListModel();
 
@@ -56,7 +56,7 @@
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/scripts/list'>Scripts</a></li>";
+                    context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
@@ -105,7 +105,9 @@
                 $data.Class.define("$entity.Script", $data.Entity, null, {
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' }
+                    'shortid': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
                 }, null);
 
                 $entity.Script.prototype.toString = function() {
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index bb40e732b047b4baf466d46ed2c779588237483a..a05fd80ca3fed63c60f2e4926e21d28a328b7ef5 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -6,6 +6,10 @@
             return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
         },    
         
+        defaults: {
+            name: "script name"    
+        },
+        
         setTemplateModel: function(templateModel) {
             this.templateModel = templateModel;
         },
diff --git a/extension/scripts/public/templates/scripts-list-header.html b/extension/scripts/public/templates/scripts-list-header.html
index 574425e2b26d38ff1168067990a3e099b46d15aa..40f5d53e6181f4a89b581395e379ae53e39270af 100644
--- a/extension/scripts/public/templates/scripts-list-header.html
+++ b/extension/scripts/public/templates/scripts-list-header.html
@@ -1 +1,3 @@
 ﻿<th>Name</th>
+<th>LAST MODIFIED</th>
+<th>CREATED</th>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-list-rows.html b/extension/scripts/public/templates/scripts-list-rows.html
index 9d9d1c23397109e5c9aac9dc7ab6b8ab1aaa1fa8..755a684393a1529ebc4af97cc8e229be7b548435 100644
--- a/extension/scripts/public/templates/scripts-list-rows.html
+++ b/extension/scripts/public/templates/scripts-list-rows.html
@@ -1 +1,3 @@
-﻿<td><a>{{:name}}</a></td>
\ No newline at end of file
+﻿<td><a>{{:name}}</a></td>
+<td>{{:~dateToString(modificationDate)}}</td>
+<td>{{:~dateToString(creationDate)}}</td>
\ No newline at end of file

From 84d69ba40febea954a7b4a8674dd99d91412afec Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 15:55:54 +0100
Subject: [PATCH] checkboxes and merge

---
 extension/scripts/public/js/scripts.detail.view.js               | 9 ++++++++-
 extension/scripts/public/templates/scripts-detail.html           | 8 +++++++-
 extension/scripts/public/templates/scripts-dialog.html           | 4 ++--
 extension/scripts/public/templates/scripts-list-rows.html        | 2 +-
 extension/scripts/public/templates/scripts-list-toolbar.html     | 2 +-
 extension/scripts/public/templates/scripts-list.html             | 3 ++-
 .../scripts/public/templates/scripts-template-standard.html      | 4 ++--
 7 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 4d000502bb1ba032c595042b07fed9e9c413a164..791d61a2c79c32fd4caf360b3df33cbaa1561ed4 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -1,6 +1,7 @@
 ﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
     return ViewBase.extend({
         template: "scripts-detail",
+        className : 'full',
 
         initialize: function () {
             this.listenTo(this.model, "sync", this.render);
@@ -11,10 +12,16 @@
                 mode: "javascript",
                 height: "350px",
                 lineNumbers: true,
-                lineWrapping: true
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
             });
             
+            
+            
             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
         },
    });
 });
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
index 904f2b3b02091977dec70fecb8a419314cb5155d..77858e8abfa59ed4c51ec7525bfb89511bc461ab 100644
--- a/extension/scripts/public/templates/scripts-detail.html
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -1,5 +1,11 @@
 ﻿{{title #data}}{{/title}}
+<style>
+    .CodeMirror {
+        height: 100%;
+        width: 100%
 
-<div>
+    }
+</style>
+<div style="width: 100%; height: 100%; border-style: solid; border-width: 2px">
     <textarea id="contentArea">{{:content}}</textarea>
 </div>
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
index fc8f9c676b434bf2652cf947d2feb7a8796f9ca2..6a89ba2aa9ac4c6afe7255278330f24935f30825 100644
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -1,4 +1,4 @@
-﻿<div class="modal-dialog">
+﻿<div class="modal-dialog fs">
     <div class="modal-content">
         <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
@@ -8,7 +8,7 @@
                <textarea id="contentArea">{{:content}}</textarea>
         </div>
         <div class="modal-footer">            
-            <button type="button" id="saveCommand" class="btn btn-primary" data-dismiss="modal">Save</button>
+            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Upload</button>
         </div>
     </div>
 </div>
diff --git a/extension/scripts/public/templates/scripts-list-rows.html b/extension/scripts/public/templates/scripts-list-rows.html
index 755a684393a1529ebc4af97cc8e229be7b548435..4492b420ce99ba566dd861c35113b1319777a51a 100644
--- a/extension/scripts/public/templates/scripts-list-rows.html
+++ b/extension/scripts/public/templates/scripts-list-rows.html
@@ -1,3 +1,3 @@
-﻿<td><a>{{:name}}</a></td>
+﻿<td class="link"><a>{{:name}}</a></td>
 <td>{{:~dateToString(modificationDate)}}</td>
 <td>{{:~dateToString(creationDate)}}</td>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
index 534b8d404c933d28248081318d4cb5cf291e8e23..2f0d464c2e6bd3d747844aa892459d70651a74a2 100644
--- a/extension/scripts/public/templates/scripts-list-toolbar.html
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text">List of scripts</p>
+        <p class="navbar-text">List of Scripts</p>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 
diff --git a/extension/scripts/public/templates/scripts-list.html b/extension/scripts/public/templates/scripts-list.html
index 4f6dcb44c4ab3003bfb1fea04d0d1685d1226c12..409b972a776bc36e4dd41d71d3c91ee2463703c5 100644
--- a/extension/scripts/public/templates/scripts-list.html
+++ b/extension/scripts/public/templates/scripts-list.html
@@ -1,3 +1,4 @@
-﻿<div id="scriptsGridBox">
+﻿<span><h3>all scripts</h3></span>
+<div id="scriptsGridBox">
     
 </div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-template-standard.html b/extension/scripts/public/templates/scripts-template-standard.html
index e360a1920a9954ee3dd9daf355d7fd5fdd9c1e8e..1d085e0acbe7b3942d17964edf9e3bf9846c150a 100644
--- a/extension/scripts/public/templates/scripts-template-standard.html
+++ b/extension/scripts/public/templates/scripts-template-standard.html
@@ -1,8 +1,8 @@
 ﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 
 <div class="expandable-body properties" style="display: none">
-    {{if ~getItemsLength() > 1}}
-    <div class="btn-group" data-binding="shortid" style="margin-bottom: 15px; margin-left: 10px">
+    {{if ~getItemsLength() > 1}} 
+    <div class="btn-group" data-binding="shortid">
         <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
         <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
             <span class="caret"></span>

From 5914b6add9d8e97533c38503e565a0dcb10d3fb9 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 19:45:01 +0100
Subject: [PATCH] drastic ui changes

---
 extension/scripts/public/js/scripts.detail.view.js     |  5 ++++-
 extension/scripts/public/templates/scripts-detail.html | 16 ++++++----------
 2 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 791d61a2c79c32fd4caf360b3df33cbaa1561ed4..9a618df7be2bedb7f9b361d28373d088fb47532b 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -1,13 +1,15 @@
 ﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
     return ViewBase.extend({
         template: "scripts-detail",
-        className : 'full',
 
         initialize: function () {
             this.listenTo(this.model, "sync", this.render);
         },
 
         onDomRefresh: function () {
+
+            var top = $("#contentWrap").position().top;
+            
             this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
                 mode: "javascript",
                 height: "350px",
@@ -22,6 +24,7 @@
             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
             
             $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
         },
    });
 });
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
index 77858e8abfa59ed4c51ec7525bfb89511bc461ab..3505dfc35c47eba3469c771e36eb37684a129654 100644
--- a/extension/scripts/public/templates/scripts-detail.html
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -1,11 +1,7 @@
-﻿{{title #data}}{{/title}}
-<style>
-    .CodeMirror {
-        height: 100%;
-        width: 100%
-
-    }
-</style>
-<div style="width: 100%; height: 100%; border-style: solid; border-width: 2px">
-    <textarea id="contentArea">{{:content}}</textarea>
+﻿<div>
+    {{title #data}}{{/title}}
 </div>
+
+<div id="contentWrap">
+    <textarea id="contentArea" class="full-content">{{:content}}</textarea>
+</div>
\ No newline at end of file

From 36e1abe6c122581673b8d5d5c95e86bc246b4fa0 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 19:59:53 +0100
Subject: [PATCH] styles fix

---
 extension/scripts/public/js/scripts.detail.view.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 9a618df7be2bedb7f9b361d28373d088fb47532b..287b5bf0a21292921aab6300881962cf7293ba0f 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -25,6 +25,8 @@
             
             $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
             $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+            
+            this.contentCodeMirror.refresh();
         },
    });
 });

From 2d9d6f876b5c9fcdf8913dc8ca6f09887606483c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 11:12:22 +0100
Subject: [PATCH] fixed tests, support for standard on prem mode

---
 extension/scripts/public/js/main.js | 311 +++++++++++++++++++++++++++++++++++-
 1 file changed, 306 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 7dee8982d3318351742fa29786063664962896dc..1181685e81955cb9649b9860ef04367d2130e5f2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,309 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });
+            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+            
+            this.contentCodeMirror.refresh();
+        },
+   });
+});
+
+
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+
+        fetch: function (options) {
+            var self = this;
+            
+            var obj = this.templateModel.get("script") || {};
+            obj = obj.initData || {};
+            this.set(this.parse(obj), { silent: true });
+            return options.success();
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+      
+
+        save: function (options) {
+            var entity = new $entity.Script(this.attributes);
+            this.templateModel.set("script", entity);
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function () {
+                        self.render();
+                        self.templateModel.save();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 8160cdc4dd040bcb5b592acb311946e8cac5a37d Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 20:15:08 +0100
Subject: [PATCH] phantom margin, refactoring

---
 extension/scripts/lib/scripts.js                   |   2 +-
 extension/scripts/public/js/main.js                | 331 +--------------------
 extension/scripts/public/js/main_dev.js            |  18 --
 .../public/js/scripts.template.playground.model.js |  18 +-
 .../public/js/scripts.template.playground.view.js  |  21 +-
 5 files changed, 30 insertions(+), 360 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index ac9a4da0df092056d36bd6eff033747424895ec2..4207775b442387fe2ef4cf602dae49e61c03121a 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -57,7 +57,7 @@ Scripts.prototype.create = function(script) {
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
     
-    if (!request.template.scriptId && !request.template.script) {
+    if (!request.template.scriptId && !(request.template.script != null && request.template.script.content)) {
         logger.info("ScriptId not defined for this template.");
         return;
     }
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 1181685e81955cb9649b9860ef04367d2130e5f2..1204b1734c439e7baea5f394a6c6391782d29bc4 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,309 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function () {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function () {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });
-            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-            
-            this.contentCodeMirror.refresh();
-        },
-   });
-});
-
-
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-
-        fetch: function (options) {
-            var self = this;
-            
-            var obj = this.templateModel.get("script") || {};
-            obj = obj.initData || {};
-            this.set(this.parse(obj), { silent: true });
-            return options.success();
-        },
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-      
-
-        save: function (options) {
-            var entity = new $entity.Script(this.attributes);
-            this.templateModel.set("script", entity);
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function () {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
-            });
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 
@@ -385,19 +84,19 @@ define(["app", "marionette", "backbone",
 
 
             app.on("template-extensions-get-state", function(model, state) {
-                if (!app.settings.playgroundMode) {
+                //if (!app.settings.playgroundMode) {
 
-                    if (model.get("scriptId") == null)
-                        return;
+                //    if (model.get("scriptId") == null)
+                //        return;
 
-                    state.scriptId = model.get("scriptId");
-                    return;
-                }
+                //    state.scriptId = model.get("scriptId");
+                //    return;
+                //}
 
-                if (model.get("script") != null && model.get("script").content != null)
-                    state.script = model.get("script").content;
-                else
-                    state.script = null;
+                //if (model.get("script") != null && model.get("script").content != null)
+                //    state.script = model.get("script").content;
+                //else
+                //    state.script = null;
             });
 
 
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 7dee8982d3318351742fa29786063664962896dc..e340fdb749813e99e9425afdeeaf12e4cd113ac2 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -82,24 +82,6 @@
                 }
             });
 
-
-            app.on("template-extensions-get-state", function(model, state) {
-                if (!app.settings.playgroundMode) {
-
-                    if (model.get("scriptId") == null)
-                        return;
-
-                    state.scriptId = model.get("scriptId");
-                    return;
-                }
-
-                if (model.get("script") != null && model.get("script").content != null)
-                    state.script = model.get("script").content;
-                else
-                    state.script = null;
-            });
-
-
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {
diff --git a/extension/scripts/public/js/scripts.template.playground.model.js b/extension/scripts/public/js/scripts.template.playground.model.js
index 2810f986090d3fd7d8e717de1f52efe2c80fed6e..cbd0cfba346f9647b969b5fa3c63b81ef76b3477 100644
--- a/extension/scripts/public/js/scripts.template.playground.model.js
+++ b/extension/scripts/public/js/scripts.template.playground.model.js
@@ -1,23 +1,13 @@
 ﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
     return ModelBase.extend({
-
-        fetch: function (options) {
-            var self = this;
-            
-            var obj = this.templateModel.get("script") || {};
-            obj = obj.initData || {};
-            this.set(this.parse(obj), { silent: true });
-            return options.success();
-        },
-
+       
         setTemplateModel: function (templateModel) {
             this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
         },
-      
-
+        
         save: function (options) {
-            var entity = new $entity.Script(this.attributes);
-            this.templateModel.set("script", entity);
+            this.templateModel.get("script").dataJson = this.get("content");
             return options.success();
         },
     });
diff --git a/extension/scripts/public/js/scripts.template.playground.view.js b/extension/scripts/public/js/scripts.template.playground.view.js
index b33c8b9b4469f41d66ddf575c29fc7613533d2c9..91e28b89d4dda5dceb770818063eb22b17077233 100644
--- a/extension/scripts/public/js/scripts.template.playground.view.js
+++ b/extension/scripts/public/js/scripts.template.playground.view.js
@@ -10,6 +10,9 @@
         
         setTemplateModel: function (model) {
             this.templateModel = model;
+            
+             if (model.get("script") == null)
+                model.set("script", new $entity.Script());
         },
         
         events: {
@@ -24,18 +27,14 @@
             var self = this;
             var model = new Model();
             model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function () {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
+            var dialog = new DialogView({
+                model: model
             });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
         }
     });
 });
\ No newline at end of file

From 0777e6f2f48c38dd50904b47535f79263a3a6880 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Feb 2014 12:24:32 +0100
Subject: [PATCH] child templates

---
 extension/scripts/public/js/main.js | 18 ------------------
 1 file changed, 18 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 1204b1734c439e7baea5f394a6c6391782d29bc4..e340fdb749813e99e9425afdeeaf12e4cd113ac2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -82,24 +82,6 @@
                 }
             });
 
-
-            app.on("template-extensions-get-state", function(model, state) {
-                //if (!app.settings.playgroundMode) {
-
-                //    if (model.get("scriptId") == null)
-                //        return;
-
-                //    state.scriptId = model.get("scriptId");
-                //    return;
-                //}
-
-                //if (model.get("script") != null && model.get("script").content != null)
-                //    state.script = model.get("script").content;
-                //else
-                //    state.script = null;
-            });
-
-
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {

From 3db996dff6b535f7d8a714a5f92436cd845b9343 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Feb 2014 21:20:57 +0100
Subject: [PATCH] fixing tests and api dialog

---
 extension/scripts/public/js/scripts.template.standard.model.js | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index d837cb73c6966baa7f2f9ddd1adb20ad97c752ec..b207f76e4bc803789c0c021f52e708a843d6e52e 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -21,6 +21,12 @@
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
+            
+            var self = this;
+            
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("scriptId", self.get("shortid"));
+            });
         },
 
         initialize: function () {

From eb34274b9b4e30af8b67ca3ef9541354275b9855 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 20 Feb 2014 01:15:26 +0100
Subject: [PATCH] tutorials, phantom recipe improvments

---
 extension/scripts/lib/scriptEvalChild.js | 2 +-
 extension/scripts/lib/scripts.js         | 2 --
 2 files changed, 1 insertion(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index 337f8a2de13a7e6fd410d1e67f8f40250112e583..280b689e40b5e85052b698b8c4cdc68e8e36543d 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -2,7 +2,7 @@
     try {
         
         var _require = function (moduleName) {
-            var allowedModules = ["handlebars", "request-json", "feedparser", "request"];
+            var allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore"];
 
             if (allowedModules.filter(function (mod) { return mod == moduleName; }).length == 1) {
                 return require(moduleName);
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 4207775b442387fe2ef4cf602dae49e61c03121a..17d72ce25f2f201b7b42df07a52cc6ac2d55c2be 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -95,8 +95,6 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         
             return deferred.resolve();
         });
-
-        logger.info(JSON.stringify(request.template));
         
         child.send({
             script: script,

From bc0d6f5245dd612351b30b84f0ca12a14b8f0c62 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 20 Feb 2014 14:38:13 +0100
Subject: [PATCH] changed url for api endpoints

---
 extension/scripts/lib/scripts.js      |  4 ++--
 extension/scripts/test/scriptsTest.js | 12 ++++++------
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 17d72ce25f2f201b7b42df07a52cc6ac2d55c2be..dc01e78bc9456d27936a3bae5be0a0351d53e267 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -90,7 +90,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             logger.info("Child process successfully finished.");
 
             request.data = m.request.data;
-            request.template.html = m.request.template.html;
+            request.template.content = m.request.template.content;
             request.template.helpers = m.request.template.helpers;
         
             return deferred.resolve();
@@ -101,7 +101,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             request: {
                  data: request.data,
                  template: {
-                     html: request.template.html,
+                     content: request.template.content,
                      helpers: request.template.helpers,
                  }
             },
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 223b743c435b486edb14b4c9966a730d5a5ed766..e4390796d7203fc2f629caeafc29f5b5535ea97d 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -12,7 +12,7 @@ describeReporting(["scripts"], function (reporter) {
             reporter.scripts.entitySet.add(script);
             return reporter.scripts.entitySet.saveChanges().then(function () {
                 return reporter.templates.create({
-                    html: "foo",
+                    content: "foo",
                     scriptId: script.shortid
                 });
             });
@@ -36,10 +36,10 @@ describeReporting(["scripts"], function (reporter) {
             });
         });
         
-         it('shoulb be able to modify request.template.html', function (done) {
-            prepareRequest("request.template.html = 'xxx'; done()").then(function(res) {
+         it('shoulb be able to modify request.template.content', function (done) {
+            prepareRequest("request.template.content = 'xxx'; done()").then(function(res) {
                 reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
-                    assert.equal('xxx', res.request.template.html);
+                    assert.equal('xxx', res.request.template.content);
                     done();
                 });
             });
@@ -48,12 +48,12 @@ describeReporting(["scripts"], function (reporter) {
         it('shoulb be able to use linked modules', function (done) {
             var scriptContent = "var h = require('handlebars'); " +
                 "var compiledTemplate = h.compile('foo'); " +
-                "request.template.html = compiledTemplate();" +
+                "request.template.content = compiledTemplate();" +
                 "done();";
             
             prepareRequest(scriptContent).then(function (res) {
                 reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
-                    assert.equal('foo', res.request.template.html);
+                    assert.equal('foo', res.request.template.content);
                     done();
                 });
             });

From 340d5ee90afc343256fd0514ac2b3f859c2180c7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 17:56:56 +0100
Subject: [PATCH] extension as node modules

---
 extension/scripts/jsreport.config.js                           | 5 +++++
 extension/scripts/package.json                                 | 5 -----
 extension/scripts/public/js/main.js                            | 4 ++--
 extension/scripts/public/js/main_dev.js                        | 4 ++--
 extension/scripts/public/js/scripts.template.standard.model.js | 4 ++--
 5 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/extension/scripts/jsreport.config.js b/extension/scripts/jsreport.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..4fac3f5806bd105ffeaeef25379b77fc54350522
--- /dev/null
+++ b/extension/scripts/jsreport.config.js
@@ -0,0 +1,5 @@
+﻿module.exports = {
+  "name": "scripts",
+  "main": "lib/scripts.js",
+  "dependencies": [ "templates" ]
+}
\ No newline at end of file
diff --git a/extension/scripts/package.json b/extension/scripts/package.json
deleted file mode 100644
index a3d3fc253f595c2c573cfb52bbda1b5ca3749612..0000000000000000000000000000000000000000
--- a/extension/scripts/package.json
+++ /dev/null
@@ -1,5 +0,0 @@
-﻿{
-  "name": "scripts",
-  "main": "lib/scripts.js",
-  "dependencies": [ "templates" ]
-}
\ No newline at end of file
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index e340fdb749813e99e9425afdeeaf12e4cd113ac2..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -68,7 +68,7 @@
                 if (app.settings.playgroundMode) {
                     var view = new PlaygroundTemplateView();
                     view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view);
+                    context.extensionsRegion.show(view, "scripts");
                 } else {
                     var model = new StandardTemplateModel();
                     model.setTemplate(context.template);
@@ -76,7 +76,7 @@
                     model.fetch({
                         success: function() {
                             var view = new StandardTemplateView({ model: model });
-                            context.extensionsRegion.show(view);
+                            context.extensionsRegion.show(view, "scripts");
                         }
                     });
                 }
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index e340fdb749813e99e9425afdeeaf12e4cd113ac2..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -68,7 +68,7 @@
                 if (app.settings.playgroundMode) {
                     var view = new PlaygroundTemplateView();
                     view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view);
+                    context.extensionsRegion.show(view, "scripts");
                 } else {
                     var model = new StandardTemplateModel();
                     model.setTemplate(context.template);
@@ -76,7 +76,7 @@
                     model.fetch({
                         success: function() {
                             var view = new StandardTemplateView({ model: model });
-                            context.extensionsRegion.show(view);
+                            context.extensionsRegion.show(view, "scripts");
                         }
                     });
                 }
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index b207f76e4bc803789c0c021f52e708a843d6e52e..3fa2af2c02d6bac2b0ebeff71b81a970b60abf9b 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -11,11 +11,11 @@
                 self.items.unshift(empty);
 
                 if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }), { silent: true });
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
                 else 
                   self.set(empty, { silent: true });
                 
-                return options.success();
+                 return options.success();
             });
         },
 

From c7a0586882814a1b16313cf0e70001e4c5304a75 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 19:35:28 +0100
Subject: [PATCH] ui merge

---
 extension/scripts/public/js/main.js                | 306 ++++++++++++++++++++-
 .../public/templates/scripts-list-toolbar.html     |   2 +-
 .../templates/scripts-template-standard.html       |   2 +-
 .../scripts/public/templates/scripts-toolbar.html  |   2 +-
 4 files changed, 304 insertions(+), 8 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..2f0a09959dc0f0808eb26a5ed689c4786e0aefc6 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,304 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });
+            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+            
+            this.contentCodeMirror.refresh();
+        },
+   });
+});
+
+
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+             if (model.get("script") == null)
+                model.set("script", new $entity.Script());
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            
+            var self = this;
+            
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("scriptId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 
diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
index 2f0d464c2e6bd3d747844aa892459d70651a74a2..92123ebf75856568dc5d3c4da897e4276cdcfc55 100644
--- a/extension/scripts/public/templates/scripts-list-toolbar.html
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text">List of Scripts</p>
+        <p class="navbar-text"></p>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 
diff --git a/extension/scripts/public/templates/scripts-template-standard.html b/extension/scripts/public/templates/scripts-template-standard.html
index 1d085e0acbe7b3942d17964edf9e3bf9846c150a..a3d5a8f8c863693b7c24959f0aba6b730414e182 100644
--- a/extension/scripts/public/templates/scripts-template-standard.html
+++ b/extension/scripts/public/templates/scripts-template-standard.html
@@ -1,4 +1,4 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-tower"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 
 <div class="expandable-body properties" style="display: none">
     {{if ~getItemsLength() > 1}} 
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index 1a9895658303781cb654025f9057c4e44d6b24ce..3d02aa0c5904ef20d66c6badaeec9305082a41c5 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-      <p class="navbar-text" id="name" name="name">{{:name}}
+      <p class="navbar-text"></p>
       <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 5bd90bbd6cfe4905ea81d33af7a3342066970a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 10:25:42 +0100
Subject: [PATCH] before merge

---
 extension/scripts/public/js/main.js | 306 +-----------------------------------
 1 file changed, 5 insertions(+), 301 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 2f0a09959dc0f0808eb26a5ed689c4786e0aefc6..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,304 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function () {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function () {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });
-            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-            
-            this.contentCodeMirror.refresh();
-        },
-   });
-});
-
-
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-             if (model.get("script") == null)
-                model.set("script", new $entity.Script());
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            
-            var self = this;
-            
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("scriptId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From d9c54341b0df4088d08f4b9d611ef31f13283abd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 11:27:50 +0100
Subject: [PATCH] after merge

---
 extension/scripts/public/js/main.js | 306 +++++++++++++++++++++++++++++++++++-
 1 file changed, 301 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..2f0a09959dc0f0808eb26a5ed689c4786e0aefc6 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,304 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });
+            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+            
+            this.contentCodeMirror.refresh();
+        },
+   });
+});
+
+
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+             if (model.get("script") == null)
+                model.set("script", new $entity.Script());
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            
+            var self = this;
+            
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("scriptId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 1be5f1f06ece88aafc0a9240dc027e15f7745b34 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 12:52:47 +0100
Subject: [PATCH] add missing fonts

---
 extension/scripts/public/js/main.js | 306 +-----------------------------------
 1 file changed, 5 insertions(+), 301 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 2f0a09959dc0f0808eb26a5ed689c4786e0aefc6..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,304 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function () {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function () {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });
-            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-            
-            this.contentCodeMirror.refresh();
-        },
-   });
-});
-
-
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-             if (model.get("script") == null)
-                model.set("script", new $entity.Script());
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            
-            var self = this;
-            
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("scriptId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 78e2264f864a42783eab5a290e1b1e644b9c7723 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Feb 2014 19:06:28 +0100
Subject: [PATCH] copyrights

---
 extension/scripts/lib/scripts.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index dc01e78bc9456d27936a3bae5be0a0351d53e267..2c56c155832e72fd590ec62596f46696d6ac82c6 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -1,4 +1,8 @@
-﻿var Readable = require("stream").Readable,
+﻿/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */ 
+
+var Readable = require("stream").Readable,
     shortid = require("shortid"),
     winston = require("winston"),
     events = require("events"),

From 48c22957ed23acabc373c7969f7febaff3362771 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 1 Mar 2014 21:20:57 +0100
Subject: [PATCH] refactoring to get q promise more involved

---
 extension/scripts/lib/scripts.js | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 2c56c155832e72fd590ec62596f46696d6ac82c6..87b4f6ae88b112826aa76de2a6588782b2029d75 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -139,9 +139,8 @@ Scripts.prototype._beforeUpdateHandler = function(args, entity) {
     entity.modificationDate = new Date();
 };
 
-function createEntitySetDefinitions(entitySets, next) {
+function createEntitySetDefinitions(entitySets) {
     if (!this.reporter.playgroundMode) {
         entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType };
     }
-    next();
 };
\ No newline at end of file

From f07ab678510dd01e274ed44ae840acef17b72717 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 2 Mar 2014 13:17:04 +0100
Subject: [PATCH] improving tests

---
 extension/scripts/lib/scripts.js      | 36 +++++++++++++----------------------
 extension/scripts/test/scriptsTest.js |  6 +++---
 2 files changed, 16 insertions(+), 26 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 87b4f6ae88b112826aa76de2a6588782b2029d75..954f2c41762dc2aadff667c153a4c50d3be2a074 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -1,15 +1,13 @@
 ﻿/*! 
  * Copyright(c) 2014 Jan Blaha 
+ *
+ * Extension allowing to run custom scripts and modify request before rendering process starts.
  */ 
 
-var Readable = require("stream").Readable,
-    shortid = require("shortid"),
+var shortid = require("shortid"),
     winston = require("winston"),
-    events = require("events"),
-    util = require("util"),
     fork = require('child_process').fork,
     sformat = require("stringformat"),
-    async = require("async"),
     _ = require("underscore"),
     join = require("path").join,
     Q = require("q");
@@ -23,12 +21,6 @@ module.exports = function (reporter, definition) {
 Scripts = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
-
-    Object.defineProperty(this, "entitySet", {
-        get: function () {
-            return reporter.context.scripts;
-        }
-    });
     
     this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
         shortid: { type: "string"},
@@ -52,18 +44,16 @@ Scripts = function (reporter, definition) {
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
 
-Scripts.prototype.create = function(script) {
+Scripts.prototype.create = function(context, script) {
     var entity = new this.ScriptType(script);
-    this.entitySet.add(entity);
-    return this.entitySet.saveChanges().then(function() { return Q(entity); });
+    context.scripts.add(entity);
+    return context.scripts.saveChanges().then(function() { return Q(entity); });
 };
 
 Scripts.prototype.handleBeforeRender = function (request, response) {
-    var self = this;
-    
     if (!request.template.scriptId && !(request.template.script != null && request.template.script.content)) {
         logger.info("ScriptId not defined for this template.");
-        return;
+        return Q();
     }
 
     function FindScript() {
@@ -72,11 +62,11 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         
         logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
-        return self.entitySet.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
+        return request.context.scripts.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
     };
 
     return FindScript().then(function (script) {
-        var deferred = Q.defer();
+        var qdefer = Q.defer();
         script = script.content || script;
 
         var child = fork(join(__dirname, "scriptEvalChild.js"));
@@ -88,7 +78,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             if (m.error) {
                 logger.error("Child process process resulted in error " + JSON.stringify(m.error));
                 logger.error(m);
-                return deferred.reject({ message: m.error, stack: m.errorStack });
+                return qdefer.reject({ message: m.error, stack: m.errorStack });
             }
 
             logger.info("Child process successfully finished.");
@@ -97,7 +87,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             request.template.content = m.request.template.content;
             request.template.helpers = m.request.template.helpers;
         
-            return deferred.resolve();
+            return qdefer.resolve();
         });
         
         child.send({
@@ -120,10 +110,10 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 
             child.kill();
             logger.error("Child process resulted in timeout.");
-            return deferred.reject({ message: "Timeout error during script execution" });
+            return qdefer.reject({ message: "Timeout error during script execution" });
         }, 60000);
 
-        return deferred.promise;
+        return qdefer.promise;
     });
 };
 
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index e4390796d7203fc2f629caeafc29f5b5535ea97d..3e807f9242d5233f77aff5e264b9d6eb417b3c7d 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -9,8 +9,8 @@ describeReporting(["scripts"], function (reporter) {
         
         function prepareTemplate(scriptContent) {
             var script = new reporter.scripts.ScriptType({ content: scriptContent });
-            reporter.scripts.entitySet.add(script);
-            return reporter.scripts.entitySet.saveChanges().then(function () {
+            reporter.context.scripts.add(script);
+            return reporter.context.scripts.saveChanges().then(function () {
                 return reporter.templates.create({
                     content: "foo",
                     scriptId: script.shortid
@@ -21,7 +21,7 @@ describeReporting(["scripts"], function (reporter) {
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function(template) {
                 return Q({
-                    request: { template: template }, 
+                    request: { template: template, context: reporter.context }, 
                     response: {}
                 });
             });

From a8a5855721644d9c8ffe282a167c490604cdb56c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 12:17:24 +0100
Subject: [PATCH] unit tests

---
 extension/scripts/lib/scripts.js | 91 ++++++++++++++++++++--------------------
 1 file changed, 45 insertions(+), 46 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 954f2c41762dc2aadff667c153a4c50d3be2a074..b83485e367acff171e0d91381e311396023bd9cb 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -40,8 +40,8 @@ Scripts = function (reporter, definition) {
     this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
     this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
     
-    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
-    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
+    this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
+    this.reporter.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
 
 Scripts.prototype.create = function(context, script) {
@@ -65,55 +65,54 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         return request.context.scripts.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
     };
 
-    return FindScript().then(function (script) {
-        var qdefer = Q.defer();
-        script = script.content || script;
+    return FindScript().then(function(script) {
 
+        script = script.content || script;
         var child = fork(join(__dirname, "scriptEvalChild.js"));
-
         var isDone = false;
 
-        child.on('message', function(m) {
-            isDone = true;
-            if (m.error) {
-                logger.error("Child process process resulted in error " + JSON.stringify(m.error));
-                logger.error(m);
-                return qdefer.reject({ message: m.error, stack: m.errorStack });
-            }
-
-            logger.info("Child process successfully finished.");
-
-            request.data = m.request.data;
-            request.template.content = m.request.template.content;
-            request.template.helpers = m.request.template.helpers;
-        
-            return qdefer.resolve();
+        return Q.nfcall(function(cb) {
+
+            child.on('message', function(m) {
+                isDone = true;
+                if (m.error) {
+                    logger.error("Child process process resulted in error " + JSON.stringify(m.error));
+                    logger.error(m);
+                    return cb({ message: m.error, stack: m.errorStack });
+                }
+
+                logger.info("Child process successfully finished.");
+
+                request.data = m.request.data;
+                request.template.content = m.request.template.content;
+                request.template.helpers = m.request.template.helpers;
+
+                return cb();
+            });
+
+            child.send({
+                script: script,
+                request: {
+                    data: request.data,
+                    template: {
+                        content: request.template.content,
+                        helpers: request.template.helpers,
+                    }
+                },
+                response: response
+            });
+
+            logger.info("Child process started.");
+
+            setTimeout(function() {
+                if (isDone)
+                    return;
+
+                child.kill();
+                logger.error("Child process resulted in timeout.");
+                return cb({ message: "Timeout error during script execution" });
+            }, 60000);
         });
-        
-        child.send({
-            script: script,
-            request: {
-                 data: request.data,
-                 template: {
-                     content: request.template.content,
-                     helpers: request.template.helpers,
-                 }
-            },
-            response: response
-        });
-
-        logger.info("Child process started.");
-
-        setTimeout(function() {
-            if (isDone)
-                return;
-
-            child.kill();
-            logger.error("Child process resulted in timeout.");
-            return qdefer.reject({ message: "Timeout error during script execution" });
-        }, 60000);
-
-        return qdefer.promise;
     });
 };
 

From 2468149ad3e484c300f8bfe4eadce2b6e240439b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 13:12:00 +0100
Subject: [PATCH] ui merge

---
 extension/scripts/public/templates/scripts-list-toolbar.html      | 3 +--
 .../scripts/public/templates/scripts-template-playground.html     | 4 ++--
 extension/scripts/public/templates/scripts-template-standard.html | 8 ++++----
 extension/scripts/public/templates/scripts-toolbar.html           | 3 +--
 4 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
index 92123ebf75856568dc5d3c4da897e4276cdcfc55..ff4dbefd3233c79002b73749195df391ff541b86 100644
--- a/extension/scripts/public/templates/scripts-list-toolbar.html
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -1,6 +1,5 @@
-﻿<div class="navbar-header sub-header">
+﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text"></p>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 
diff --git a/extension/scripts/public/templates/scripts-template-playground.html b/extension/scripts/public/templates/scripts-template-playground.html
index 3762dfaa4b5c440b7c07495cb49e25138507e9b4..fd782b8e2fe6656eb4c9385dfd74eb21ec299f85 100644
--- a/extension/scripts/public/templates/scripts-template-playground.html
+++ b/extension/scripts/public/templates/scripts-template-playground.html
@@ -1,4 +1,4 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-open"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-tower"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 <div class="expandable-body properties" style="display: none">
-    <button class="btn btn-sm btn-primary" id="scriptCommand">Script Upload</button>
+    <button class="btn btn-xs btn-warning" id="scriptCommand">Script Upload</button>
 </div>
diff --git a/extension/scripts/public/templates/scripts-template-standard.html b/extension/scripts/public/templates/scripts-template-standard.html
index a3d5a8f8c863693b7c24959f0aba6b730414e182..95b9ff1d22fefdb596258c0a88ca2b7920e0e504 100644
--- a/extension/scripts/public/templates/scripts-template-standard.html
+++ b/extension/scripts/public/templates/scripts-template-standard.html
@@ -1,13 +1,13 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-tower"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-tower"></i>Script<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 
 <div class="expandable-body properties" style="display: none">
     {{if ~getItemsLength() > 1}} 
     <div class="btn-group" data-binding="shortid">
-        <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
-        <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+        <button class="btn btn-warning btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-warning btn-xs dropdown-toggle" data-toggle="dropdown">
             <span class="caret"></span>
         </button>
-        <ul class="dropdown-menu" role="menu">
+        <ul class="dropdown-menu pull-right" role="menu">
             {{for ~getItems()}}
             <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
             {{/for}}
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index 3d02aa0c5904ef20d66c6badaeec9305082a41c5..276e9f3ef1dbf11389b6e6c6018acaa9ff753986 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,6 +1,5 @@
-﻿<div class="navbar-header sub-header">
+﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-      <p class="navbar-text"></p>
       <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 90fe59f928ee796f8d5abec9de3f4df857055073 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 13:27:30 +0100
Subject: [PATCH] fix package.json

---
 extension/scripts/public/js/main.js | 306 +++++++++++++++++++++++++++++++++++-
 1 file changed, 301 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..2f0a09959dc0f0808eb26a5ed689c4786e0aefc6 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,304 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function () {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });
+            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+            
+            this.contentCodeMirror.refresh();
+        },
+   });
+});
+
+
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+             if (model.get("script") == null)
+                model.set("script", new $entity.Script());
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            
+            var self = this;
+            
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("scriptId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 32d13d407ada7a1af0cbb7f0221587f2d26b57d7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 8 Mar 2014 16:56:31 +0100
Subject: [PATCH] finishing standalone extension architecture

---
 extension/scripts/public/js/main.js   | 306 +---------------------------------
 extension/scripts/test/scriptsTest.js |   3 +-
 2 files changed, 7 insertions(+), 302 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 2f0a09959dc0f0808eb26a5ed689c4786e0aefc6..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,304 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function () {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function () {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });
-            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-            
-            this.contentCodeMirror.refresh();
-        },
-   });
-});
-
-
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-             if (model.get("script") == null)
-                model.set("script", new $entity.Script());
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            
-            var self = this;
-            
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("scriptId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 3e807f9242d5233f77aff5e264b9d6eb417b3c7d..c2bf82afd70eecc97c21ae3faa63406790140143 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -1,9 +1,10 @@
 ﻿var assert = require("assert"),
+    path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting,
     Q = require("q");
 
 
-describeReporting(["scripts"], function (reporter) {
+describeReporting(path.join(__dirname, "../../"), ["scripts"], function (reporter) {
 
     describe('scripts', function () {
         

From cbe0fd9a3fff1fe2d2e8d888b1fbcc76322d7532 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 9 Mar 2014 15:06:05 +0100
Subject: [PATCH] validate leaving the page for unsaved changes

---
 extension/scripts/public/js/scripts.detail.view.js | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 287b5bf0a21292921aab6300881962cf7293ba0f..d9f026e404cc134b7206e11d35a2175c32062dfe 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -2,14 +2,14 @@
     return ViewBase.extend({
         template: "scripts-detail",
 
-        initialize: function () {
+        initialize: function() {
             this.listenTo(this.model, "sync", this.render);
         },
 
-        onDomRefresh: function () {
+        onDomRefresh: function() {
 
             var top = $("#contentWrap").position().top;
-            
+
             this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
                 mode: "javascript",
                 height: "350px",
@@ -17,17 +17,19 @@
                 lineWrapping: true,
                 viewportMargin: Infinity,
                 iframeClass: 'CodeMirror'
-            });
-            
+            });            
             
             
             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
+
             $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
             $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-            
+
             this.contentCodeMirror.refresh();
         },
-   });
-});
 
+        validateLeaving: function() {
+            return !this.model.hasChanged();
+        },
+    });
+});
\ No newline at end of file

From 06b5c573d0584cdf31a62eea6f895db3f67d038b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 11 Mar 2014 09:34:49 +0100
Subject: [PATCH] bug fixing

---
 .../scripts/public/js/scripts.template.playground.view.js   |  6 +++---
 .../scripts/public/js/scripts.template.standard.model.js    | 13 ++++++-------
 .../scripts/public/js/scripts.template.standard.view.js     |  4 ++++
 3 files changed, 13 insertions(+), 10 deletions(-)

diff --git a/extension/scripts/public/js/scripts.template.playground.view.js b/extension/scripts/public/js/scripts.template.playground.view.js
index 91e28b89d4dda5dceb770818063eb22b17077233..f015a842874b92b5f9ee49a99caac65a6e681780 100644
--- a/extension/scripts/public/js/scripts.template.playground.view.js
+++ b/extension/scripts/public/js/scripts.template.playground.view.js
@@ -10,9 +10,9 @@
         
         setTemplateModel: function (model) {
             this.templateModel = model;
-            
-             if (model.get("script") == null)
-                model.set("script", new $entity.Script());
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
         },
         
         events: {
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 3fa2af2c02d6bac2b0ebeff71b81a970b60abf9b..c08c53433daf540c0d8240466b203ae382722cb3 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -21,14 +21,13 @@
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
-            
-            var self = this;
-            
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("scriptId", self.get("shortid"));
-            });
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
         },
-
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
         initialize: function () {
             var self = this;
             this.listenTo(this, "change:shortid", function() {
diff --git a/extension/scripts/public/js/scripts.template.standard.view.js b/extension/scripts/public/js/scripts.template.standard.view.js
index b72e746414d997dbaa389e73c47e9cc61ea5a95d..291a9d900ec692754f1e716e022eed1bf1cc1a2d 100644
--- a/extension/scripts/public/js/scripts.template.standard.view.js
+++ b/extension/scripts/public/js/scripts.template.standard.view.js
@@ -18,5 +18,9 @@
         getItemsLength: function () {
             return this.model.items.length;
         },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
     });
 });
\ No newline at end of file

From 511c4819c5144ff09e654d4fa8490fe5538dd6dc Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Mar 2014 16:09:46 +0100
Subject: [PATCH] embeddable feature

---
 extension/scripts/public/js/main.js | 310 +++++++++++++++++++++++++++++++++++-
 1 file changed, 305 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..69d369a7cdc544889f016ac012574b0ab9988af4 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,308 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChanged();
+        },
+    });
+});
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 78cb903fed286329612d9b20e8972234265cfb09 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Mar 2014 14:54:14 +0100
Subject: [PATCH] gists extension, moving certificates

---
 extension/scripts/public/js/main.js | 310 +-----------------------------------
 1 file changed, 5 insertions(+), 305 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 69d369a7cdc544889f016ac012574b0ab9988af4..01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,308 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChanged();
-        },
-    });
-});
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 45675e9cdfc005410a964f0227362a4ff57995f5 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 14 Mar 2014 12:56:52 +0100
Subject: [PATCH] fixing bugs

---
 extension/scripts/public/js/main.js                | 2 +-
 extension/scripts/public/js/main_dev.js            | 2 +-
 extension/scripts/public/js/scripts.detail.view.js | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -60,7 +60,7 @@
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a id='createScriptLink' href='/#/extension/scripts/detail'>Create Script</a></li>";
+                    context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
                 });
             }
 
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 01515b8d3bb869c5a6ff7a809b6e0386af0dc1e3..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -60,7 +60,7 @@
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a id='createScriptLink' href='/#/extension/scripts/detail'>Create Script</a></li>";
+                    context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
                 });
             }
 
diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index d9f026e404cc134b7206e11d35a2175c32062dfe..7b7d92bd93339244a2a64244d1718d85aef0bbe2 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -29,7 +29,7 @@
         },
 
         validateLeaving: function() {
-            return !this.model.hasChanged();
+            return !this.model.hasChangesSyncLastSync();
         },
     });
 });
\ No newline at end of file

From 7d96b6e81ad252c98acb5a4d1b873663ad06ebbd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Mar 2014 21:17:10 +0100
Subject: [PATCH] better compiling js files for production

---
 extension/scripts/public/js/main.js | 310 +++++++++++++++++++++++++++++++++++-
 1 file changed, 305 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..5b29d851ed2a6d98aea3f096f63ac5bc9fd66302 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,308 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 671545e726ad7779b61370a64c318fad9d529069 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 19 Mar 2014 23:06:55 +0100
Subject: [PATCH] killing rendering child process when the work is done
 changing multitenant mongo architecture - collection
 prefixing

---
 extension/scripts/public/js/main.js | 310 +-----------------------------------
 1 file changed, 5 insertions(+), 305 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 5b29d851ed2a6d98aea3f096f63ac5bc9fd66302..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,308 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 3adcd1d4a89963bad937a1510d21f698e10f348f Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Mar 2014 11:12:23 +0100
Subject: [PATCH] images base64

---
 extension/scripts/public/js/scripts.template.playground.dialog.js | 4 ++++
 extension/scripts/public/templates/scripts-dialog.html            | 4 ++--
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/public/js/scripts.template.playground.dialog.js b/extension/scripts/public/js/scripts.template.playground.dialog.js
index 352680c7490f4cea571e975b1083b34875f11d56..17d3f2d4df9ea3e8d160c724bd7888e10ec690b8 100644
--- a/extension/scripts/public/js/scripts.template.playground.dialog.js
+++ b/extension/scripts/public/js/scripts.template.playground.dialog.js
@@ -13,6 +13,10 @@
                 lineNumbers: true,
             });
             codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
         },
         
         save: function () {
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
index 6a89ba2aa9ac4c6afe7255278330f24935f30825..ebebe2ad0db7339682fec5ff18309b5963adcb0f 100644
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -4,8 +4,8 @@
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
             <h4 class="modal-title">Script</h4>
         </div>
-        <div class="modal-body">
-               <textarea id="contentArea">{{:content}}</textarea>
+        <div class="modal-body fs">
+               <textarea id="contentArea" class="full-content-without-menu">{{:content}}</textarea>
         </div>
         <div class="modal-footer">            
             <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Upload</button>

From a2acc4640eb73216bbae6aa401a88432c1fbab64 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 28 Mar 2014 16:34:09 +0100
Subject: [PATCH] nedb support and cluster

---
 extension/scripts/public/js/main.js | 314 +++++++++++++++++++++++++++++++++++-
 1 file changed, 309 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..1fb83d25a4cb920b76d2af17280e0b47e370539f 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,312 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 8f37e5cd1e0e90b483b3319014b50a68d87b4370 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 13:35:33 +0200
Subject: [PATCH] nedb support

---
 extension/scripts/public/js/main.js | 314 +-----------------------------------
 1 file changed, 5 insertions(+), 309 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 1fb83d25a4cb920b76d2af17280e0b47e370539f..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,312 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        defaults: {
-            name: "script name"    
-        },
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            
-            this.contentCodeMirror.refresh();
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From fb40a24f481b540a249f14f7c3178ffff762bcc4 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 16:09:56 +0200
Subject: [PATCH] fixing fonts link to local, nedb improvments

---
 extension/scripts/lib/scripts.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index b83485e367acff171e0d91381e311396023bd9cb..b489d61c3435df7c51040c53653b65e5df619a1c 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -130,6 +130,6 @@ Scripts.prototype._beforeUpdateHandler = function(args, entity) {
 
 function createEntitySetDefinitions(entitySets) {
     if (!this.reporter.playgroundMode) {
-        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType };
+        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: ["name", "shortid"] }  };
     }
 };
\ No newline at end of file

From 1e5b9bec60279914a0785a7e6330226fbb478010 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 20:15:37 +0200
Subject: [PATCH] hotkeys for saving

---
 extension/scripts/lib/scripts.js                         |  2 +-
 extension/scripts/public/js/scripts.toolbar.view.js      | 16 ++++++++++++++++
 .../scripts/public/templates/scripts-list-toolbar.html   |  1 +
 3 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index b489d61c3435df7c51040c53653b65e5df619a1c..2bd696f9d95f94b5819d93134f5f700a03a2ba00 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -130,6 +130,6 @@ Scripts.prototype._beforeUpdateHandler = function(args, entity) {
 
 function createEntitySetDefinitions(entitySets) {
     if (!this.reporter.playgroundMode) {
-        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: ["name", "shortid"] }  };
+        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
     }
 };
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index 75e4a6fdf11a5db49fd95acae856fb35de1ac877..c8f118bc8e9c7711428e05886239ea0c35458444 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -3,6 +3,10 @@
         return LayoutBase.extend({
             template: "scripts-toolbar",
 
+            initialize: function() {
+                $(document).on('keydown', this.hotkey.bind(this));
+            },
+
             events: {
                 "click #saveCommand": "save",
             },
@@ -19,5 +23,17 @@
             onDomRefresh: function() {
                 var self = this;
             },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onClose: function() {
+                $(document).off("keydown", this.hotkey);
+            }
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
index ff4dbefd3233c79002b73749195df391ff541b86..e3e22bd84a50fcc73f3e47407ae61e830ad608dc 100644
--- a/extension/scripts/public/templates/scripts-list-toolbar.html
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -1,5 +1,6 @@
 ﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
+        <li><a href="/#/extension/scripts/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 

From 5c304966298895d21c2c0249df859c9984496a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 20:40:28 +0200
Subject: [PATCH] added mkdirp to dependencies

---
 extension/scripts/public/js/main.js | 330 +++++++++++++++++++++++++++++++++++-
 1 file changed, 325 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..c10630e028ac7c4922511e8158167f9e6d3de332 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,328 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        defaults: {
+            name: "script name"    
+        },
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true,
+                viewportMargin: Infinity,
+                iframeClass: 'CodeMirror'
+            });            
+            
+            
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({
+                success: function () {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").dataJson = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onClose: function() {
+                $(document).off("keydown", this.hotkey);
+            }
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 7720df20c96f6821f3a59f2b2dd1db8debff2b46 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 21 Apr 2014 09:24:58 +0200
Subject: [PATCH] support for page orientation and page size in phantom

---
 extension/scripts/public/js/main.js                 | 19 +++++++++++++++----
 extension/scripts/public/js/scripts.model.js        |  4 ----
 extension/scripts/public/js/scripts.toolbar.view.js | 15 +++++++++++++++
 3 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index c10630e028ac7c4922511e8158167f9e6d3de332..af4ffa32cc38f376caa22d9160a8272ae3ff034f 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -7,10 +7,6 @@ define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, Mo
             return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
         },    
         
-        defaults: {
-            name: "script name"    
-        },
-        
         setTemplateModel: function(templateModel) {
             this.templateModel = templateModel;
         },
@@ -293,6 +289,9 @@ define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
             },
 
             save: function() {
+                if (!this.validate())
+                    return;
+                
                 var self = this;
                 this.model.save({}, {
                     success: function() {
@@ -312,6 +311,18 @@ define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
                     return false;
                 }
             },
+            
+            onValidate: function() {
+                var res = [];
+                
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+                 
+
+                return res;
+            },
 
             onClose: function() {
                 $(document).off("keydown", this.hotkey);
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index a05fd80ca3fed63c60f2e4926e21d28a328b7ef5..bb40e732b047b4baf466d46ed2c779588237483a 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -6,10 +6,6 @@
             return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
         },    
         
-        defaults: {
-            name: "script name"    
-        },
-        
         setTemplateModel: function(templateModel) {
             this.templateModel = templateModel;
         },
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index c8f118bc8e9c7711428e05886239ea0c35458444..c2631c1ec37dc201b66b2084125f98941ac299f1 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -12,6 +12,9 @@
             },
 
             save: function() {
+                if (!this.validate())
+                    return;
+                
                 var self = this;
                 this.model.save({}, {
                     success: function() {
@@ -31,6 +34,18 @@
                     return false;
                 }
             },
+            
+            onValidate: function() {
+                var res = [];
+                
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+                 
+
+                return res;
+            },
 
             onClose: function() {
                 $(document).off("keydown", this.hotkey);

From 6e7349912b9189c53f0e8c754ed4e212eb9ee121 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 25 Apr 2014 11:22:51 +0200
Subject: [PATCH] using node client session instead of express

---
 extension/scripts/public/js/main.js | 341 +-----------------------------------
 1 file changed, 5 insertions(+), 336 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index af4ffa32cc38f376caa22d9160a8272ae3ff034f..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,339 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });            
-            
-            
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('scripts.template.playground.dialog',["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            
-            this.contentCodeMirror.refresh();
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({
-                success: function () {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-                
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-            
-            onValidate: function() {
-                var res = [];
-                
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-                 
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off("keydown", this.hotkey);
-            }
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From 6c289c773d58de4341c5be83806ae51ceaf4bbab Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 8 May 2014 14:38:51 +0200
Subject: [PATCH] replace code mirror with ace

---
 extension/scripts/public/js/scripts.detail.view.js | 27 ++++++++----------
 .../scripts/public/js/scripts.list.toolbar.view.js |  4 +--
 .../js/scripts.template.playground.dialog.js       | 33 ++++++++++++----------
 .../public/js/scripts.template.playground.model.js |  2 +-
 .../scripts/public/templates/scripts-detail.html   |  2 +-
 .../scripts/public/templates/scripts-dialog.html   |  4 +--
 6 files changed, 35 insertions(+), 37 deletions(-)

diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 7b7d92bd93339244a2a64244d1718d85aef0bbe2..1a312eac3e4f9c19cb867cd7e7f35ea60297b784 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -1,4 +1,4 @@
-﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+﻿define(["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
     return ViewBase.extend({
         template: "scripts-detail",
 
@@ -9,23 +9,18 @@
         onDomRefresh: function() {
 
             var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true,
-                viewportMargin: Infinity,
-                iframeClass: 'CodeMirror'
-            });            
             
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/javascript");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+                
+            aceBinder(this.model, "content", this.contentEditor);
             
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
+            $("#contentArea").css("margin-top", top);
         },
 
         validateLeaving: function() {
diff --git a/extension/scripts/public/js/scripts.list.toolbar.view.js b/extension/scripts/public/js/scripts.list.toolbar.view.js
index 591fc703619edb77df5af4b62f5bc6e24c05b7ea..d37f0c4cc584ab75be177ad8fa616dd3938b7e6b 100644
--- a/extension/scripts/public/js/scripts.list.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.list.toolbar.view.js
@@ -1,5 +1,5 @@
-﻿define(["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function($, app, CodeMirror, Utils, LayoutBase) {
+﻿define(["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function($, app, Utils, LayoutBase) {
         return LayoutBase.extend({
             template: "scripts-list-toolbar",
 
diff --git a/extension/scripts/public/js/scripts.template.playground.dialog.js b/extension/scripts/public/js/scripts.template.playground.dialog.js
index 17d3f2d4df9ea3e8d160c724bd7888e10ec690b8..a14c0cf02ab33ba240fdb18cb2a514702d24d293 100644
--- a/extension/scripts/public/js/scripts.template.playground.dialog.js
+++ b/extension/scripts/public/js/scripts.template.playground.dialog.js
@@ -1,28 +1,31 @@
-﻿define(["marionette", "app", "codemirror", "core/codeMirrorBinder", "core/view.base"], function (Marionette, app, Codemirror, codeMirrorBinder, ViewBase) {
+﻿define(["marionette", "app", "core/aceBinder", "core/view.base"], function(Marionette, app, aceBinder, ViewBase) {
     return ViewBase.extend({
         template: "scripts-dialog",
-        
+
         events: {
             "click #saveCommand": "save",
         },
         
-        onDomRefresh: function () {
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+
+        onDomRefresh: function() {
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/javascript");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
             });
-            codeMirrorBinder(this.model, "content", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            
-            this.contentCodeMirror.refresh();
+
+            aceBinder(this.model, "content", this.contentEditor);
         },
-        
-        save: function () {
+
+        save: function() {
             var self = this;
             this.model.save({
-                success: function () {
+                success: function() {
                     self.trigger("dialog-close");
                 }
             });
diff --git a/extension/scripts/public/js/scripts.template.playground.model.js b/extension/scripts/public/js/scripts.template.playground.model.js
index cbd0cfba346f9647b969b5fa3c63b81ef76b3477..b2fa64e2010e3516e25d0e7cd81cf97731befbdd 100644
--- a/extension/scripts/public/js/scripts.template.playground.model.js
+++ b/extension/scripts/public/js/scripts.template.playground.model.js
@@ -7,7 +7,7 @@
         },
         
         save: function (options) {
-            this.templateModel.get("script").dataJson = this.get("content");
+            this.templateModel.get("script").content = this.get("content");
             return options.success();
         },
     });
diff --git a/extension/scripts/public/templates/scripts-detail.html b/extension/scripts/public/templates/scripts-detail.html
index 3505dfc35c47eba3469c771e36eb37684a129654..a3df03a00a2bc7da1a28fd97ab5ed441bec0db81 100644
--- a/extension/scripts/public/templates/scripts-detail.html
+++ b/extension/scripts/public/templates/scripts-detail.html
@@ -3,5 +3,5 @@
 </div>
 
 <div id="contentWrap">
-    <textarea id="contentArea" class="full-content">{{:content}}</textarea>
+    <div id="contentArea" class="full-content">{{:content}}</div>
 </div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
index ebebe2ad0db7339682fec5ff18309b5963adcb0f..a3f7b41142bf63cf8096ad8a85236ba87d60ee0d 100644
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -5,10 +5,10 @@
             <h4 class="modal-title">Script</h4>
         </div>
         <div class="modal-body fs">
-               <textarea id="contentArea" class="full-content-without-menu">{{:content}}</textarea>
+               <div id="contentArea" class="full-content-without-menu">{{:content}}</div>
         </div>
         <div class="modal-footer">            
-            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Upload</button>
+            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Save</button>
         </div>
     </div>
 </div>

From f4b7b2200a95d0301d9c742a744780190c71c3a7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 9 May 2014 23:22:48 +0200
Subject: [PATCH] samples, examples, bug fixing

---
 extension/scripts/public/js/scripts.toolbar.view.js               | 4 ++--
 extension/scripts/public/templates/scripts-template-standard.html | 2 +-
 extension/scripts/public/templates/scripts-toolbar.html           | 5 ++++-
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index c2631c1ec37dc201b66b2084125f98941ac299f1..65479c09c0866d1626c47db3b38a8bf45e9287ee 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -4,7 +4,7 @@
             template: "scripts-toolbar",
 
             initialize: function() {
-                $(document).on('keydown', this.hotkey.bind(this));
+                $(document).on('keydown.script-detail', this.hotkey.bind(this));
             },
 
             events: {
@@ -48,7 +48,7 @@
             },
 
             onClose: function() {
-                $(document).off("keydown", this.hotkey);
+                $(document).off(".script-detail");
             }
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-template-standard.html b/extension/scripts/public/templates/scripts-template-standard.html
index 95b9ff1d22fefdb596258c0a88ca2b7920e0e504..1620fa9a6b19178d7e151776e158cbee6c60499d 100644
--- a/extension/scripts/public/templates/scripts-template-standard.html
+++ b/extension/scripts/public/templates/scripts-template-standard.html
@@ -14,6 +14,6 @@
         </ul>
     </div>
     {{else}}
-    <a class="btn btn-primary" href="/#/extension/scripts/detail">Create script</a>
+    <a class="btn btn-primary btn-xs" href="/#/extension/scripts/detail">Create script</a>
     {{/if}}
 </div>
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index 276e9f3ef1dbf11389b6e6c6018acaa9ff753986..a14cd744fed698debb3c60456275ee60fbf4d32c 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,5 +1,8 @@
 ﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-      <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
+        <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
+    </ul>
+    <ul class="nav navbar-nav sub-header pull-right">
+        <li><a target="_blank" href="http://jsreport.net/learn/scripts"><i class="fa fa-lightbulb-o"></i>Help</a></li>
     </ul>
 </div>
\ No newline at end of file

From 19933b57d13f33dd74b8e146a2f73b6834b79792 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 15:01:45 +0200
Subject: [PATCH] release 0.1.0

---
 extension/scripts/public/js/main.js | 339 +++++++++++++++++++++++++++++++++++-
 1 file changed, 334 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..5790890001e8cc84a964343c95ecf1d85d9f0350 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,8 +1,337 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
+
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/javascript");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+                
+            aceBinder(this.model, "content", this.contentEditor);
+            
+            $("#contentArea").css("margin-top", top);
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('scripts.template.playground.dialog',["marionette", "app", "core/aceBinder", "core/view.base"], function(Marionette, app, aceBinder, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-dialog",
+
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+
+        onDomRefresh: function() {
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/javascript");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+
+            aceBinder(this.model, "content", this.contentEditor);
+        },
+
+        save: function() {
+            var self = this;
+            this.model.save({
+                success: function() {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+    return ModelBase.extend({
+       
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("content", templateModel.get("script").content);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("script").content = this.get("content");
+            return options.success();
+        },
+    });
+});
+
+
+define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-playground",
+        
+        initialize: function () {
+            var self = this;
+            _.bindAll(this, "isFilled");
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("script") == null)
+                model.attributes["script"] = new $entity.Script();
+        },
+        
+        events: {
+            "click #scriptCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
+        },
+        
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({
+                model: model
+            });
+            self.listenTo(dialog, "dialog-close", function () {
+                self.render();
+                self.templateModel.save();
+            });
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown.script-detail', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                if (!this.validate())
+                    return;
+                
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+            
+            onValidate: function() {
+                var res = [];
+                
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+                 
+
+                return res;
+            },
+
+            onClose: function() {
+                $(document).off(".script-detail");
+            }
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.detail.view",
+        "scripts.template.playground.view", "scripts.template.standard.view", 
+        "scripts.template.standard.model", "scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From aca40a53639832f260704bbdd28c8b3e8316d97c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 22:56:14 +0200
Subject: [PATCH] fixed logging and google analytics

---
 extension/scripts/public/js/main.js | 339 +-----------------------------------
 1 file changed, 5 insertions(+), 334 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 5790890001e8cc84a964343c95ecf1d85d9f0350..fe144a14c3a9238d5305ec800ccdffec956f9af2 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,337 +1,8 @@
-
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/javascript");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-                
-            aceBinder(this.model, "content", this.contentEditor);
-            
-            $("#contentArea").css("margin-top", top);
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('scripts.template.playground.dialog',["marionette", "app", "core/aceBinder", "core/view.base"], function(Marionette, app, aceBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-
-        onDomRefresh: function() {
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/javascript");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-
-            aceBinder(this.model, "content", this.contentEditor);
-        },
-
-        save: function() {
-            var self = this;
-            this.model.save({
-                success: function() {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").content = this.get("content");
-            return options.success();
-        },
-    });
-});
-
-
-define('scripts.template.playground.view',["marionette", "app", "scripts.template.playground.dialog", "scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("scriptId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown.script-detail', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-                
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-            
-            onValidate: function() {
-                var res = [];
-                
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-                 
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off(".script-detail");
-            }
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.detail.view",
-        "scripts.template.playground.view", "scripts.template.standard.view", 
-        "scripts.template.standard.model", "scripts.toolbar.view"],
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.detail.view",
+        "./scripts.template.playground.view", "./scripts.template.standard.view", 
+        "./scripts.template.standard.model", "./scripts.toolbar.view"],
     function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
         StandardTemplateView, StandardTemplateModel, ToolbarView) {
 

From a60e845cf78ed3cd1c0b3f6063ff054f4e567610 Mon Sep 17 00:00:00 2001
From: kanalnik <sladek69@seznam.cz>
Date: Sun, 11 May 2014 12:56:13 +0200
Subject: [PATCH] added help button

---
 extension/scripts/public/templates/scripts-dialog.html | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
index a3f7b41142bf63cf8096ad8a85236ba87d60ee0d..d33159a7c857abdb321a93437249f6dd974cb6c2 100644
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ b/extension/scripts/public/templates/scripts-dialog.html
@@ -7,7 +7,8 @@
         <div class="modal-body fs">
                <div id="contentArea" class="full-content-without-menu">{{:content}}</div>
         </div>
-        <div class="modal-footer">            
+        <div class="modal-footer">
+            <a target="_blank" class="btn" href="http://jsreport.net/learn/scripts"><i class="fa fa-lightbulb-o"></i>Help</a>            
             <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Save</button>
         </div>
     </div>

From 2d94bd97f76bde4fb2467af718cb8441c35fadb3 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 29 May 2014 14:30:03 +0200
Subject: [PATCH] some refactoring

---
 extension/scripts/lib/scripts.js | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 2bd696f9d95f94b5819d93134f5f700a03a2ba00..8329f58fec68e3979c71126f926474aa527528b7 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -7,7 +7,6 @@
 var shortid = require("shortid"),
     winston = require("winston"),
     fork = require('child_process').fork,
-    sformat = require("stringformat"),
     _ = require("underscore"),
     join = require("path").join,
     Q = require("q");
@@ -27,7 +26,7 @@ Scripts = function (reporter, definition) {
         creationDate: { type: "date" },
         modificationDate: { type: "date" },
         content: { type: "string" },
-        name: { type: "string" },
+        name: { type: "string" }
     }, null);
 
     if (this.reporter.playgroundMode) {
@@ -63,7 +62,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
         return request.context.scripts.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
-    };
+    }
 
     return FindScript().then(function(script) {
 
@@ -96,7 +95,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                     data: request.data,
                     template: {
                         content: request.template.content,
-                        helpers: request.template.helpers,
+                        helpers: request.template.helpers
                     }
                 },
                 response: response
@@ -132,4 +131,4 @@ function createEntitySetDefinitions(entitySets) {
     if (!this.reporter.playgroundMode) {
         entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
     }
-};
\ No newline at end of file
+}
\ No newline at end of file

From 390e74f1511d53ad3464dbba7ec40bfc8b2ca9c9 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 9 Jun 2014 14:42:18 +0200
Subject: [PATCH] refactoring - splitting online, playground and core
 repository

---
 extension/scripts/.gitignore                       |  2 +
 extension/scripts/lib/scripts.js                   | 48 +++++++------
 extension/scripts/public/js/main.js                | 79 +++++++++-------------
 extension/scripts/public/js/main_dev.js            | 79 +++++++++-------------
 .../js/scripts.template.playground.dialog.js       | 34 ----------
 .../public/js/scripts.template.playground.model.js | 15 ----
 .../public/js/scripts.template.playground.view.js  | 40 -----------
 .../scripts/public/templates/scripts-dialog.html   | 16 -----
 .../templates/scripts-template-playground.html     |  4 --
 9 files changed, 91 insertions(+), 226 deletions(-)

diff --git a/extension/scripts/.gitignore b/extension/scripts/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..7b014069d24cdc005fd0c90b91e6c43bbbd691f8
--- /dev/null
+++ b/extension/scripts/.gitignore
@@ -0,0 +1,2 @@
+public/js/main_dev.js
+public/js/main_built.js
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 8329f58fec68e3979c71126f926474aa527528b7..c76167e1ab7a46b41a8589a154506b2821f07102 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -2,7 +2,7 @@
  * Copyright(c) 2014 Jan Blaha 
  *
  * Extension allowing to run custom scripts and modify request before rendering process starts.
- */ 
+ */
 
 var shortid = require("shortid"),
     winston = require("winston"),
@@ -20,7 +20,7 @@ module.exports = function (reporter, definition) {
 Scripts = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
-    
+
     this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
         shortid: { type: "string"},
         creationDate: { type: "date" },
@@ -29,24 +29,22 @@ Scripts = function (reporter, definition) {
         name: { type: "string" }
     }, null);
 
-    if (this.reporter.playgroundMode) {
-        reporter.templates.TemplateType.addMember("script", { type: this.ScriptType });
-    } else {
-        this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-        reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
-    }
-    
+    this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
+    reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
+
     this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
     this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
-    
+
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
 
-Scripts.prototype.create = function(context, script) {
+Scripts.prototype.create = function (context, script) {
     var entity = new this.ScriptType(script);
     context.scripts.add(entity);
-    return context.scripts.saveChanges().then(function() { return Q(entity); });
+    return context.scripts.saveChanges().then(function () {
+        return Q(entity);
+    });
 };
 
 Scripts.prototype.handleBeforeRender = function (request, response) {
@@ -58,21 +56,23 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     function FindScript() {
         if (request.template.script != null && request.template.script != "")
             return Q(request.template.script);
-        
+
         logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
-        return request.context.scripts.single(function(s) { return s.shortid == this.id; }, { id: request.template.scriptId });
+        return request.context.scripts.single(function (s) {
+            return s.shortid == this.id;
+        }, { id: request.template.scriptId });
     }
 
-    return FindScript().then(function(script) {
+    return FindScript().then(function (script) {
 
         script = script.content || script;
         var child = fork(join(__dirname, "scriptEvalChild.js"));
         var isDone = false;
 
-        return Q.nfcall(function(cb) {
+        return Q.nfcall(function (cb) {
 
-            child.on('message', function(m) {
+            child.on('message', function (m) {
                 isDone = true;
                 if (m.error) {
                     logger.error("Child process process resulted in error " + JSON.stringify(m.error));
@@ -103,7 +103,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 
             logger.info("Child process started.");
 
-            setTimeout(function() {
+            setTimeout(function () {
                 if (isDone)
                     return;
 
@@ -115,20 +115,18 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     });
 };
 
-Scripts.prototype._beforeCreateHandler = function(args, entity) {
-     if (entity.shortid == null)
+Scripts.prototype._beforeCreateHandler = function (args, entity) {
+    if (entity.shortid == null)
         entity.shortid = shortid.generate();
-    
+
     entity.creationDate = new Date();
     entity.modificationDate = new Date();
 };
 
-Scripts.prototype._beforeUpdateHandler = function(args, entity) {
+Scripts.prototype._beforeUpdateHandler = function (args, entity) {
     entity.modificationDate = new Date();
 };
 
 function createEntitySetDefinitions(entitySets) {
-    if (!this.reporter.playgroundMode) {
-        entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
-    }
+    entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
 }
\ No newline at end of file
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..60c4eec81f324812b2d86fc33fbdc73121416482 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,16 +1,15 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
-        StandardTemplateView, StandardTemplateModel, ToolbarView) {
+        "./scripts.model", "./scripts.template.standard.view",
+        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
+    function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
+              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
 
-        app.module("scripts", function(module) {
+        app.module("scripts", function (module) {
 
             var Router = Backbone.Router.extend({
-                initialize: function() {
-                    app.listenTo(app, "script-saved", function(model) {
+                initialize: function () {
+                    app.listenTo(app, "script-saved", function (model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
                     });
                 },
@@ -18,10 +17,10 @@
                 routes: {
                     "extension/scripts/list": "scripts",
                     "extension/scripts/detail/:id": "scriptsDetail",
-                    "extension/scripts/detail": "scriptsDetail",
+                    "extension/scripts/detail": "scriptsDetail"
                 },
 
-                scripts: function() {
+                scripts: function () {
                     this.navigate("/extension/scripts/list");
 
                     var model = new ScriptsListModel();
@@ -32,7 +31,7 @@
                     model.fetch();
                 },
 
-                scriptsDetail: function(id) {
+                scriptsDetail: function (id) {
                     var model = new ScriptsModel();
 
                     app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
@@ -43,66 +42,54 @@
                     }
                 },
 
-                scriptsCreate: function() {
+                scriptsCreate: function () {
                     app.layout.dialog.show(new ScriptsCreateView({
                         model: new ScriptsModel()
                     }));
                 }
             });
 
-
             app.scripts.router = new Router();
 
-            if (!app.settings.playgroundMode) {
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
+            });
 
-                app.on("menu-render", function(context) {
-                    context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
-                });
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+            });
+
+            app.on("template-extensions-render", function (context) {
+                var model = new StandardTemplateModel();
+                model.setTemplate(context.template);
 
-                app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+                model.fetch({
+                    success: function () {
+                        var view = new StandardTemplateView({ model: model });
+                        context.extensionsRegion.show(view, "scripts");
+                    }
                 });
-            }
-
-            app.on("template-extensions-render", function(context) {
-                if (app.settings.playgroundMode) {
-                    var view = new PlaygroundTemplateView();
-                    view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view, "scripts");
-                } else {
-                    var model = new StandardTemplateModel();
-                    model.setTemplate(context.template);
-
-                    model.fetch({
-                        success: function() {
-                            var view = new StandardTemplateView({ model: model });
-                            context.extensionsRegion.show(view, "scripts");
-                        }
-                    });
-                }
             });
 
-            app.on("entity-registration", function(context) {
+            app.on("entity-registration", function (context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {
+                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
                     "modificationDate": { type: "date" },
+                    "scriptId": { type: "Edm.String"}
+
                 }, null);
 
-                $entity.Script.prototype.toString = function() {
+                $entity.Script.prototype.toString = function () {
                     return "Script " + (this.name || "");
                 };
 
-                if (app.settings.playgroundMode) {
-                    $entity.Template.addMember("script", { 'type': "$entity.Script" });
-                } else {
-                    $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-                    $entity.Script.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                    context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-                }
+                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index fe144a14c3a9238d5305ec800ccdffec956f9af2..60c4eec81f324812b2d86fc33fbdc73121416482 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -1,16 +1,15 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.detail.view",
-        "./scripts.template.playground.view", "./scripts.template.standard.view", 
-        "./scripts.template.standard.model", "./scripts.toolbar.view"],
-    function(app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView, ScriptsModel, ScriptsDetailView, PlaygroundTemplateView, 
-        StandardTemplateView, StandardTemplateModel, ToolbarView) {
+        "./scripts.model", "./scripts.template.standard.view",
+        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
+    function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
+              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
 
-        app.module("scripts", function(module) {
+        app.module("scripts", function (module) {
 
             var Router = Backbone.Router.extend({
-                initialize: function() {
-                    app.listenTo(app, "script-saved", function(model) {
+                initialize: function () {
+                    app.listenTo(app, "script-saved", function (model) {
                         window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
                     });
                 },
@@ -18,10 +17,10 @@
                 routes: {
                     "extension/scripts/list": "scripts",
                     "extension/scripts/detail/:id": "scriptsDetail",
-                    "extension/scripts/detail": "scriptsDetail",
+                    "extension/scripts/detail": "scriptsDetail"
                 },
 
-                scripts: function() {
+                scripts: function () {
                     this.navigate("/extension/scripts/list");
 
                     var model = new ScriptsListModel();
@@ -32,7 +31,7 @@
                     model.fetch();
                 },
 
-                scriptsDetail: function(id) {
+                scriptsDetail: function (id) {
                     var model = new ScriptsModel();
 
                     app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
@@ -43,66 +42,54 @@
                     }
                 },
 
-                scriptsCreate: function() {
+                scriptsCreate: function () {
                     app.layout.dialog.show(new ScriptsCreateView({
                         model: new ScriptsModel()
                     }));
                 }
             });
 
-
             app.scripts.router = new Router();
 
-            if (!app.settings.playgroundMode) {
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
+            });
 
-                app.on("menu-render", function(context) {
-                    context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
-                });
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+            });
+
+            app.on("template-extensions-render", function (context) {
+                var model = new StandardTemplateModel();
+                model.setTemplate(context.template);
 
-                app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+                model.fetch({
+                    success: function () {
+                        var view = new StandardTemplateView({ model: model });
+                        context.extensionsRegion.show(view, "scripts");
+                    }
                 });
-            }
-
-            app.on("template-extensions-render", function(context) {
-                if (app.settings.playgroundMode) {
-                    var view = new PlaygroundTemplateView();
-                    view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view, "scripts");
-                } else {
-                    var model = new StandardTemplateModel();
-                    model.setTemplate(context.template);
-
-                    model.fetch({
-                        success: function() {
-                            var view = new StandardTemplateView({ model: model });
-                            context.extensionsRegion.show(view, "scripts");
-                        }
-                    });
-                }
             });
 
-            app.on("entity-registration", function(context) {
+            app.on("entity-registration", function (context) {
 
                 $data.Class.define("$entity.Script", $data.Entity, null, {
+                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
                     'content': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
                     "modificationDate": { type: "date" },
+                    "scriptId": { type: "Edm.String"}
+
                 }, null);
 
-                $entity.Script.prototype.toString = function() {
+                $entity.Script.prototype.toString = function () {
                     return "Script " + (this.name || "");
                 };
 
-                if (app.settings.playgroundMode) {
-                    $entity.Template.addMember("script", { 'type': "$entity.Script" });
-                } else {
-                    $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-                    $entity.Script.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                    context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-                }
+                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.playground.dialog.js b/extension/scripts/public/js/scripts.template.playground.dialog.js
deleted file mode 100644
index a14c0cf02ab33ba240fdb18cb2a514702d24d293..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.template.playground.dialog.js
+++ /dev/null
@@ -1,34 +0,0 @@
-﻿define(["marionette", "app", "core/aceBinder", "core/view.base"], function(Marionette, app, aceBinder, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-dialog",
-
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-
-        onDomRefresh: function() {
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/javascript");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-
-            aceBinder(this.model, "content", this.contentEditor);
-        },
-
-        save: function() {
-            var self = this;
-            this.model.save({
-                success: function() {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.playground.model.js b/extension/scripts/public/js/scripts.template.playground.model.js
deleted file mode 100644
index b2fa64e2010e3516e25d0e7cd81cf97731befbdd..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.template.playground.model.js
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-    return ModelBase.extend({
-       
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("content", templateModel.get("script").content);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("script").content = this.get("content");
-            return options.success();
-        },
-    });
-});
-
diff --git a/extension/scripts/public/js/scripts.template.playground.view.js b/extension/scripts/public/js/scripts.template.playground.view.js
deleted file mode 100644
index f015a842874b92b5f9ee49a99caac65a6e681780..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.template.playground.view.js
+++ /dev/null
@@ -1,40 +0,0 @@
-﻿define(["marionette", "app", "./scripts.template.playground.dialog", "./scripts.template.playground.model", "core/view.base"], function (Marionette, app, DialogView, Model, ViewBase) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-playground",
-        
-        initialize: function () {
-            var self = this;
-            _.bindAll(this, "isFilled");
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("script") == null)
-                model.attributes["script"] = new $entity.Script();
-        },
-        
-        events: {
-            "click #scriptCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-             return (this.templateModel.get("script") != null) && (this.templateModel.get("script").content != null);
-        },
-        
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({
-                model: model
-            });
-            self.listenTo(dialog, "dialog-close", function () {
-                self.render();
-                self.templateModel.save();
-            });
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/scripts/public/templates/scripts-dialog.html b/extension/scripts/public/templates/scripts-dialog.html
deleted file mode 100644
index d33159a7c857abdb321a93437249f6dd974cb6c2..0000000000000000000000000000000000000000
--- a/extension/scripts/public/templates/scripts-dialog.html
+++ /dev/null
@@ -1,16 +0,0 @@
-﻿<div class="modal-dialog fs">
-    <div class="modal-content">
-        <div class="modal-header">
-            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title">Script</h4>
-        </div>
-        <div class="modal-body fs">
-               <div id="contentArea" class="full-content-without-menu">{{:content}}</div>
-        </div>
-        <div class="modal-footer">
-            <a target="_blank" class="btn" href="http://jsreport.net/learn/scripts"><i class="fa fa-lightbulb-o"></i>Help</a>            
-            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Save</button>
-        </div>
-    </div>
-</div>
-
diff --git a/extension/scripts/public/templates/scripts-template-playground.html b/extension/scripts/public/templates/scripts-template-playground.html
deleted file mode 100644
index fd782b8e2fe6656eb4c9385dfd74eb21ec299f85..0000000000000000000000000000000000000000
--- a/extension/scripts/public/templates/scripts-template-playground.html
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-tower"></i>Scripts<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
-<div class="expandable-body properties" style="display: none">
-    <button class="btn btn-xs btn-warning" id="scriptCommand">Script Upload</button>
-</div>

From 8086ccd1622ca49790dab310d2ed17a35489206e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 10 Jun 2014 19:35:12 +0200
Subject: [PATCH] refactoring - introducig dataProvider and abstracting out
 jaydata from extensions

---
 extension/scripts/lib/scriptEvalChild.js |  2 +-
 extension/scripts/lib/scripts.js         | 58 +++++++++++++++++---------------
 extension/scripts/test/scriptsTest.js    | 37 ++++++++++----------
 3 files changed, 51 insertions(+), 46 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index 280b689e40b5e85052b698b8c4cdc68e8e36543d..f8782caf907c4562349f8ff77dce5c3dd35b9319 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -4,7 +4,7 @@
         var _require = function (moduleName) {
             var allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore"];
 
-            if (allowedModules.filter(function (mod) { return mod == moduleName; }).length == 1) {
+            if (allowedModules.filter(function (mod) { return mod === moduleName; }).length === 1) {
                 return require(moduleName);
             }
 
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index c76167e1ab7a46b41a8589a154506b2821f07102..663c81f36d2928408cecf90d6a91369dfdb8039f 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -9,7 +9,7 @@ var shortid = require("shortid"),
     fork = require('child_process').fork,
     _ = require("underscore"),
     join = require("path").join,
-    Q = require("q");
+    q = require("q");
 
 var logger = winston.loggers.get('jsreport');
 
@@ -17,60 +17,47 @@ module.exports = function (reporter, definition) {
     reporter[definition.name] = new Scripts(reporter, definition);
 };
 
-Scripts = function (reporter, definition) {
+var Scripts = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
 
-    this.ScriptType = $data.Class.define(reporter.extendGlobalTypeName("$entity.Script"), $data.Entity, null, {
-        shortid: { type: "string"},
-        creationDate: { type: "date" },
-        modificationDate: { type: "date" },
-        content: { type: "string" },
-        name: { type: "string" }
-    }, null);
-
-    this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-    reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
-
-    this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
-    this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
+    this._defineEntities();
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
-    this.reporter.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
 
 Scripts.prototype.create = function (context, script) {
     var entity = new this.ScriptType(script);
     context.scripts.add(entity);
     return context.scripts.saveChanges().then(function () {
-        return Q(entity);
+        return q(entity);
     });
 };
 
 Scripts.prototype.handleBeforeRender = function (request, response) {
-    if (!request.template.scriptId && !(request.template.script != null && request.template.script.content)) {
+    if (!request.template.scriptId && !request.template.script) {
         logger.info("ScriptId not defined for this template.");
-        return Q();
+        return q();
     }
 
-    function FindScript() {
-        if (request.template.script != null && request.template.script != "")
-            return Q(request.template.script);
+    function findScript() {
+        if (request.template.script && request.template.script !== "")
+            return q(request.template.script);
 
         logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
         return request.context.scripts.single(function (s) {
-            return s.shortid == this.id;
+            return s.shortid === this.id;
         }, { id: request.template.scriptId });
     }
 
-    return FindScript().then(function (script) {
+    return findScript().then(function (script) {
 
         script = script.content || script;
         var child = fork(join(__dirname, "scriptEvalChild.js"));
         var isDone = false;
 
-        return Q.nfcall(function (cb) {
+        return q.nfcall(function (cb) {
 
             child.on('message', function (m) {
                 isDone = true;
@@ -116,7 +103,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 };
 
 Scripts.prototype._beforeCreateHandler = function (args, entity) {
-    if (entity.shortid == null)
+    if (!entity.shortid)
         entity.shortid = shortid.generate();
 
     entity.creationDate = new Date();
@@ -127,6 +114,21 @@ Scripts.prototype._beforeUpdateHandler = function (args, entity) {
     entity.modificationDate = new Date();
 };
 
-function createEntitySetDefinitions(entitySets) {
-    entitySets["scripts"] = { type: $data.EntitySet, elementType: this.ScriptType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
+Scripts.prototype._defineEntities = function() {
+
+    this.ScriptType = this.reporter.dataProvider.createEntityType("ScriptType", {
+        shortid: { type: "string"},
+        creationDate: { type: "date" },
+        modificationDate: { type: "date" },
+        content: { type: "string" },
+        name: { type: "string" }
+    });
+
+    this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
+    this.reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
+
+    this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
+    this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
+
+    this.reporter.dataProvider.registerEntitySet("scripts", this.ScriptType, { tableOptions: { humanReadableKeys: [ "shortid"] }  });
 }
\ No newline at end of file
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index c2bf82afd70eecc97c21ae3faa63406790140143..f8740c1171f64daf149773faaf7604fd43bb3279 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -1,7 +1,9 @@
-﻿var assert = require("assert"),
+﻿/*globals describe, it, beforeEach, afterEach */
+
+var assert = require("assert"),
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting,
-    Q = require("q");
+    q = require("q");
 
 
 describeReporting(path.join(__dirname, "../../"), ["scripts"], function (reporter) {
@@ -21,7 +23,7 @@ describeReporting(path.join(__dirname, "../../"), ["scripts"], function (reporte
         
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function(template) {
-                return Q({
+                return q({
                     request: { template: template, context: reporter.context }, 
                     response: {}
                 });
@@ -30,46 +32,47 @@ describeReporting(path.join(__dirname, "../../"), ["scripts"], function (reporte
 
         it('shoulb be able to modify request.data', function (done) {
             prepareRequest("request.data = 'xxx'; done()").then(function(res) {
-                reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.data);
                     done();
                 });
-            });
+            }).catch(done);
         });
         
          it('shoulb be able to modify request.template.content', function (done) {
             prepareRequest("request.template.content = 'xxx'; done()").then(function(res) {
-                reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.template.content);
-                    done();
                 });
-            });
+            }).fin(done);
         });
-        
+
         it('shoulb be able to use linked modules', function (done) {
             var scriptContent = "var h = require('handlebars'); " +
                 "var compiledTemplate = h.compile('foo'); " +
                 "request.template.content = compiledTemplate();" +
                 "done();";
-            
+
             prepareRequest(scriptContent).then(function (res) {
-                reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
                     assert.equal('foo', res.request.template.content);
                     done();
                 });
-            });
+            }).catch(done);
         });
-        
+
         it('shoulb not be able to read local files', function (done) {
             var scriptContent = "var fs = require('fs'); " +
                 "fs.readdir('d:\', function(err, files) { response.filesLength = files.length; done(); });";
 
-            prepareRequest(scriptContent).then(function(res) {
-                reporter.scripts.handleBeforeRender(res.request, res.response).fail(function() {
-                    assert.equal(res.response.filesLength == null, true);
+            prepareRequest(scriptContent)
+                .then(function(res) {
+                    return reporter.scripts.handleBeforeRender(res.request, res.response);
+                }).then(function() {
+                        done(new Error('no error was thrown when it should have been'));
+                }).catch(function() {
                     done();
                 });
-            });
         });
     });
 });
\ No newline at end of file

From c8c4e5096602647d551512466c1d02509bf94943 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 13 Jun 2014 19:42:28 +0200
Subject: [PATCH] usage of nedb in tests: grunt file refactoring, tests
 refactoring; excel-parser extension replaced dataParser.js

---
 extension/scripts/jsreport.config.js  | 2 +-
 extension/scripts/test/scriptsTest.js | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/jsreport.config.js b/extension/scripts/jsreport.config.js
index 4fac3f5806bd105ffeaeef25379b77fc54350522..a2f8c87e623ab7cd62d217d3d98d5af2bcf8789c 100644
--- a/extension/scripts/jsreport.config.js
+++ b/extension/scripts/jsreport.config.js
@@ -1,5 +1,5 @@
 ﻿module.exports = {
   "name": "scripts",
   "main": "lib/scripts.js",
-  "dependencies": [ "templates" ]
+  "dependencies": [ "templates", "data" ]
 }
\ No newline at end of file
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index f8740c1171f64daf149773faaf7604fd43bb3279..c62718054bef4b1b4409d0fbe832175576920ab4 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -6,7 +6,7 @@ var assert = require("assert"),
     q = require("q");
 
 
-describeReporting(path.join(__dirname, "../../"), ["scripts"], function (reporter) {
+describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts"], function (reporter) {
 
     describe('scripts', function () {
         

From de376a992407e61004aef7553bca5d3618318387 Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Wed, 18 Jun 2014 16:22:30 +0200
Subject: [PATCH] delete main_dev

---
 extension/scripts/public/js/main_dev.js | 95 ---------------------------------
 1 file changed, 95 deletions(-)

diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
deleted file mode 100644
index 60c4eec81f324812b2d86fc33fbdc73121416482..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/main_dev.js
+++ /dev/null
@@ -1,95 +0,0 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.template.standard.view",
-        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
-    function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
-              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
-
-        app.module("scripts", function (module) {
-
-            var Router = Backbone.Router.extend({
-                initialize: function () {
-                    app.listenTo(app, "script-saved", function (model) {
-                        window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
-                    });
-                },
-
-                routes: {
-                    "extension/scripts/list": "scripts",
-                    "extension/scripts/detail/:id": "scriptsDetail",
-                    "extension/scripts/detail": "scriptsDetail"
-                },
-
-                scripts: function () {
-                    this.navigate("/extension/scripts/list");
-
-                    var model = new ScriptsListModel();
-
-                    app.layout.showToolbarViewComposition(new ScriptsListView({ collection: model }), new ScriptsListToolbarView({ collection: model }));
-
-
-                    model.fetch();
-                },
-
-                scriptsDetail: function (id) {
-                    var model = new ScriptsModel();
-
-                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
-
-                    if (id != null) {
-                        model.set("shortid", id);
-                        model.fetch();
-                    }
-                },
-
-                scriptsCreate: function () {
-                    app.layout.dialog.show(new ScriptsCreateView({
-                        model: new ScriptsModel()
-                    }));
-                }
-            });
-
-            app.scripts.router = new Router();
-
-            app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
-            });
-
-            app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
-            });
-
-            app.on("template-extensions-render", function (context) {
-                var model = new StandardTemplateModel();
-                model.setTemplate(context.template);
-
-                model.fetch({
-                    success: function () {
-                        var view = new StandardTemplateView({ model: model });
-                        context.extensionsRegion.show(view, "scripts");
-                    }
-                });
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Class.define("$entity.Script", $data.Entity, null, {
-                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'content': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    "scriptId": { type: "Edm.String"}
-
-                }, null);
-
-                $entity.Script.prototype.toString = function () {
-                    return "Script " + (this.name || "");
-                };
-
-                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-            });
-        });
-    });
\ No newline at end of file

From f0c01bc20484afb18adf5ff0073f17a5b6f4af30 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 21 Jun 2014 10:08:59 +0200
Subject: [PATCH] refactoring - bootstrapper

---
 extension/scripts/lib/scripts.js | 19 +++++++++----------
 1 file changed, 9 insertions(+), 10 deletions(-)

diff --git a/extension/scripts/.npmignore b/extension/scripts/.npmignore
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 663c81f36d2928408cecf90d6a91369dfdb8039f..d48888ecb3feb6868ac645eb05c901316041f8dd 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -5,14 +5,11 @@
  */
 
 var shortid = require("shortid"),
-    winston = require("winston"),
     fork = require('child_process').fork,
     _ = require("underscore"),
     join = require("path").join,
     q = require("q");
 
-var logger = winston.loggers.get('jsreport');
-
 module.exports = function (reporter, definition) {
     reporter[definition.name] = new Scripts(reporter, definition);
 };
@@ -35,8 +32,10 @@ Scripts.prototype.create = function (context, script) {
 };
 
 Scripts.prototype.handleBeforeRender = function (request, response) {
+    var self = this;
+
     if (!request.template.scriptId && !request.template.script) {
-        logger.info("ScriptId not defined for this template.");
+        self.reporter.logger.info("ScriptId not defined for this template.");
         return q();
     }
 
@@ -44,7 +43,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         if (request.template.script && request.template.script !== "")
             return q(request.template.script);
 
-        logger.debug("Searching for before script to apply - " + request.template.scriptId);
+        self.reporter.logger.debug("Searching for before script to apply - " + request.template.scriptId);
 
         return request.context.scripts.single(function (s) {
             return s.shortid === this.id;
@@ -62,12 +61,12 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             child.on('message', function (m) {
                 isDone = true;
                 if (m.error) {
-                    logger.error("Child process process resulted in error " + JSON.stringify(m.error));
-                    logger.error(m);
+                    self.reporter.logger.error("Child process process resulted in error " + JSON.stringify(m.error));
+                    self.reporter.logger.error(m);
                     return cb({ message: m.error, stack: m.errorStack });
                 }
 
-                logger.info("Child process successfully finished.");
+                self.reporter.logger.info("Child process successfully finished.");
 
                 request.data = m.request.data;
                 request.template.content = m.request.template.content;
@@ -88,14 +87,14 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                 response: response
             });
 
-            logger.info("Child process started.");
+            self.reporter.logger.info("Child process started.");
 
             setTimeout(function () {
                 if (isDone)
                     return;
 
                 child.kill();
-                logger.error("Child process resulted in timeout.");
+                self.reporter.logger.error("Child process resulted in timeout.");
                 return cb({ message: "Timeout error during script execution" });
             }, 60000);
         });

From 7c9a074b14eac57f045cb108bddd42171694eee8 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 22 Jun 2014 17:26:22 +0200
Subject: [PATCH] - changed port configuration to allow http only jsreport
 server - removed possibility of dynamic extensions
 registering/unregistering - scripts now supports extensions
 allowing external npm module requires

---
 extension/scripts/lib/scriptEvalChild.js | 25 ++++++++++++++-----------
 extension/scripts/lib/scripts.js         |  3 +++
 2 files changed, 17 insertions(+), 11 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index f8782caf907c4562349f8ff77dce5c3dd35b9319..92e37ebf0d20b2950336876fca62979a69c5a1f4 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -1,31 +1,34 @@
 ﻿process.on('message', function (m) {
     try {
-        
+
         var _require = function (moduleName) {
-            var allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore"];
+            //we want to allow only listed modules to stay secure
+            //module can be just string id or { id : "id", path: "path" } tuple
 
-            if (allowedModules.filter(function (mod) { return mod === moduleName; }).length === 1) {
-                return require(moduleName);
+            var modules = m.allowedModules.filter(function (mod) { return (mod.id || mod) === moduleName; });
+            if (modules.length == 1) {
+                return require(modules[0].path || modules[0]);
             }
 
             throw new Error("Unsupported module " + moduleName);
         };
-        
+
         var vm = require('vm');
         var sandbox = {
             request: m.request,
             response: m.response,
             require: _require,
+            Buffer: Buffer,
             done: function() {
-                 process.send({
-                     request: m.request,
-                     response: m.response
-                 });
-                 process.exit();
+                process.send({
+                    request: m.request,
+                    response: m.response
+                });
+                process.exit();
             }
         };
 
-       vm.runInNewContext(m.script, sandbox);
+        vm.runInNewContext(m.script, sandbox);
     } catch (ex) {
         process.send({
             error: ex.message,
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index d48888ecb3feb6868ac645eb05c901316041f8dd..14773120d4f3fa092960de8fa645be6e57300b8b 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -21,6 +21,8 @@ var Scripts = function (reporter, definition) {
     this._defineEntities();
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
+
+    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore"];
 };
 
 Scripts.prototype.create = function (context, script) {
@@ -77,6 +79,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 
             child.send({
                 script: script,
+                allowedModules: self.allowedModules,
                 request: {
                     data: request.data,
                     template: {

From e2ceb48fab95c987bfd3a58b11aff29a2702a94a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 10 Jul 2014 15:58:16 +0200
Subject: [PATCH] improving jsreport performance

---
 extension/scripts/lib/scriptEvalChild.js | 63 +++++++++++++++-----------------
 extension/scripts/lib/scripts.js         | 49 ++++++-------------------
 extension/scripts/test/scriptsTest.js    |  2 +-
 3 files changed, 42 insertions(+), 72 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index 92e37ebf0d20b2950336876fca62979a69c5a1f4..f8706849edf954c0f4c24ba01fdb2ba4786c669f 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -1,39 +1,34 @@
-﻿process.on('message', function (m) {
-    try {
+﻿module.exports = function (req, res, next) {
 
-        var _require = function (moduleName) {
-            //we want to allow only listed modules to stay secure
-            //module can be just string id or { id : "id", path: "path" } tuple
 
-            var modules = m.allowedModules.filter(function (mod) { return (mod.id || mod) === moduleName; });
-            if (modules.length == 1) {
-                return require(modules[0].path || modules[0]);
-            }
+    var _require = function (moduleName) {
+        //we want to allow only listed modules to stay secure
+        //module can be just string id or { id : "id", path: "path" } tuple
 
-            throw new Error("Unsupported module " + moduleName);
-        };
+        var modules = req.body.allowedModules.filter(function (mod) {
+            return (mod.id || mod) === moduleName;
+        });
+        if (modules.length == 1) {
+            return require(modules[0].path || modules[0]);
+        }
 
-        var vm = require('vm');
-        var sandbox = {
-            request: m.request,
-            response: m.response,
-            require: _require,
-            Buffer: Buffer,
-            done: function() {
-                process.send({
-                    request: m.request,
-                    response: m.response
-                });
-                process.exit();
-            }
-        };
+        throw new Error("Unsupported module " + moduleName);
+    };
 
-        vm.runInNewContext(m.script, sandbox);
-    } catch (ex) {
-        process.send({
-            error: ex.message,
-            errorStack: ex.stack
-        });
-        process.exit();
-    }
-});
\ No newline at end of file
+    var vm = require('vm');
+    var sandbox = {
+        request: req.body.request,
+        response: req.body.response,
+        require: _require,
+        Buffer: Buffer,
+        done: function () {
+            res.send({
+                request: req.body.request,
+                response: req.body.response
+            });
+
+        }
+    };
+
+    vm.runInNewContext(req.body.script, sandbox);
+};
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 14773120d4f3fa092960de8fa645be6e57300b8b..230a316bdd540981711e695dc2554ac39a001c72 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -5,9 +5,8 @@
  */
 
 var shortid = require("shortid"),
-    fork = require('child_process').fork,
     _ = require("underscore"),
-    join = require("path").join,
+    path = require("path"),
     q = require("q");
 
 module.exports = function (reporter, definition) {
@@ -53,31 +52,10 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     }
 
     return findScript().then(function (script) {
-
         script = script.content || script;
-        var child = fork(join(__dirname, "scriptEvalChild.js"));
-        var isDone = false;
-
-        return q.nfcall(function (cb) {
-
-            child.on('message', function (m) {
-                isDone = true;
-                if (m.error) {
-                    self.reporter.logger.error("Child process process resulted in error " + JSON.stringify(m.error));
-                    self.reporter.logger.error(m);
-                    return cb({ message: m.error, stack: m.errorStack });
-                }
-
-                self.reporter.logger.info("Child process successfully finished.");
-
-                request.data = m.request.data;
-                request.template.content = m.request.template.content;
-                request.template.helpers = m.request.template.helpers;
 
-                return cb();
-            });
-
-            child.send({
+        return request.taskManager.execute({
+            body: {
                 script: script,
                 allowedModules: self.allowedModules,
                 request: {
@@ -88,18 +66,15 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                     }
                 },
                 response: response
-            });
-
-            self.reporter.logger.info("Child process started.");
-
-            setTimeout(function () {
-                if (isDone)
-                    return;
-
-                child.kill();
-                self.reporter.logger.error("Child process resulted in timeout.");
-                return cb({ message: "Timeout error during script execution" });
-            }, 60000);
+            },
+            execModulePath: path.join(__dirname, "scriptEvalChild.js"),
+            timeout: 60000
+        }).then(function(body) {
+            request.data = body.request.data;
+            request.template.content = body.request.template.content;
+            request.template.helpers = body.request.template.helpers;
+
+            return response;
         });
     });
 };
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index c62718054bef4b1b4409d0fbe832175576920ab4..11669cc03c509b205bd786ec180ca88c589e53aa 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -24,7 +24,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function(template) {
                 return q({
-                    request: { template: template, context: reporter.context }, 
+                    request: { template: template, context: reporter.context, taskManager : reporter.taskManager },
                     response: {}
                 });
             });

From 0405076409291522fcde7f02ec650ee1479089a7 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 16 Jul 2014 14:37:59 +0200
Subject: [PATCH] improved logging, fixed memory leak in taskManager, removing
 process.env from child - master communication because it
 does not work in iisnode

---
 extension/scripts/lib/scripts.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 230a316bdd540981711e695dc2554ac39a001c72..2c24dc0872a0d705ccbab67c327819948957286f 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -36,7 +36,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
     if (!request.template.scriptId && !request.template.script) {
-        self.reporter.logger.info("ScriptId not defined for this template.");
+        self.reporter.logger.debug("ScriptId not defined for this template.");
         return q();
     }
 

From 39ec5cde8286cec4dc1817249844b4b5e3c4bfae Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 17 Jul 2014 10:03:39 +0200
Subject: [PATCH] scripts should use task manager from reporter

---
 extension/scripts/lib/scripts.js      | 2 +-
 extension/scripts/test/scriptsTest.js | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 2c24dc0872a0d705ccbab67c327819948957286f..aa7ffc7259ac8bed0040a28d717ee8a071973df3 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -54,7 +54,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     return findScript().then(function (script) {
         script = script.content || script;
 
-        return request.taskManager.execute({
+        return request.reporter.taskManager.execute({
             body: {
                 script: script,
                 allowedModules: self.allowedModules,
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 11669cc03c509b205bd786ec180ca88c589e53aa..b9fd1d7ee322c2528d0f54de20a1991693d89e28 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -24,7 +24,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function(template) {
                 return q({
-                    request: { template: template, context: reporter.context, taskManager : reporter.taskManager },
+                    request: { template: template, context: reporter.context, reporter : reporter },
                     response: {}
                 });
             });

From 0f27c99b21b4c6b695ef1fcdb4fe44d034dbd027 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 15 Oct 2014 12:54:32 +0200
Subject: [PATCH] embedding initial commit

---
 extension/scripts/.gitignore                       |   3 +-
 extension/scripts/jsreport.config.js               |   3 +-
 extension/scripts/lib/scripts.js                   |  19 +-
 extension/scripts/public/js/main.js                | 248 ++++++++++++++++++++-
 extension/scripts/public/js/main_dev.js            |  95 ++++++++
 extension/scripts/public/js/main_embed.js          |  85 +++++++
 .../public/js/scripts.template.standard.model.js   |  41 +++-
 .../embed-scripts-template-extension.html          |  17 ++
 8 files changed, 490 insertions(+), 21 deletions(-)

diff --git a/extension/scripts/.gitignore b/extension/scripts/.gitignore
index 7b014069d24cdc005fd0c90b91e6c43bbbd691f8..bf074057ff68d17bb22652b8bed703bbf606131a 100644
--- a/extension/scripts/.gitignore
+++ b/extension/scripts/.gitignore
@@ -1,2 +1 @@
-public/js/main_dev.js
-public/js/main_built.js
\ No newline at end of file
+public/js/main.js
\ No newline at end of file
diff --git a/extension/scripts/jsreport.config.js b/extension/scripts/jsreport.config.js
index a2f8c87e623ab7cd62d217d3d98d5af2bcf8789c..358032ec9f8c5387284ca939a71b96e783f9d6d7 100644
--- a/extension/scripts/jsreport.config.js
+++ b/extension/scripts/jsreport.config.js
@@ -1,5 +1,6 @@
 ﻿module.exports = {
   "name": "scripts",
   "main": "lib/scripts.js",
-  "dependencies": [ "templates", "data" ]
+  "dependencies": [ "templates", "data" ],
+  "embeddedSupport":true
 }
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index aa7ffc7259ac8bed0040a28d717ee8a071973df3..f30e86f667657cb966f69d2b81cb46bd50d5dff8 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -35,20 +35,21 @@ Scripts.prototype.create = function (context, script) {
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
-    if (!request.template.scriptId && !request.template.script) {
-        self.reporter.logger.debug("ScriptId not defined for this template.");
+    console.log(request.template.script);
+    if (!request.template.script || (!request.template.script.shortid && !request.template.script.content)) {
+        self.reporter.logger.debug("Script not defined for this template.");
         return q();
     }
 
     function findScript() {
-        if (request.template.script && request.template.script !== "")
+        if (request.template.script.content)
             return q(request.template.script);
 
-        self.reporter.logger.debug("Searching for before script to apply - " + request.template.scriptId);
+        self.reporter.logger.debug("Searching for before script to apply - " + request.template.script.shortid);
 
         return request.context.scripts.single(function (s) {
             return s.shortid === this.id;
-        }, { id: request.template.scriptId });
+        }, { id: request.template.script.shortid });
     }
 
     return findScript().then(function (script) {
@@ -101,8 +102,14 @@ Scripts.prototype._defineEntities = function() {
         name: { type: "string" }
     });
 
+    this.ScriptRefType = this.reporter.dataProvider.createEntityType("ScriptRefType", {
+        content: { type: "string" },
+        shortid: { type: "string" }
+    });
+
+    this.reporter.templates.TemplateType.addMember("script", { type: this.ScriptRefType });
+
     this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-    this.reporter.templates.TemplateType.addMember("scriptId", { type: "string" });
 
     this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
     this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 60c4eec81f324812b2d86fc33fbdc73121416482..32a179ffc81cc1e947eede5f5098be3211dce770 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -1,7 +1,245 @@
-﻿define(["app", "marionette", "backbone",
-        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
-        "./scripts.model", "./scripts.template.standard.view",
-        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
+define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+    return ModelBase.extend({
+        contextSet: function () { return app.dataContext.scripts; },
+
+       fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },    
+        
+        setTemplateModel: function(templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        _initialize: function () {
+            this.Entity = $entity.Script;
+        },
+    });
+});
+
+
+define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.scripts.applyFilter(this.filter).toArray();
+        },
+
+        model: ScriptModel,
+    });
+});
+
+
+
+
+define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "scripts-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/scripts/detail/" + id;
+                },
+                el: $("#scriptsGridBox"),
+                headerTemplate: "scripts-list-header",
+                rowsTemplate: "scripts-list-rows"
+            });
+        },
+    });
+}); 
+define('scripts.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-list-toolbar",
+
+            initialize: function() {
+            },         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            },
+        });
+    });
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("scriptId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.scripts.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("scriptId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                 return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("scriptId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define('scripts.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
+    return ViewBase.extend({
+        template: "scripts-detail",
+
+        initialize: function() {
+            this.listenTo(this.model, "sync", this.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+            
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/javascript");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+                
+            aceBinder(this.model, "content", this.contentEditor);
+            
+            $("#contentArea").css("margin-top", top);
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "scripts-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown.script-detail', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                if (!this.validate())
+                    return;
+                
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("script-saved", self.model);
+                    }
+                });
+            },
+
+            onDomRefresh: function() {
+                var self = this;
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+            
+            onValidate: function() {
+                var res = [];
+                
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+                 
+
+                return res;
+            },
+
+            onClose: function() {
+                $(document).off(".script-detail");
+            }
+        });
+    });
+define(["app", "marionette", "backbone",
+        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
+        "scripts.model", "scripts.template.standard.view",
+        "scripts.template.standard.model", "scripts.detail.view", "scripts.toolbar.view"],
     function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
               ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
 
@@ -92,4 +330,4 @@
                 context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
-    });
\ No newline at end of file
+    });
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..60c4eec81f324812b2d86fc33fbdc73121416482
--- /dev/null
+++ b/extension/scripts/public/js/main_dev.js
@@ -0,0 +1,95 @@
+﻿define(["app", "marionette", "backbone",
+        "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
+        "./scripts.model", "./scripts.template.standard.view",
+        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
+    function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
+              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
+
+        app.module("scripts", function (module) {
+
+            var Router = Backbone.Router.extend({
+                initialize: function () {
+                    app.listenTo(app, "script-saved", function (model) {
+                        window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
+                    });
+                },
+
+                routes: {
+                    "extension/scripts/list": "scripts",
+                    "extension/scripts/detail/:id": "scriptsDetail",
+                    "extension/scripts/detail": "scriptsDetail"
+                },
+
+                scripts: function () {
+                    this.navigate("/extension/scripts/list");
+
+                    var model = new ScriptsListModel();
+
+                    app.layout.showToolbarViewComposition(new ScriptsListView({ collection: model }), new ScriptsListToolbarView({ collection: model }));
+
+
+                    model.fetch();
+                },
+
+                scriptsDetail: function (id) {
+                    var model = new ScriptsModel();
+
+                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
+
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
+                },
+
+                scriptsCreate: function () {
+                    app.layout.dialog.show(new ScriptsCreateView({
+                        model: new ScriptsModel()
+                    }));
+                }
+            });
+
+            app.scripts.router = new Router();
+
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
+            });
+
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+            });
+
+            app.on("template-extensions-render", function (context) {
+                var model = new StandardTemplateModel();
+                model.setTemplate(context.template);
+
+                model.fetch({
+                    success: function () {
+                        var view = new StandardTemplateView({ model: model });
+                        context.extensionsRegion.show(view, "scripts");
+                    }
+                });
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Class.define("$entity.Script", $data.Entity, null, {
+                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'content': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                    'shortid': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
+                    "scriptId": { type: "Edm.String"}
+
+                }, null);
+
+                $entity.Script.prototype.toString = function () {
+                    return "Script " + (this.name || "");
+                };
+
+                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
new file mode 100644
index 0000000000000000000000000000000000000000..ca0fe465890b62a1aef7957edb0cd4d2377f747c
--- /dev/null
+++ b/extension/scripts/public/js/main_embed.js
@@ -0,0 +1,85 @@
+/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */
+
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
+        "core/aceBinder"],
+    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView, aceBinder) {
+
+        return app.module("scripts", function (module) {
+
+            var TemplateView = ViewBase.extend({
+                template: "embed-scripts-template-extension",
+
+                initialize: function() {
+                    _.bindAll(this, "getItems");
+                    var self = this;
+                    this.listenTo(this.model, "change:shortid", function() {
+                        self.contentEditor.setOptions({
+                            readOnly: self.model.get("shortid") !== "custom"
+                        });
+                    })
+                },
+
+                getItems: function () {
+                    return this.model.items;
+                },
+
+                onDomRefresh: function() {
+                    this.contentEditor = ace.edit("contentArea");
+                    this.contentEditor.setTheme("ace/theme/chrome");
+                    this.contentEditor.getSession().setMode("ace/mode/javascript");
+                    this.contentEditor.setOptions({
+                        enableBasicAutocompletion: true,
+                        enableSnippets: true,
+                        readOnly: this.model.get("shortid") !== "custom"
+                    });
+
+                    aceBinder(this.model, "content", this.contentEditor);
+                }
+            });
+
+
+            app.on("extensions-menu-render", function(context) {
+                context.result += "<li><a id='scriptsMenuCommand'><i class='fa fa-cloud-download'></i></a></li>";
+
+                context.on("after-render", function($el) {
+                    $($el).find("#scriptsMenuCommand").click(function() {
+                        var model = new TemplateStandardModel();
+                        model.setTemplate(context.template);
+
+                        model.fetch({ success: function () {
+                            var view = new TemplateView({ model: model});
+                            context.region.show(view, "scripts");
+                        }});
+                    });
+                });
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Class.define("$entity.Script", $data.Entity, null, {
+                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+                    'content': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                    'shortid': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
+                    "scriptId": { type: "Edm.String"}
+
+                }, null);
+
+                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+                    content: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
+                $entity.Script.prototype.toString = function () {
+                    return "Script " + (this.name || "");
+                };
+
+                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
+                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index c08c53433daf540c0d8240466b203ae382722cb3..293712575d0c46f5ae087d62459718b89b64a3f5 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -7,13 +7,27 @@
             
             app.dataContext.scripts.toArray().then(function (items) {
                 self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
+
+                var script = self.templateModel.get("script");
+                if (!script) {
+                    script = new $entity.ScriptRefType();
+                    self.templateModel.set("script", script);
+                }
+
+                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
+                if (!script.content && !script.shortid)
+                    self.set(empty, { silent: true });
+
+                if (script.shortid)
+                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
+
+                if (script.content)
+                    self.set(custom, { silent: true });
                 
                  return options.success();
             });
@@ -21,19 +35,32 @@
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
+            alert(JSON.stringify(this.templateModel.get("script")));
             this.listenTo(templateModel, "api-overrides", this.apiOverride);
         },
         
         apiOverride: function(addProperty) {
              addProperty("scriptId", this.get("shortid"));
         },
+
+        newCustomScript: function() {
+
+        },
  
         initialize: function () {
             var self = this;
             this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
+                self.templateModel.get("script").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("script").content = self.get("shortid") === "custom" ? self.get("content") : undefined;
                 self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
             });
-        },
+
+            this.listenTo(this, "change:content", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("script").content = self.get("content");
+                    _.findWhere(self.items, { shortid: "custom" }).content = self.get("content");
+                }
+            });
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/scripts/public/templates/embed-scripts-template-extension.html b/extension/scripts/public/templates/embed-scripts-template-extension.html
new file mode 100644
index 0000000000000000000000000000000000000000..e22df37698370425341ecc228855da7ac9beaa29
--- /dev/null
+++ b/extension/scripts/public/templates/embed-scripts-template-extension.html
@@ -0,0 +1,17 @@
+<div class="btn-group" data-binding="shortid">
+    <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+    <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
+        <span class="caret"></span>
+    </button>
+    <ul class="dropdown-menu pull-right" role="menu">
+        {{for ~getItems()}}
+        <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
+        {{/for}}
+    </ul>
+</div>
+
+<div id="contentArea" class="full-content-top-gap">{{:content}}</div>
+
+
+
+

From c34f001dfe1e1980890f4bc024531ab5fda5c5c9 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Fri, 17 Oct 2014 16:13:10 +0200
Subject: [PATCH] examples for embedding

---
 extension/scripts/lib/scripts.js                   |  6 ++-
 extension/scripts/public/js/main.js                | 48 ++++++++++++++++++----
 extension/scripts/public/js/main_embed.js          |  2 -
 .../public/js/scripts.template.standard.model.js   |  9 +++-
 4 files changed, 54 insertions(+), 11 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index f30e86f667657cb966f69d2b81cb46bd50d5dff8..946443e0e85153358a442de9421c534dc539e848 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -35,7 +35,11 @@ Scripts.prototype.create = function (context, script) {
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
-    console.log(request.template.script);
+    //back compatibility
+    if (!request.template.script && request.template.scriptId) {
+        request.template.script = { shortid: request.template.scriptId}
+    }
+
     if (!request.template.script || (!request.template.script.shortid && !request.template.script.content)) {
         self.reporter.logger.debug("Script not defined for this template.");
         return q();
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 32a179ffc81cc1e947eede5f5098be3211dce770..1fd3ba1152956434f779735ab5b8c4f902bdf8e5 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -122,13 +122,35 @@ define('scripts.template.standard.model',["app", "core/basicModel", "underscore"
             
             app.dataContext.scripts.toArray().then(function (items) {
                 self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
+
+                var script = self.templateModel.get("script");
+
+                if (!script) {
+                    script = new $entity.ScriptRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("scriptId")) {
+                        script.shortid = self.templateModel.get("scriptId");
+                    }
+
+                    self.templateModel.set("script", script);
+                }
+
+
+                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
-                if (self.templateModel.get("scriptId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("scriptId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
+                if (!script.content && !script.shortid)
+                    self.set(empty, { silent: true });
+
+                if (script.shortid)
+                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
+
+                if (script.content)
+                    self.set(custom, { silent: true });
                 
                  return options.success();
             });
@@ -142,14 +164,26 @@ define('scripts.template.standard.model',["app", "core/basicModel", "underscore"
         apiOverride: function(addProperty) {
              addProperty("scriptId", this.get("shortid"));
         },
+
+        newCustomScript: function() {
+
+        },
  
         initialize: function () {
             var self = this;
             this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("scriptId", self.get("shortid"));
+                self.templateModel.get("script").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("script").content = self.get("shortid") === "custom" ? self.get("content") : undefined;
                 self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
             });
-        },
+
+            this.listenTo(this, "change:content", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("script").content = self.get("content");
+                    _.findWhere(self.items, { shortid: "custom" }).content = self.get("content");
+                }
+            });
+        }
     });
 });
 define('scripts.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
index ca0fe465890b62a1aef7957edb0cd4d2377f747c..e779c67098e6bcf3b390baa40995a872439833e1 100644
--- a/extension/scripts/public/js/main_embed.js
+++ b/extension/scripts/public/js/main_embed.js
@@ -65,8 +65,6 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
                     "modificationDate": { type: "date" },
-                    "scriptId": { type: "Edm.String"}
-
                 }, null);
 
                 $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 293712575d0c46f5ae087d62459718b89b64a3f5..57653611ccac901fc4c62c29a36a404be75dade0 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -9,11 +9,19 @@
                 self.items = items.map(function(i) { return i.initData; });
 
                 var script = self.templateModel.get("script");
+
                 if (!script) {
                     script = new $entity.ScriptRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("scriptId")) {
+                        script.shortid = self.templateModel.get("scriptId");
+                    }
+
                     self.templateModel.set("script", script);
                 }
 
+
                 var custom = { name: "- custom -", shortid: "custom", content:   script.content};
                 self.items.unshift(custom);
 
@@ -35,7 +43,6 @@
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
-            alert(JSON.stringify(this.templateModel.get("script")));
             this.listenTo(templateModel, "api-overrides", this.apiOverride);
         },
         

From 1daa0bc62e2419417f43c67d54fee7fd4f482db3 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 21 Oct 2014 12:04:40 +0200
Subject: [PATCH] finalizing first prototype of embedding

---
 extension/scripts/lib/scripts.js                          |  3 ++-
 extension/scripts/public/js/main.js                       | 15 +++++++++------
 extension/scripts/public/js/main_dev.js                   | 11 +++++++----
 extension/scripts/public/js/main_embed.js                 |  2 +-
 .../scripts/public/js/scripts.template.standard.view.js   |  4 ++--
 extension/scripts/test/scriptsTest.js                     |  2 +-
 6 files changed, 22 insertions(+), 15 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 946443e0e85153358a442de9421c534dc539e848..eca5cb530ea8e67b016aac41a2b8849f72b81e15 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -68,7 +68,8 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                     template: {
                         content: request.template.content,
                         helpers: request.template.helpers
-                    }
+                    },
+                    headers: request.headers
                 },
                 response: response
             },
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index 1fd3ba1152956434f779735ab5b8c4f902bdf8e5..cd02f2f6449d21665db0ce2dda2fc61dc5a21ef0 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -87,7 +87,7 @@ define('scripts.list.toolbar.view',["jquery", "app", "core/utils", "core/view.ba
             },
         });
     });
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
     return ViewBase.extend({
         tagName: "li",
         template: "scripts-template-standard",
@@ -97,7 +97,7 @@ define('scripts.template.standard.view',["app", "marionette", "core/view.base",
         },
 
         isFilled: function() {
-            return this.model.templateModel.get("scriptId");
+            return this.model.get("shortid") || this.model.get("content");
         },
         
         getItems: function () {
@@ -351,16 +351,19 @@ define(["app", "marionette", "backbone",
                     'name': { 'type': 'Edm.String' },
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    "scriptId": { type: "Edm.String"}
-
+                    "modificationDate": { type: "date" }
                 }, null);
 
+                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+                    content: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
                 $entity.Script.prototype.toString = function () {
                     return "Script " + (this.name || "");
                 };
 
-                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
                 context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 60c4eec81f324812b2d86fc33fbdc73121416482..d0bf2e946d5d8a5364d17ed9110adc56afaeceac 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -79,16 +79,19 @@
                     'name': { 'type': 'Edm.String' },
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    "scriptId": { type: "Edm.String"}
-
+                    "modificationDate": { type: "date" }
                 }, null);
 
+                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+                    content: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
                 $entity.Script.prototype.toString = function () {
                     return "Script " + (this.name || "");
                 };
 
-                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
                 context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
index e779c67098e6bcf3b390baa40995a872439833e1..7ba677eed24e88f2cc32f552028c9fc7be557062 100644
--- a/extension/scripts/public/js/main_embed.js
+++ b/extension/scripts/public/js/main_embed.js
@@ -64,7 +64,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     'name': { 'type': 'Edm.String' },
                     'shortid': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
+                    "modificationDate": { type: "date" }
                 }, null);
 
                 $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
diff --git a/extension/scripts/public/js/scripts.template.standard.view.js b/extension/scripts/public/js/scripts.template.standard.view.js
index 291a9d900ec692754f1e716e022eed1bf1cc1a2d..f299ad0c64e1bb49a47ea340cc4f18c8e24680cc 100644
--- a/extension/scripts/public/js/scripts.template.standard.view.js
+++ b/extension/scripts/public/js/scripts.template.standard.view.js
@@ -1,4 +1,4 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+﻿define(["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
     return ViewBase.extend({
         tagName: "li",
         template: "scripts-template-standard",
@@ -8,7 +8,7 @@
         },
 
         isFilled: function() {
-            return this.model.templateModel.get("scriptId");
+            return this.model.get("shortid") || this.model.get("content");
         },
         
         getItems: function () {
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index b9fd1d7ee322c2528d0f54de20a1991693d89e28..0bd3eabc695fdd05fd75b75ece1615587380ea2c 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -16,7 +16,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
             return reporter.context.scripts.saveChanges().then(function () {
                 return reporter.templates.create({
                     content: "foo",
-                    scriptId: script.shortid
+                    script: { shortid: script.shortid }
                 });
             });
         }

From d00d4f06f0541e52afb778d0626bc3fb3fb9092a Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 23 Oct 2014 10:52:03 +0200
Subject: [PATCH] authentication prototype

---
 extension/scripts/lib/scriptEvalChild.js | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index f8706849edf954c0f4c24ba01fdb2ba4786c669f..e6e304fe1372b40eea39e8cadba46c1b6929eca1 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -21,10 +21,14 @@
         response: req.body.response,
         require: _require,
         Buffer: Buffer,
-        done: function () {
+        done: function (err) {
             res.send({
                 request: req.body.request,
-                response: req.body.response
+                response: req.body.response,
+                error: err ? {
+                    message: err.message,
+                    stack: err.stack
+                } : undefined
             });
 
         }

From a2fd7a1a40420fe6f838088a5fb3c5ea190ef3fa Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 12:57:33 +0100
Subject: [PATCH] refactoring embedded

---
 extension/scripts/public/js/entityRegistration.js | 27 ++++++++++++++++++++
 extension/scripts/public/js/main.js               |  3 +++
 extension/scripts/public/js/main_dev.js           | 30 ++++-------------------
 extension/scripts/public/js/main_embed.js         | 29 +++-------------------
 4 files changed, 39 insertions(+), 50 deletions(-)

diff --git a/extension/scripts/public/js/entityRegistration.js b/extension/scripts/public/js/entityRegistration.js
new file mode 100644
index 0000000000000000000000000000000000000000..88a1ba07570f1884a5dd914a76ed5f126cbdb353
--- /dev/null
+++ b/extension/scripts/public/js/entityRegistration.js
@@ -0,0 +1,27 @@
+define([], function() {
+    return function(context) {
+        $data.Class.define("$entity.Script", $data.Entity, null, {
+            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+            'content': { 'type': 'Edm.String' },
+            'name': { 'type': 'Edm.String' },
+            'shortid': { 'type': 'Edm.String' },
+            "creationDate": { type: "date" },
+            "modificationDate": { type: "date" }
+        }, null);
+
+        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+            content: { type: 'Edm.String' },
+            shortid: { type: 'Edm.String' }
+        });
+
+        $entity.Script.prototype.toString = function () {
+            return "Script " + (this.name || "");
+        };
+
+        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
+        //back compatibility
+        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+
+        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+    }
+})
\ No newline at end of file
diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
index cd02f2f6449d21665db0ce2dda2fc61dc5a21ef0..8bf0b7e6832f3bbb9c74f4188b578794f7d2c858 100644
--- a/extension/scripts/public/js/main.js
+++ b/extension/scripts/public/js/main.js
@@ -364,6 +364,9 @@ define(["app", "marionette", "backbone",
                 };
 
                 $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
+                //back compatibility
+                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+
                 context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
             });
         });
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index d0bf2e946d5d8a5364d17ed9110adc56afaeceac..167161984ecaed859ebaf0f04da7fd107d7b87e2 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -1,9 +1,11 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.template.standard.view",
-        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
+        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view",
+        "./entityRegistration"],
     function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
-              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
+              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView,
+              entityRegistration) {
 
         app.module("scripts", function (module) {
 
@@ -71,28 +73,6 @@
                 });
             });
 
-            app.on("entity-registration", function (context) {
-
-                $data.Class.define("$entity.Script", $data.Entity, null, {
-                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'content': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" }
-                }, null);
-
-                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-                    content: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-                $entity.Script.prototype.toString = function () {
-                    return "Script " + (this.name || "");
-                };
-
-                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-            });
+            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
index 7ba677eed24e88f2cc32f552028c9fc7be557062..83f92a9db4e87131f699f798c03ca4e28702fc4a 100644
--- a/extension/scripts/public/js/main_embed.js
+++ b/extension/scripts/public/js/main_embed.js
@@ -3,8 +3,9 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
-        "core/aceBinder"],
-    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView, aceBinder) {
+        "core/aceBinder", "./entityRegistration"],
+    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
+              aceBinder, entityRegistration) {
 
         return app.module("scripts", function (module) {
 
@@ -56,28 +57,6 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                 });
             });
 
-            app.on("entity-registration", function (context) {
-
-                $data.Class.define("$entity.Script", $data.Entity, null, {
-                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'content': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" }
-                }, null);
-
-                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-                    content: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-                $entity.Script.prototype.toString = function () {
-                    return "Script " + (this.name || "");
-                };
-
-                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-            });
+            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file

From 1da7bc6653d8f64cadb7073a9ba19f3eac5ff4cb Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 13:52:08 +0100
Subject: [PATCH] delete built file

---
 extension/scripts/public/js/main.js | 373 ------------------------------------
 1 file changed, 373 deletions(-)

diff --git a/extension/scripts/public/js/main.js b/extension/scripts/public/js/main.js
deleted file mode 100644
index 8bf0b7e6832f3bbb9c74f4188b578794f7d2c858..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/main.js
+++ /dev/null
@@ -1,373 +0,0 @@
-define('scripts.model',["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
-    return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },    
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
-    });
-});
-
-
-define('scripts.list.model',["app", "backbone", "core/dataGrid", "scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
-
-        model: ScriptModel,
-    });
-});
-
-
-
-
-define('scripts.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "scripts-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/scripts/detail/" + id;
-                },
-                el: $("#scriptsGridBox"),
-                headerTemplate: "scripts-list-header",
-                rowsTemplate: "scripts-list-rows"
-            });
-        },
-    });
-}); 
-define('scripts.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-list-toolbar",
-
-            initialize: function() {
-            },         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            },
-        });
-    });
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.get("shortid") || this.model.get("content");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-
-                var script = self.templateModel.get("script");
-
-                if (!script) {
-                    script = new $entity.ScriptRefType();
-
-                    //back compatibility
-                    if (self.templateModel.get("scriptId")) {
-                        script.shortid = self.templateModel.get("scriptId");
-                    }
-
-                    self.templateModel.set("script", script);
-                }
-
-
-                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
-                self.items.unshift(custom);
-
-                var empty = { name: "- not selected -", shortid: null };
-                self.items.unshift(empty);
-
-                if (!script.content && !script.shortid)
-                    self.set(empty, { silent: true });
-
-                if (script.shortid)
-                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
-
-                if (script.content)
-                    self.set(custom, { silent: true });
-                
-                 return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
-
-        newCustomScript: function() {
-
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.get("script").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
-                self.templateModel.get("script").content = self.get("shortid") === "custom" ? self.get("content") : undefined;
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-
-            this.listenTo(this, "change:content", function() {
-                if (self.get("shortid") === "custom") {
-                    self.templateModel.get("script").content = self.get("content");
-                    _.findWhere(self.items, { shortid: "custom" }).content = self.get("content");
-                }
-            });
-        }
-    });
-});
-define('scripts.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "scripts-detail",
-
-        initialize: function() {
-            this.listenTo(this.model, "sync", this.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-            
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/javascript");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-                
-            aceBinder(this.model, "content", this.contentEditor);
-            
-            $("#contentArea").css("margin-top", top);
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('scripts.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "scripts-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown.script-detail', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-                
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("script-saved", self.model);
-                    }
-                });
-            },
-
-            onDomRefresh: function() {
-                var self = this;
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-            
-            onValidate: function() {
-                var res = [];
-                
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-                 
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off(".script-detail");
-            }
-        });
-    });
-define(["app", "marionette", "backbone",
-        "scripts.list.model", "scripts.list.view", "scripts.list.toolbar.view",
-        "scripts.model", "scripts.template.standard.view",
-        "scripts.template.standard.model", "scripts.detail.view", "scripts.toolbar.view"],
-    function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
-              ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView) {
-
-        app.module("scripts", function (module) {
-
-            var Router = Backbone.Router.extend({
-                initialize: function () {
-                    app.listenTo(app, "script-saved", function (model) {
-                        window.location.hash = "/extension/scripts/detail/" + model.get("shortid");
-                    });
-                },
-
-                routes: {
-                    "extension/scripts/list": "scripts",
-                    "extension/scripts/detail/:id": "scriptsDetail",
-                    "extension/scripts/detail": "scriptsDetail"
-                },
-
-                scripts: function () {
-                    this.navigate("/extension/scripts/list");
-
-                    var model = new ScriptsListModel();
-
-                    app.layout.showToolbarViewComposition(new ScriptsListView({ collection: model }), new ScriptsListToolbarView({ collection: model }));
-
-
-                    model.fetch();
-                },
-
-                scriptsDetail: function (id) {
-                    var model = new ScriptsModel();
-
-                    app.layout.showToolbarViewComposition(new ScriptsDetailView({ model: model }), new ToolbarView({ model: model }));
-
-                    if (id != null) {
-                        model.set("shortid", id);
-                        model.fetch();
-                    }
-                },
-
-                scriptsCreate: function () {
-                    app.layout.dialog.show(new ScriptsCreateView({
-                        model: new ScriptsModel()
-                    }));
-                }
-            });
-
-            app.scripts.router = new Router();
-
-            app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
-            });
-
-            app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
-            });
-
-            app.on("template-extensions-render", function (context) {
-                var model = new StandardTemplateModel();
-                model.setTemplate(context.template);
-
-                model.fetch({
-                    success: function () {
-                        var view = new StandardTemplateView({ model: model });
-                        context.extensionsRegion.show(view, "scripts");
-                    }
-                });
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Class.define("$entity.Script", $data.Entity, null, {
-                    '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-                    'content': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    'shortid': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" }
-                }, null);
-
-                $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-                    content: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-                $entity.Script.prototype.toString = function () {
-                    return "Script " + (this.name || "");
-                };
-
-                $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-                //back compatibility
-                $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-
-                context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-            });
-        });
-    });

From 94df0e45287fba544fc503582dc71f02c850bc9b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 15:22:04 +0100
Subject: [PATCH] finalizing 0.1.16

---
 extension/scripts/public/js/entityRegistration.js  | 27 ----------------------
 extension/scripts/public/js/main_dev.js            |  2 +-
 extension/scripts/public/js/main_embed.js          |  2 +-
 .../public/js/scripts.entityRegistration.js        | 27 ++++++++++++++++++++++
 4 files changed, 29 insertions(+), 29 deletions(-)

diff --git a/extension/scripts/public/js/entityRegistration.js b/extension/scripts/public/js/entityRegistration.js
deleted file mode 100644
index 88a1ba07570f1884a5dd914a76ed5f126cbdb353..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/entityRegistration.js
+++ /dev/null
@@ -1,27 +0,0 @@
-define([], function() {
-    return function(context) {
-        $data.Class.define("$entity.Script", $data.Entity, null, {
-            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-            'content': { 'type': 'Edm.String' },
-            'name': { 'type': 'Edm.String' },
-            'shortid': { 'type': 'Edm.String' },
-            "creationDate": { type: "date" },
-            "modificationDate": { type: "date" }
-        }, null);
-
-        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-            content: { type: 'Edm.String' },
-            shortid: { type: 'Edm.String' }
-        });
-
-        $entity.Script.prototype.toString = function () {
-            return "Script " + (this.name || "");
-        };
-
-        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-        //back compatibility
-        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-
-        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-    }
-})
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 167161984ecaed859ebaf0f04da7fd107d7b87e2..651ad69382d18663746906ee939690290a4c3859 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -2,7 +2,7 @@
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.template.standard.view",
         "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view",
-        "./entityRegistration"],
+        "./scripts.entityRegistration"],
     function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
               ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView,
               entityRegistration) {
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
index 83f92a9db4e87131f699f798c03ca4e28702fc4a..6beac99fe24673e0ec8d0430b28c5cee9ab3d455 100644
--- a/extension/scripts/public/js/main_embed.js
+++ b/extension/scripts/public/js/main_embed.js
@@ -3,7 +3,7 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
-        "core/aceBinder", "./entityRegistration"],
+        "core/aceBinder", "./scripts.entityRegistration"],
     function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
               aceBinder, entityRegistration) {
 
diff --git a/extension/scripts/public/js/scripts.entityRegistration.js b/extension/scripts/public/js/scripts.entityRegistration.js
new file mode 100644
index 0000000000000000000000000000000000000000..88a1ba07570f1884a5dd914a76ed5f126cbdb353
--- /dev/null
+++ b/extension/scripts/public/js/scripts.entityRegistration.js
@@ -0,0 +1,27 @@
+define([], function() {
+    return function(context) {
+        $data.Class.define("$entity.Script", $data.Entity, null, {
+            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+            'content': { 'type': 'Edm.String' },
+            'name': { 'type': 'Edm.String' },
+            'shortid': { 'type': 'Edm.String' },
+            "creationDate": { type: "date" },
+            "modificationDate": { type: "date" }
+        }, null);
+
+        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+            content: { type: 'Edm.String' },
+            shortid: { type: 'Edm.String' }
+        });
+
+        $entity.Script.prototype.toString = function () {
+            return "Script " + (this.name || "");
+        };
+
+        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
+        //back compatibility
+        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+
+        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+    }
+})
\ No newline at end of file

From 2ae4535197bb8ea27d51f5c26b9f8571095b080b Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 5 Nov 2014 12:41:56 +0100
Subject: [PATCH] some refactoring

---
 extension/scripts/.gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/scripts/.gitignore b/extension/scripts/.gitignore
index bf074057ff68d17bb22652b8bed703bbf606131a..3dede11cceae4c048a5d3b3ace2b81ce47b6e2a6 100644
--- a/extension/scripts/.gitignore
+++ b/extension/scripts/.gitignore
@@ -1 +1,2 @@
-public/js/main.js
\ No newline at end of file
+public/js/main.js
+public/js/main_built.js
\ No newline at end of file

From 35240ca6af7c1545a90e2495792aac3e11537d67 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 08:15:22 +0100
Subject: [PATCH] improving embedded studio

---
 extension/scripts/lib/scripts.js                   |   2 +-
 extension/scripts/public/js/main_dev.js            |   2 +
 extension/scripts/public/js/main_embed.js          | 161 ++++++++++++++++++++-
 extension/scripts/public/js/main_embed_dev.js      |  75 ++++++++++
 .../public/js/scripts.template.standard.model.js   |  18 ++-
 .../embed-scripts-template-extension.html          |  38 +++--
 6 files changed, 270 insertions(+), 26 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index eca5cb530ea8e67b016aac41a2b8849f72b81e15..47019eee3ea10986edd808ce8c0b8ecdbf7efdbd 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -21,7 +21,7 @@ var Scripts = function (reporter, definition) {
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
 
-    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore"];
+    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore", "constants"];
 };
 
 Scripts.prototype.create = function (context, script) {
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 651ad69382d18663746906ee939690290a4c3859..84aa61709cc59b34526e4e78c16c6841cbcda403 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -7,6 +7,8 @@
               ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView,
               entityRegistration) {
 
+        app.options.scripts = app.options.scripts || { allowChoosing: false};
+
         app.module("scripts", function (module) {
 
             var Router = Backbone.Router.extend({
diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
index 6beac99fe24673e0ec8d0430b28c5cee9ab3d455..d34b31f04f5e6cca3d6757cf75bcdb96fc78e377 100644
--- a/extension/scripts/public/js/main_embed.js
+++ b/extension/scripts/public/js/main_embed.js
@@ -1,12 +1,146 @@
+define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+
+            function processItems(items) {
+                self.items = items.map(function(i) { return i.initData; });
+
+                var script = self.templateModel.get("script");
+
+                if (!script) {
+                    script = new $entity.ScriptRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("scriptId")) {
+                        script.shortid = self.templateModel.get("scriptId");
+                    }
+
+                    self.templateModel.set("script", script);
+                }
+
+
+                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
+                self.items.unshift(empty);
+
+                if (!script.content && !script.shortid)
+                    self.set(custom, { silent: true });
+
+                if (script.shortid)
+                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
+
+                if (script.content)
+                    self.set(custom, { silent: true });
+
+                return options.success();
+            }
+
+            if (app.options.scripts.allowChoosing) {
+                app.dataContext.scripts.toArray().then(processItems);
+            } else {
+                processItems([]);
+            }
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+             addProperty("scriptId", this.get("shortid"));
+        },
+
+        newCustomScript: function() {
+
+        },
+ 
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.get("script").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("script").content = self.get("shortid") === "custom" ? self.get("content") : undefined;
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+
+            this.listenTo(this, "change:content", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("script").content = self.get("content");
+                    _.findWhere(self.items, { shortid: "custom" }).content = self.get("content");
+                }
+            });
+        }
+    });
+});
+define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "scripts-template-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.get("shortid") || this.model.get("content");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('scripts.entityRegistration',[], function() {
+    return function(context) {
+        $data.Class.define("$entity.Script", $data.Entity, null, {
+            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
+            'content': { 'type': 'Edm.String' },
+            'name': { 'type': 'Edm.String' },
+            'shortid': { 'type': 'Edm.String' },
+            "creationDate": { type: "date" },
+            "modificationDate": { type: "date" }
+        }, null);
+
+        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
+            content: { type: 'Edm.String' },
+            shortid: { type: 'Edm.String' }
+        });
+
+        $entity.Script.prototype.toString = function () {
+            return "Script " + (this.name || "");
+        };
+
+        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
+        //back compatibility
+        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
+
+        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
+    }
+});
 /*! 
  * Copyright(c) 2014 Jan Blaha 
  */
 
-define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
-        "core/aceBinder", "./scripts.entityRegistration"],
-    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "scripts.template.standard.model", "scripts.template.standard.view",
+        "core/aceBinder", "scripts.entityRegistration"],
+    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
               aceBinder, entityRegistration) {
 
+        app.options.scripts = app.options.scripts || { allowChoosing: false};
+
         return app.module("scripts", function (module) {
 
             var TemplateView = ViewBase.extend({
@@ -17,9 +151,13 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     var self = this;
                     this.listenTo(this.model, "change:shortid", function() {
                         self.contentEditor.setOptions({
-                            readOnly: self.model.get("shortid") !== "custom"
+                            readOnly: self.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
                         });
-                    })
+                    });
+
+                    this.listenTo(this, "animation-done", function() {
+                        self.fixAcePosition();
+                    });
                 },
 
                 getItems: function () {
@@ -33,16 +171,23 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     this.contentEditor.setOptions({
                         enableBasicAutocompletion: true,
                         enableSnippets: true,
-                        readOnly: this.model.get("shortid") !== "custom"
+                        readOnly: this.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
                     });
 
                     aceBinder(this.model, "content", this.contentEditor);
+
+                    this.fixAcePosition();
+                },
+
+                fixAcePosition: function() {
+                    var top = $("#contentWrap").position().top;
+                    $("#contentArea").css("margin-top", top);
                 }
             });
 
 
             app.on("extensions-menu-render", function(context) {
-                context.result += "<li><a id='scriptsMenuCommand'><i class='fa fa-cloud-download'></i></a></li>";
+                context.result += "<li><a id='scriptsMenuCommand' title='define custom script (mostly loading data)'><i data-position='right' data-intro='Use custom script to load data or modify inputs' class='fa fa-cloud-download'></i></a></li>";
 
                 context.on("after-render", function($el) {
                     $($el).find("#scriptsMenuCommand").click(function() {
@@ -59,4 +204,4 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
 
             app.on("entity-registration", entityRegistration);
         });
-    });
\ No newline at end of file
+    });
diff --git a/extension/scripts/public/js/main_embed_dev.js b/extension/scripts/public/js/main_embed_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..087a1f2759208f477b64b3527fc9b35c4504f48a
--- /dev/null
+++ b/extension/scripts/public/js/main_embed_dev.js
@@ -0,0 +1,75 @@
+/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */
+
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
+        "core/aceBinder", "./scripts.entityRegistration"],
+    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
+              aceBinder, entityRegistration) {
+
+        app.options.scripts = app.options.scripts || { allowChoosing: false};
+
+        return app.module("scripts", function (module) {
+
+            var TemplateView = ViewBase.extend({
+                template: "embed-scripts-template-extension",
+
+                initialize: function() {
+                    _.bindAll(this, "getItems");
+                    var self = this;
+                    this.listenTo(this.model, "change:shortid", function() {
+                        self.contentEditor.setOptions({
+                            readOnly: self.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
+                        });
+                    });
+
+                    this.listenTo(this, "animation-done", function() {
+                        self.fixAcePosition();
+                    });
+                },
+
+                getItems: function () {
+                    return this.model.items;
+                },
+
+                onDomRefresh: function() {
+                    this.contentEditor = ace.edit("contentArea");
+                    this.contentEditor.setTheme("ace/theme/chrome");
+                    this.contentEditor.getSession().setMode("ace/mode/javascript");
+                    this.contentEditor.setOptions({
+                        enableBasicAutocompletion: true,
+                        enableSnippets: true,
+                        readOnly: this.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
+                    });
+
+                    aceBinder(this.model, "content", this.contentEditor);
+
+                    this.fixAcePosition();
+                },
+
+                fixAcePosition: function() {
+                    var top = $("#contentWrap").position().top;
+                    $("#contentArea").css("margin-top", top);
+                }
+            });
+
+
+            app.on("extensions-menu-render", function(context) {
+                context.result += "<li><a id='scriptsMenuCommand' title='define custom script (mostly loading data)'><i data-position='right' data-intro='Use custom script to load data or modify inputs' class='fa fa-cloud-download'></i></a></li>";
+
+                context.on("after-render", function($el) {
+                    $($el).find("#scriptsMenuCommand").click(function() {
+                        var model = new TemplateStandardModel();
+                        model.setTemplate(context.template);
+
+                        model.fetch({ success: function () {
+                            var view = new TemplateView({ model: model});
+                            context.region.show(view, "scripts");
+                        }});
+                    });
+                });
+            });
+
+            app.on("entity-registration", entityRegistration);
+        });
+    });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 57653611ccac901fc4c62c29a36a404be75dade0..204f15a586d1c1e5ac0eda8d57a63f3af96d8775 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -4,8 +4,8 @@
         
         fetch: function (options) {
             var self = this;
-            
-            app.dataContext.scripts.toArray().then(function (items) {
+
+            function processItems(items) {
                 self.items = items.map(function(i) { return i.initData; });
 
                 var script = self.templateModel.get("script");
@@ -29,16 +29,22 @@
                 self.items.unshift(empty);
 
                 if (!script.content && !script.shortid)
-                    self.set(empty, { silent: true });
+                    self.set(custom, { silent: true });
 
                 if (script.shortid)
                     self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
 
                 if (script.content)
                     self.set(custom, { silent: true });
-                
-                 return options.success();
-            });
+
+                return options.success();
+            }
+
+            if (app.options.scripts.allowChoosing) {
+                app.dataContext.scripts.toArray().then(processItems);
+            } else {
+                processItems([]);
+            }
         },
 
         setTemplate: function (templateModel) {
diff --git a/extension/scripts/public/templates/embed-scripts-template-extension.html b/extension/scripts/public/templates/embed-scripts-template-extension.html
index e22df37698370425341ecc228855da7ac9beaa29..0cd6fb83bfe86d09bd3f1aadaaf0357f5751ae3d 100644
--- a/extension/scripts/public/templates/embed-scripts-template-extension.html
+++ b/extension/scripts/public/templates/embed-scripts-template-extension.html
@@ -1,16 +1,32 @@
-<div class="btn-group" data-binding="shortid">
-    <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
-    <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
-        <span class="caret"></span>
-    </button>
-    <ul class="dropdown-menu pull-right" role="menu">
-        {{for ~getItems()}}
-        <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
-        {{/for}}
-    </ul>
+<div class="extended-menu-options">
+    <div>
+        <a class='fa fa-lightbulb-o' href="http://jsreport.net/learn/scripts" target="_blank" title="Here you can define a custom javascript that will run on the server before report rendering. This could be used to load input data from the remote system. Click to see documentation.">
+            <span style="margin-left:5px">
+                Custom script (hover)
+            </span>
+        </a>
+    </div>
+
+    {{if ~getApp().options.scripts.allowChoosing}}
+    <div class="btn-group" data-binding="shortid">
+        <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
+            <span class="caret"></span>
+        </button>
+        <ul class="dropdown-menu pull-right">
+            {{for ~getItems()}}
+            <li><a data-value="{{:shortid}}">{{:name}}</a></li>
+            {{/for}}
+        </ul>
+    </div>
+    {{else}}{{/if}}
+</div>
+
+
+<div id="contentWrap">
+    <div id="contentArea" class="full-content-menu">{{:content}}</div>
 </div>
 
-<div id="contentArea" class="full-content-top-gap">{{:content}}</div>
 
 
 

From 86f4649c0ec54ee98381f6e22f6d6a219bb70555 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 09:56:33 +0100
Subject: [PATCH] removing files being built

---
 extension/scripts/public/js/main_embed.js | 207 ------------------------------
 1 file changed, 207 deletions(-)

diff --git a/extension/scripts/public/js/main_embed.js b/extension/scripts/public/js/main_embed.js
deleted file mode 100644
index d34b31f04f5e6cca3d6757cf75bcdb96fc78e377..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/main_embed.js
+++ /dev/null
@@ -1,207 +0,0 @@
-define('scripts.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-
-            function processItems(items) {
-                self.items = items.map(function(i) { return i.initData; });
-
-                var script = self.templateModel.get("script");
-
-                if (!script) {
-                    script = new $entity.ScriptRefType();
-
-                    //back compatibility
-                    if (self.templateModel.get("scriptId")) {
-                        script.shortid = self.templateModel.get("scriptId");
-                    }
-
-                    self.templateModel.set("script", script);
-                }
-
-
-                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
-                self.items.unshift(custom);
-
-                var empty = { name: "- not selected -", shortid: null };
-                self.items.unshift(empty);
-
-                if (!script.content && !script.shortid)
-                    self.set(custom, { silent: true });
-
-                if (script.shortid)
-                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
-
-                if (script.content)
-                    self.set(custom, { silent: true });
-
-                return options.success();
-            }
-
-            if (app.options.scripts.allowChoosing) {
-                app.dataContext.scripts.toArray().then(processItems);
-            } else {
-                processItems([]);
-            }
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
-        },
-
-        newCustomScript: function() {
-
-        },
- 
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.get("script").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
-                self.templateModel.get("script").content = self.get("shortid") === "custom" ? self.get("content") : undefined;
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-
-            this.listenTo(this, "change:content", function() {
-                if (self.get("shortid") === "custom") {
-                    self.templateModel.get("script").content = self.get("content");
-                    _.findWhere(self.items, { shortid: "custom" }).content = self.get("content");
-                }
-            });
-        }
-    });
-});
-define('scripts.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "scripts-template-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.get("shortid") || this.model.get("content");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('scripts.entityRegistration',[], function() {
-    return function(context) {
-        $data.Class.define("$entity.Script", $data.Entity, null, {
-            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-            'content': { 'type': 'Edm.String' },
-            'name': { 'type': 'Edm.String' },
-            'shortid': { 'type': 'Edm.String' },
-            "creationDate": { type: "date" },
-            "modificationDate": { type: "date" }
-        }, null);
-
-        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-            content: { type: 'Edm.String' },
-            shortid: { type: 'Edm.String' }
-        });
-
-        $entity.Script.prototype.toString = function () {
-            return "Script " + (this.name || "");
-        };
-
-        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-        //back compatibility
-        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-
-        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-    }
-});
-/*! 
- * Copyright(c) 2014 Jan Blaha 
- */
-
-define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "scripts.template.standard.model", "scripts.template.standard.view",
-        "core/aceBinder", "scripts.entityRegistration"],
-    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
-              aceBinder, entityRegistration) {
-
-        app.options.scripts = app.options.scripts || { allowChoosing: false};
-
-        return app.module("scripts", function (module) {
-
-            var TemplateView = ViewBase.extend({
-                template: "embed-scripts-template-extension",
-
-                initialize: function() {
-                    _.bindAll(this, "getItems");
-                    var self = this;
-                    this.listenTo(this.model, "change:shortid", function() {
-                        self.contentEditor.setOptions({
-                            readOnly: self.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
-                        });
-                    });
-
-                    this.listenTo(this, "animation-done", function() {
-                        self.fixAcePosition();
-                    });
-                },
-
-                getItems: function () {
-                    return this.model.items;
-                },
-
-                onDomRefresh: function() {
-                    this.contentEditor = ace.edit("contentArea");
-                    this.contentEditor.setTheme("ace/theme/chrome");
-                    this.contentEditor.getSession().setMode("ace/mode/javascript");
-                    this.contentEditor.setOptions({
-                        enableBasicAutocompletion: true,
-                        enableSnippets: true,
-                        readOnly: this.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
-                    });
-
-                    aceBinder(this.model, "content", this.contentEditor);
-
-                    this.fixAcePosition();
-                },
-
-                fixAcePosition: function() {
-                    var top = $("#contentWrap").position().top;
-                    $("#contentArea").css("margin-top", top);
-                }
-            });
-
-
-            app.on("extensions-menu-render", function(context) {
-                context.result += "<li><a id='scriptsMenuCommand' title='define custom script (mostly loading data)'><i data-position='right' data-intro='Use custom script to load data or modify inputs' class='fa fa-cloud-download'></i></a></li>";
-
-                context.on("after-render", function($el) {
-                    $($el).find("#scriptsMenuCommand").click(function() {
-                        var model = new TemplateStandardModel();
-                        model.setTemplate(context.template);
-
-                        model.fetch({ success: function () {
-                            var view = new TemplateView({ model: model});
-                            context.region.show(view, "scripts");
-                        }});
-                    });
-                });
-            });
-
-            app.on("entity-registration", entityRegistration);
-        });
-    });

From c4d7814a28d413b08579b02526e9b4685b21900a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 09:59:25 +0100
Subject: [PATCH] remove files being built

---
 extension/scripts/.gitignore | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/.gitignore b/extension/scripts/.gitignore
index 3dede11cceae4c048a5d3b3ace2b81ce47b6e2a6..9b57ea946cd37bcaa9e096b7cab28123780bb353 100644
--- a/extension/scripts/.gitignore
+++ b/extension/scripts/.gitignore
@@ -1,2 +1,2 @@
 public/js/main.js
-public/js/main_built.js
\ No newline at end of file
+public/js/main_embed.js
\ No newline at end of file

From b42a24156e24cad3eaa8129de4fb1aa614087a13 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 11:43:50 +0100
Subject: [PATCH] fixing all jshint errors

---
 extension/scripts/lib/scriptEvalChild.js                     |  2 +-
 extension/scripts/lib/scripts.js                             | 12 ++++++------
 extension/scripts/public/js/main_dev.js                      |  6 ------
 extension/scripts/public/js/scripts.detail.view.js           |  2 +-
 extension/scripts/public/js/scripts.entityRegistration.js    |  2 +-
 extension/scripts/public/js/scripts.list.model.js            |  2 +-
 extension/scripts/public/js/scripts.list.toolbar.view.js     |  4 ++--
 extension/scripts/public/js/scripts.list.view.js             |  2 +-
 extension/scripts/public/js/scripts.model.js                 |  4 ++--
 .../scripts/public/js/scripts.template.standard.view.js      |  2 +-
 extension/scripts/public/js/scripts.toolbar.view.js          |  4 ++--
 11 files changed, 18 insertions(+), 24 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index e6e304fe1372b40eea39e8cadba46c1b6929eca1..ec5ef6448ef70f9be94ef7bab3c8e456922bf15b 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -8,7 +8,7 @@
         var modules = req.body.allowedModules.filter(function (mod) {
             return (mod.id || mod) === moduleName;
         });
-        if (modules.length == 1) {
+        if (modules.length === 1) {
             return require(modules[0].path || modules[0]);
         }
 
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 47019eee3ea10986edd808ce8c0b8ecdbf7efdbd..d8ab5a942c93fc80d539d1a554367e6ecc35daea 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -9,10 +9,6 @@ var shortid = require("shortid"),
     path = require("path"),
     q = require("q");
 
-module.exports = function (reporter, definition) {
-    reporter[definition.name] = new Scripts(reporter, definition);
-};
-
 var Scripts = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
@@ -37,7 +33,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 
     //back compatibility
     if (!request.template.script && request.template.scriptId) {
-        request.template.script = { shortid: request.template.scriptId}
+        request.template.script = { shortid: request.template.scriptId};
     }
 
     if (!request.template.script || (!request.template.script.shortid && !request.template.script.content)) {
@@ -120,4 +116,8 @@ Scripts.prototype._defineEntities = function() {
     this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
 
     this.reporter.dataProvider.registerEntitySet("scripts", this.ScriptType, { tableOptions: { humanReadableKeys: [ "shortid"] }  });
-}
\ No newline at end of file
+};
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Scripts(reporter, definition);
+};
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index 84aa61709cc59b34526e4e78c16c6841cbcda403..fa87f30defcb8e7445d2cb5de6edc0d70c903f1e 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -44,12 +44,6 @@
                         model.set("shortid", id);
                         model.fetch();
                     }
-                },
-
-                scriptsCreate: function () {
-                    app.layout.dialog.show(new ScriptsCreateView({
-                        model: new ScriptsModel()
-                    }));
                 }
             });
 
diff --git a/extension/scripts/public/js/scripts.detail.view.js b/extension/scripts/public/js/scripts.detail.view.js
index 1a312eac3e4f9c19cb867cd7e7f35ea60297b784..636263d98b2693dd760803010205d091d84a1957 100644
--- a/extension/scripts/public/js/scripts.detail.view.js
+++ b/extension/scripts/public/js/scripts.detail.view.js
@@ -25,6 +25,6 @@
 
         validateLeaving: function() {
             return !this.model.hasChangesSyncLastSync();
-        },
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.entityRegistration.js b/extension/scripts/public/js/scripts.entityRegistration.js
index 88a1ba07570f1884a5dd914a76ed5f126cbdb353..c1228e2c0aba818f4ee80dcd52e35457d042592f 100644
--- a/extension/scripts/public/js/scripts.entityRegistration.js
+++ b/extension/scripts/public/js/scripts.entityRegistration.js
@@ -23,5 +23,5 @@ define([], function() {
         $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
 
         context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-    }
+    };
 })
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.list.model.js b/extension/scripts/public/js/scripts.list.model.js
index e187a2dadfb503abeab61c997acaf81d6d05f9f5..5f780ae0272330db56a96540b0d9afc1cefff3d3 100644
--- a/extension/scripts/public/js/scripts.list.model.js
+++ b/extension/scripts/public/js/scripts.list.model.js
@@ -20,7 +20,7 @@
             return app.dataContext.scripts.applyFilter(this.filter).toArray();
         },
 
-        model: ScriptModel,
+        model: ScriptModel
     });
 });
 
diff --git a/extension/scripts/public/js/scripts.list.toolbar.view.js b/extension/scripts/public/js/scripts.list.toolbar.view.js
index d37f0c4cc584ab75be177ad8fa616dd3938b7e6b..17e8ff1c70eed1f161b719995497f2352a93a023 100644
--- a/extension/scripts/public/js/scripts.list.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.list.toolbar.view.js
@@ -7,11 +7,11 @@
             },         
             
             events: {
-                "click #deleteCommand": "deleteCommand",
+                "click #deleteCommand": "deleteCommand"
             },
 
             deleteCommand: function() {
                 this.contentView.dataGrid.deleteItems();
-            },
+            }
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.list.view.js b/extension/scripts/public/js/scripts.list.view.js
index 27d83dde1bea32b39fdf97ef8be23dbf5ba37e18..0696f019536db4b86f7a93bb64a6b0cb7e104557 100644
--- a/extension/scripts/public/js/scripts.list.view.js
+++ b/extension/scripts/public/js/scripts.list.view.js
@@ -19,6 +19,6 @@
                 headerTemplate: "scripts-list-header",
                 rowsTemplate: "scripts-list-rows"
             });
-        },
+        }
     });
 }); 
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index bb40e732b047b4baf466d46ed2c779588237483a..5d349f215d05f7ba67e6ca24e99564901c9c92fa 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -3,7 +3,7 @@
         contextSet: function () { return app.dataContext.scripts; },
 
        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+            return this.contextSet().single(function(r) { return r.shortid === this.id; }, { id: this.get("shortid") });
         },    
         
         setTemplateModel: function(templateModel) {
@@ -12,7 +12,7 @@
         
         _initialize: function () {
             this.Entity = $entity.Script;
-        },
+        }
     });
 });
 
diff --git a/extension/scripts/public/js/scripts.template.standard.view.js b/extension/scripts/public/js/scripts.template.standard.view.js
index f299ad0c64e1bb49a47ea340cc4f18c8e24680cc..a60cb59e054c2dd4525ddbd276cc67b4253e40f6 100644
--- a/extension/scripts/public/js/scripts.template.standard.view.js
+++ b/extension/scripts/public/js/scripts.template.standard.view.js
@@ -1,4 +1,4 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
+﻿define(["app", "underscore", "marionette", "core/view.base", "core/utils"], function(app, _, Marionette, ViewBase, Utils) {
     return ViewBase.extend({
         tagName: "li",
         template: "scripts-template-standard",
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index 65479c09c0866d1626c47db3b38a8bf45e9287ee..6f2750c7d04ea29b42ee88f0d70ca4eb7737089c 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -8,7 +8,7 @@
             },
 
             events: {
-                "click #saveCommand": "save",
+                "click #saveCommand": "save"
             },
 
             save: function() {
@@ -38,7 +38,7 @@
             onValidate: function() {
                 var res = [];
                 
-                if (this.model.get("name") == null || this.model.get("name") == "")
+                if (this.model.get("name") == null || this.model.get("name") === "")
                     res.push({
                         message: "Name cannot be empty"
                     });

From 4da5550562d83eee24890f060e6e6511603f5c07 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 19:47:34 +0100
Subject: [PATCH] embed version refactoring

---
 extension/scripts/public/js/main_dev.js                     |  2 +-
 extension/scripts/public/js/main_embed_dev.js               |  5 +++--
 .../scripts/public/js/scripts.template.standard.model.js    | 13 ++++++++-----
 .../public/templates/embed-scripts-template-extension.html  |  2 +-
 4 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index fa87f30defcb8e7445d2cb5de6edc0d70c903f1e..c988f4fb538ad6008e6441e0b5c5175332a123f7 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -7,7 +7,7 @@
               ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView,
               entityRegistration) {
 
-        app.options.scripts = app.options.scripts || { allowChoosing: false};
+        app.options.scripts = app.options.scripts || { allowSelection: true , allowCustom: false};
 
         app.module("scripts", function (module) {
 
diff --git a/extension/scripts/public/js/main_embed_dev.js b/extension/scripts/public/js/main_embed_dev.js
index 087a1f2759208f477b64b3527fc9b35c4504f48a..53656765971ae0375130715cd3023f012d94900f 100644
--- a/extension/scripts/public/js/main_embed_dev.js
+++ b/extension/scripts/public/js/main_embed_dev.js
@@ -7,7 +7,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
     function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
               aceBinder, entityRegistration) {
 
-        app.options.scripts = app.options.scripts || { allowChoosing: false};
+        app.options.scripts = $.extend(app.options.scripts, { allowSelection: false, allowCustom: true}, app.options.scripts);
 
         return app.module("scripts", function (module) {
 
@@ -19,7 +19,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     var self = this;
                     this.listenTo(this.model, "change:shortid", function() {
                         self.contentEditor.setOptions({
-                            readOnly: self.model.get("shortid") !== "custom" && app.options.scripts.allowChoosing
+                            readOnly: self.model.get("shortid") !== "custom" && app.options.scripts.allowSelection
                         });
                     });
 
@@ -59,6 +59,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
 
                 context.on("after-render", function($el) {
                     $($el).find("#scriptsMenuCommand").click(function() {
+                        console.log(app.options.scripts.allowSelection);
                         var model = new TemplateStandardModel();
                         model.setTemplate(context.template);
 
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 204f15a586d1c1e5ac0eda8d57a63f3af96d8775..b76a89ed8f46559595cb678a2673ee16d2a83dc8 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -22,25 +22,28 @@
                 }
 
 
-                var custom = { name: "- custom -", shortid: "custom", content:   script.content};
-                self.items.unshift(custom);
+                var custom;
+                if (app.options.scripts.allowCustom) {
+                    custom = {name: "- custom -", shortid: "custom", content: script.content};
+                    self.items.unshift(custom);
+                }
 
                 var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
                 if (!script.content && !script.shortid)
-                    self.set(custom, { silent: true });
+                    self.set(custom || empty, { silent: true });
 
                 if (script.shortid)
                     self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
 
                 if (script.content)
-                    self.set(custom, { silent: true });
+                    self.set(custom || empty, { silent: true });
 
                 return options.success();
             }
 
-            if (app.options.scripts.allowChoosing) {
+            if (app.options.scripts.allowSelection) {
                 app.dataContext.scripts.toArray().then(processItems);
             } else {
                 processItems([]);
diff --git a/extension/scripts/public/templates/embed-scripts-template-extension.html b/extension/scripts/public/templates/embed-scripts-template-extension.html
index 0cd6fb83bfe86d09bd3f1aadaaf0357f5751ae3d..4c11d7d478877d3159b5c6ea3df241f2ef172795 100644
--- a/extension/scripts/public/templates/embed-scripts-template-extension.html
+++ b/extension/scripts/public/templates/embed-scripts-template-extension.html
@@ -7,7 +7,7 @@
         </a>
     </div>
 
-    {{if ~getApp().options.scripts.allowChoosing}}
+    {{if ~getApp().options.scripts.allowSelection}}
     <div class="btn-group" data-binding="shortid">
         <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
         <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">

From 2d85c4e641f7ea00daef0279bcccb671351719be Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Mon, 8 Dec 2014 08:03:56 +0100
Subject: [PATCH] running scripts after report rendering

---
 extension/scripts/lib/scriptEvalChild.js |  8 +++++--
 extension/scripts/lib/scripts.js         | 38 +++++++++++++++++++++++++++++++-
 2 files changed, 43 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index ec5ef6448ef70f9be94ef7bab3c8e456922bf15b..b2238fc8289127ad4df79a324cfebdaf7c21eea9 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -1,5 +1,6 @@
 ﻿module.exports = function (req, res, next) {
 
+    var vm = require('vm');
 
     var _require = function (moduleName) {
         //we want to allow only listed modules to stay secure
@@ -15,7 +16,7 @@
         throw new Error("Unsupported module " + moduleName);
     };
 
-    var vm = require('vm');
+
     var sandbox = {
         request: req.body.request,
         response: req.body.response,
@@ -34,5 +35,8 @@
         }
     };
 
-    vm.runInNewContext(req.body.script, sandbox);
+    var runBeforeRender = "\nif (typeof beforeRender === 'function') { beforeRender(done); } else { done(); }";
+    var runAfterRender = "\nif (typeof afterRender === 'function') { afterRender(done); } else { done(); }";
+
+    vm.runInNewContext(req.body.script + (req.body.method === "beforeRender" ? runBeforeRender : runAfterRender), sandbox);
 };
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index d8ab5a942c93fc80d539d1a554367e6ecc35daea..464357147aa8093e8b1d50afd0deab558ad8d6f6 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -16,8 +16,9 @@ var Scripts = function (reporter, definition) {
     this._defineEntities();
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
+    this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
-    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore", "constants"];
+    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
 };
 
 Scripts.prototype.create = function (context, script) {
@@ -28,6 +29,38 @@ Scripts.prototype.create = function (context, script) {
     });
 };
 
+Scripts.prototype.handleAfterRender = function (request, response) {
+    if (!request.parsedScript)
+        return;
+
+    var self = this;
+
+    return request.reporter.taskManager.execute({
+            body: {
+                script: request.parsedScript,
+                allowedModules: self.allowedModules,
+                method: "afterRender",
+                request: {
+                    data: request.data,
+                    template: {
+                        content: request.template.content,
+                        helpers: request.template.helpers
+                    },
+                    headers: request.headers
+                },
+                response: {
+                    headers: response.headers,
+                    content: response.result
+                }
+            },
+            execModulePath: path.join(__dirname, "scriptEvalChild.js"),
+            timeout: 60000
+        }).then(function (body) {
+            response.headers = body.response.headers;
+            //response.result = body.response.content;
+        });
+};
+
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
@@ -55,10 +88,13 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     return findScript().then(function (script) {
         script = script.content || script;
 
+        request.parsedScript = script;
+
         return request.reporter.taskManager.execute({
             body: {
                 script: script,
                 allowedModules: self.allowedModules,
+                method: "beforeRender",
                 request: {
                     data: request.data,
                     template: {

From 133364e63c59ac633364a4562a64312458ee5993 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 10 Dec 2014 10:20:57 +0100
Subject: [PATCH] scheduling for multiple servers, finishing scripts updates

---
 extension/scripts/lib/scriptEvalChild.js | 23 +++++++++-
 extension/scripts/lib/scripts.js         | 45 ++++++++++++------
 extension/scripts/test/scriptsTest.js    | 79 ++++++++++++++++++++++++++------
 3 files changed, 117 insertions(+), 30 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index b2238fc8289127ad4df79a324cfebdaf7c21eea9..b1c8d2282f98070763988acec5b10bb72c13905d 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -16,16 +16,35 @@
         throw new Error("Unsupported module " + moduleName);
     };
 
+    req.body.request.cancel = function(e) {
+        res.send({
+            cancelRequest: true,
+            additionalInfo: e
+        });
+    };
 
     var sandbox = {
         request: req.body.request,
         response: req.body.response,
         require: _require,
+        setTimeout: setTimeout,
         Buffer: Buffer,
+        doneMethods: function(err){
+            res.send({
+                request: req.body.request,
+                response: req.body.response,
+                shouldRunAfterRender: true,
+                error: err ? {
+                    message: err.message,
+                    stack: err.stack
+                } : undefined
+            });
+        },
         done: function (err) {
             res.send({
                 request: req.body.request,
                 response: req.body.response,
+                shouldRunAfterRender: false,
                 error: err ? {
                     message: err.message,
                     stack: err.stack
@@ -35,8 +54,8 @@
         }
     };
 
-    var runBeforeRender = "\nif (typeof beforeRender === 'function') { beforeRender(done); } else { done(); }";
-    var runAfterRender = "\nif (typeof afterRender === 'function') { afterRender(done); } else { done(); }";
+    var runBeforeRender = "\nif (typeof beforeRender === 'function') { beforeRender(doneMethods); } else { if (typeof afterRender === 'function') doneMethods(); }";
+    var runAfterRender = "\nif (typeof afterRender === 'function') { afterRender(doneMethods); } else { done(); }";
 
     vm.runInNewContext(req.body.script + (req.body.method === "beforeRender" ? runBeforeRender : runAfterRender), sandbox);
 };
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 464357147aa8093e8b1d50afd0deab558ad8d6f6..88c4e807d08d131234a5e268705dc84ccce40f7d 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -7,18 +7,20 @@
 var shortid = require("shortid"),
     _ = require("underscore"),
     path = require("path"),
-    q = require("q");
+    q = require("q"),
+    extend = require("node.extend");
 
 var Scripts = function (reporter, definition) {
     this.reporter = reporter;
     this.definition = definition;
+    this.definition.options.timeout = this.definition.options.timeout || 30000;
 
     this._defineEntities();
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
-    this.allowedModules = ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
+    this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
 };
 
 Scripts.prototype.create = function (context, script) {
@@ -31,7 +33,7 @@ Scripts.prototype.create = function (context, script) {
 
 Scripts.prototype.handleAfterRender = function (request, response) {
     if (!request.parsedScript)
-        return;
+        return q();
 
     var self = this;
 
@@ -54,10 +56,10 @@ Scripts.prototype.handleAfterRender = function (request, response) {
                 }
             },
             execModulePath: path.join(__dirname, "scriptEvalChild.js"),
-            timeout: 60000
+            timeout: self.definition.options.timeout
         }).then(function (body) {
             response.headers = body.response.headers;
-            //response.result = body.response.content;
+            response.result = new Buffer(body.response.content);
         });
 };
 
@@ -97,21 +99,38 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                 method: "beforeRender",
                 request: {
                     data: request.data,
-                    template: {
-                        content: request.template.content,
-                        helpers: request.template.helpers
-                    },
+                    template: request.template,
                     headers: request.headers
                 },
                 response: response
             },
             execModulePath: path.join(__dirname, "scriptEvalChild.js"),
-            timeout: 60000
+            timeout: self.definition.options.timeout
         }).then(function(body) {
-            request.data = body.request.data;
-            request.template.content = body.request.template.content;
-            request.template.helpers = body.request.template.helpers;
+            if (body.cancelRequest) {
+                var error = new Error("Rendering request canceled  from the script " + body.additionalInfo);
+                error.weak = true;
+                return q.reject(error);
+            }
+            if (!body.shouldRunAfterRender) {
+                request.parsedScript = null;
+            }
+
+            function merge(obj, obj2) {
+                for (var key in obj2) {
+                    if (typeof obj2[key] === undefined)
+                        continue;
+
+                    if (typeof obj2[key] !== 'object') {
+                        obj[key] = obj2[key];
+                    } else {
+                        merge(obj[key], obj2[key]);
+                    }
+                }
+            }
+            console.log(body.request.template.content);
 
+            merge(request, body.request);
             return response;
         });
     });
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 0bd3eabc695fdd05fd75b75ece1615587380ea2c..dc9ba5223bc299ff5b54efc21135e8b677358219 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -9,38 +9,38 @@ var assert = require("assert"),
 describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts"], function (reporter) {
 
     describe('scripts', function () {
-        
+
         function prepareTemplate(scriptContent) {
-            var script = new reporter.scripts.ScriptType({ content: scriptContent });
+            var script = new reporter.scripts.ScriptType({content: scriptContent});
             reporter.context.scripts.add(script);
             return reporter.context.scripts.saveChanges().then(function () {
                 return reporter.templates.create({
                     content: "foo",
-                    script: { shortid: script.shortid }
+                    script: {shortid: script.shortid}
                 });
             });
         }
-        
+
         function prepareRequest(scriptContent) {
-            return prepareTemplate(scriptContent).then(function(template) {
+            return prepareTemplate(scriptContent).then(function (template) {
                 return q({
-                    request: { template: template, context: reporter.context, reporter : reporter },
+                    request: {template: template, context: reporter.context, reporter: reporter},
                     response: {}
                 });
             });
         }
 
         it('shoulb be able to modify request.data', function (done) {
-            prepareRequest("request.data = 'xxx'; done()").then(function(res) {
+            prepareRequest("request.data = 'xxx'; done()").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.data);
                     done();
                 });
             }).catch(done);
         });
-        
-         it('shoulb be able to modify request.template.content', function (done) {
-            prepareRequest("request.template.content = 'xxx'; done()").then(function(res) {
+
+        it('shoulb be able to modify request.template.content', function (done) {
+            prepareRequest("request.template.content = 'xxx'; done()").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.template.content);
                 });
@@ -54,7 +54,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 "done();";
 
             prepareRequest(scriptContent).then(function (res) {
-                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function() {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('foo', res.request.template.content);
                     done();
                 });
@@ -66,13 +66,62 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 "fs.readdir('d:\', function(err, files) { response.filesLength = files.length; done(); });";
 
             prepareRequest(scriptContent)
-                .then(function(res) {
+                .then(function (res) {
                     return reporter.scripts.handleBeforeRender(res.request, res.response);
-                }).then(function() {
-                        done(new Error('no error was thrown when it should have been'));
-                }).catch(function() {
+                }).then(function () {
+                    done(new Error('no error was thrown when it should have been'));
+                }).catch(function () {
+                    done();
+                });
+        });
+
+        it('should be able to processes async test', function (done) {
+            prepareRequest("setTimeout(function(){ request.template.content = 'xxx'; done(); }, 10);").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.request.template.content);
+                    done();
+                });
+            }).catch(done);
+        });
+
+        it('should be able to processes beforeRender function', function (done) {
+            prepareRequest("function beforeRender(done){ request.template.content = 'xxx'; done(); }").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.request.template.content);
                     done();
                 });
+            }).catch(done);
+        });
+
+        it('should be able to processes afterRender function', function (done) {
+            prepareRequest("function afterRender(done){ response.content[0] = 1; done(); }").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    res.response.result = new Buffer([1]);
+                    return reporter.scripts.handleAfterRender(res.request, res.response).then(function () {
+                        assert.equal(1, res.response.result[0]);
+                        done();
+                    });
+                });
+            }).catch(done);
+        });
+
+        it('should be able to add property to request', function (done) {
+            prepareRequest("request.foo = 'xxx'; done(); ").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.request.foo);
+                    done();
+                });
+            }).catch(done);
+        });
+
+        it('should be able to cancel request', function (done) {
+            prepareRequest("request.cancel();").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    done(new Error('no error was thrown when it should have been'));
+                });
+            }).catch(function() {
+                done();
+            });
         });
     });
 });
\ No newline at end of file

From e29b523174baf64b74b603d162fdca96e96781b8 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 16 Dec 2014 11:26:17 +0100
Subject: [PATCH] fixing complex data merging in scripts

---
 extension/scripts/lib/scripts.js      |  3 +--
 extension/scripts/test/scriptsTest.js | 17 +++++++++++++----
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 88c4e807d08d131234a5e268705dc84ccce40f7d..1c66f5c9d262a8cb79e6100a94b7c95668ac67c2 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -121,14 +121,13 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                     if (typeof obj2[key] === undefined)
                         continue;
 
-                    if (typeof obj2[key] !== 'object') {
+                    if (typeof obj2[key] !== 'object' || typeof obj[key] === 'undefined') {
                         obj[key] = obj2[key];
                     } else {
                         merge(obj[key], obj2[key]);
                     }
                 }
             }
-            console.log(body.request.template.content);
 
             merge(request, body.request);
             return response;
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index dc9ba5223bc299ff5b54efc21135e8b677358219..406ec6955c824a1e9309d6797cc2caca44129757 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -30,7 +30,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
             });
         }
 
-        it('shoulb be able to modify request.data', function (done) {
+        it('should be able to modify request.data', function (done) {
             prepareRequest("request.data = 'xxx'; done()").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.data);
@@ -39,7 +39,16 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
             }).catch(done);
         });
 
-        it('shoulb be able to modify request.template.content', function (done) {
+        it('should be able to modify complex request.data', function (done) {
+            prepareRequest("request.data = { a: 'xxx' }; done()").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    assert.equal('xxx', res.request.data.a);
+                    done();
+                });
+            }).catch(done);
+        });
+
+        it('should be able to modify request.template.content', function (done) {
             prepareRequest("request.template.content = 'xxx'; done()").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     assert.equal('xxx', res.request.template.content);
@@ -47,7 +56,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
             }).fin(done);
         });
 
-        it('shoulb be able to use linked modules', function (done) {
+        it('should be able to use linked modules', function (done) {
             var scriptContent = "var h = require('handlebars'); " +
                 "var compiledTemplate = h.compile('foo'); " +
                 "request.template.content = compiledTemplate();" +
@@ -61,7 +70,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
             }).catch(done);
         });
 
-        it('shoulb not be able to read local files', function (done) {
+        it('should not be able to read local files', function (done) {
             var scriptContent = "var fs = require('fs'); " +
                 "fs.readdir('d:\', function(err, files) { response.filesLength = files.length; done(); });";
 

From dea5268e0f03e0160be69f752509d4e09ab6f55f Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 16 Dec 2014 23:49:18 +0100
Subject: [PATCH] fix #36

---
 extension/scripts/test/scriptsTest.js | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 406ec6955c824a1e9309d6797cc2caca44129757..8988da797bb924f5e5d8b11255dd37a363f2636c 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -2,6 +2,7 @@
 
 var assert = require("assert"),
     path = require("path"),
+    should = require("should"),
     describeReporting = require("../../../test/helpers.js").describeReporting,
     q = require("q");
 
@@ -132,5 +133,19 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 done();
             });
         });
+
+        it('should propagate exception from async back', function (done) {
+            prepareRequest("setTimeout(function() { foo; }, 0);").then(function (res) {
+                return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
+                    done(new Error('no error was thrown when it should have been'));
+                });
+            }).catch(function(e) {
+                try {
+                    e.message.should.containEql("foo");
+                }
+                catch(e) { return done(e);}
+                done();
+            });
+        });
     });
 });
\ No newline at end of file

From 0f040daabb21ee9bb6768b06ca5a83d084ef7d41 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 20 Dec 2014 13:13:59 +0100
Subject: [PATCH] fixing minor bugs and improving .net embedded integration

---
 extension/scripts/public/js/scripts.template.standard.model.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index b76a89ed8f46559595cb678a2673ee16d2a83dc8..9ee43b7e36997c723b92d5b10c70d11af5861ccb 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -56,7 +56,7 @@
         },
         
         apiOverride: function(addProperty) {
-             addProperty("scriptId", this.get("shortid"));
+             addProperty("script", { shortid: this.get("shortid"), content: '....' });
         },
 
         newCustomScript: function() {

From 1e2806c4f0ff177653201dca876542d578587d4b Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 13 Jan 2015 20:54:35 +0100
Subject: [PATCH] sharing templates, wrapped recipes

---
 extension/scripts/lib/scripts.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 1c66f5c9d262a8cb79e6100a94b7c95668ac67c2..6b72bdeebed7befaa0b285ee10c4c7ddbe6f0e38 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -1,7 +1,7 @@
 ﻿/*! 
  * Copyright(c) 2014 Jan Blaha 
  *
- * Extension allowing to run custom scripts and modify request before rendering process starts.
+ * Extension allowing to add custom javascript hooks into the rendering process.
  */
 
 var shortid = require("shortid"),

From 786c46cb223cc96a3b4e08183b63aeaea51861c3 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 20 Jan 2015 15:26:55 +0100
Subject: [PATCH] users management

---
 extension/scripts/public/js/scripts.model.js       |  4 ++++
 .../scripts/public/js/scripts.toolbar.view.js      | 22 ++++++++++++++++++++--
 .../scripts/public/templates/scripts-toolbar.html  |  2 +-
 3 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index 5d349f215d05f7ba67e6ca24e99564901c9c92fa..412731fff4e1f2b9fb11d6ccfd02b7e6b061475a 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -12,6 +12,10 @@
         
         _initialize: function () {
             this.Entity = $entity.Script;
+        },
+
+        toString: function() {
+            return "Script " + (this.get("name") || "");
         }
     });
 });
diff --git a/extension/scripts/public/js/scripts.toolbar.view.js b/extension/scripts/public/js/scripts.toolbar.view.js
index 6f2750c7d04ea29b42ee88f0d70ca4eb7737089c..749bb7248c2a76adcafd69fd983e6de60b6a13c2 100644
--- a/extension/scripts/public/js/scripts.toolbar.view.js
+++ b/extension/scripts/public/js/scripts.toolbar.view.js
@@ -1,16 +1,34 @@
-﻿define(["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
+﻿define(["jquery", "app", "marionette", "core/utils", "core/view.base"],
+    function($, app, Marionette, Utils, LayoutBase) {
         return LayoutBase.extend({
             template: "scripts-toolbar",
 
             initialize: function() {
                 $(document).on('keydown.script-detail', this.hotkey.bind(this));
+
+                var self = this;
+                this.listenTo(this, "render", function() {
+                    var contextToolbar = {
+                        name: "script-detail",
+                        model: self.model,
+                        region: self.extensionsToolbarRegion,
+                        view: self
+                    };
+                    app.trigger("toolbar-render", contextToolbar);
+                });
             },
 
             events: {
                 "click #saveCommand": "save"
             },
 
+            regions: {
+                extensionsToolbarRegion: {
+                    selector: "#extensionsToolbarBox",
+                    regionType: Marionette.MultiRegion
+                }
+            },
+
             save: function() {
                 if (!this.validate())
                     return;
diff --git a/extension/scripts/public/templates/scripts-toolbar.html b/extension/scripts/public/templates/scripts-toolbar.html
index a14cd744fed698debb3c60456275ee60fbf4d32c..96f952c22061a76380eb06e41723471abeac4711 100644
--- a/extension/scripts/public/templates/scripts-toolbar.html
+++ b/extension/scripts/public/templates/scripts-toolbar.html
@@ -1,5 +1,5 @@
 ﻿<div class="navbar-header submenu">
-    <ul class="nav navbar-nav sub-header">
+    <ul class="nav navbar-nav sub-header" id="extensionsToolbarBox">
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
     <ul class="nav navbar-nav sub-header pull-right">

From 3425ab1f06e733541c76a71cb942403f6471dcda Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 24 Jan 2015 22:37:06 +0100
Subject: [PATCH] finishing release with user management

---
 extension/scripts/lib/scripts.js              | 4 +++-
 extension/scripts/public/js/main_embed_dev.js | 1 -
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 6b72bdeebed7befaa0b285ee10c4c7ddbe6f0e38..dd9d2882e327ccf7d47cbb78a6f0bbe4440c9441 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -48,6 +48,7 @@ Scripts.prototype.handleAfterRender = function (request, response) {
                         content: request.template.content,
                         helpers: request.template.helpers
                     },
+                    options: request.options,
                     headers: request.headers
                 },
                 response: {
@@ -100,7 +101,8 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                 request: {
                     data: request.data,
                     template: request.template,
-                    headers: request.headers
+                    headers: request.headers,
+                    options: request.options
                 },
                 response: response
             },
diff --git a/extension/scripts/public/js/main_embed_dev.js b/extension/scripts/public/js/main_embed_dev.js
index 53656765971ae0375130715cd3023f012d94900f..b3708f0eb8e20281c65c33e22ba6c1ceb6aaf042 100644
--- a/extension/scripts/public/js/main_embed_dev.js
+++ b/extension/scripts/public/js/main_embed_dev.js
@@ -59,7 +59,6 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
 
                 context.on("after-render", function($el) {
                     $($el).find("#scriptsMenuCommand").click(function() {
-                        console.log(app.options.scripts.allowSelection);
                         var model = new TemplateStandardModel();
                         model.setTemplate(context.template);
 

From 8de2c54ec35470618e47c25bb04212182ef5ab11 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 26 Mar 2015 17:15:19 +0100
Subject: [PATCH] merge odata layer

fix #50 #42 #25
---
 extension/scripts/lib/scriptEvalChild.js           |  26 ++--
 extension/scripts/lib/scripts.js                   | 153 ++++++++++-----------
 extension/scripts/public/js/main_dev.js            |   5 +-
 extension/scripts/public/js/main_embed_dev.js      |   6 +-
 .../public/js/scripts.entityRegistration.js        |  27 ----
 extension/scripts/public/js/scripts.list.model.js  |  14 +-
 extension/scripts/public/js/scripts.model.js       |  16 +--
 .../public/js/scripts.template.standard.model.js   |   9 +-
 extension/scripts/test/scriptsTest.js              |  18 +--
 9 files changed, 109 insertions(+), 165 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index b1c8d2282f98070763988acec5b10bb72c13905d..9cf479f8e525f7cfffd63c685f00d754eacc3b24 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -1,4 +1,4 @@
-﻿module.exports = function (req, res, next) {
+﻿module.exports = function (inputs, done) {
 
     var vm = require('vm');
 
@@ -6,7 +6,7 @@
         //we want to allow only listed modules to stay secure
         //module can be just string id or { id : "id", path: "path" } tuple
 
-        var modules = req.body.allowedModules.filter(function (mod) {
+        var modules = inputs.allowedModules.filter(function (mod) {
             return (mod.id || mod) === moduleName;
         });
         if (modules.length === 1) {
@@ -16,23 +16,23 @@
         throw new Error("Unsupported module " + moduleName);
     };
 
-    req.body.request.cancel = function(e) {
-        res.send({
+    inputs.request.cancel = function(e) {
+        done(null, {
             cancelRequest: true,
             additionalInfo: e
         });
     };
 
     var sandbox = {
-        request: req.body.request,
-        response: req.body.response,
+        request: inputs.request,
+        response: inputs.response,
         require: _require,
         setTimeout: setTimeout,
         Buffer: Buffer,
         doneMethods: function(err){
-            res.send({
-                request: req.body.request,
-                response: req.body.response,
+            done(null, {
+                request: inputs.request,
+                response: inputs.response,
                 shouldRunAfterRender: true,
                 error: err ? {
                     message: err.message,
@@ -41,9 +41,9 @@
             });
         },
         done: function (err) {
-            res.send({
-                request: req.body.request,
-                response: req.body.response,
+            done(null, {
+                request: inputs.request,
+                response: inputs.response,
                 shouldRunAfterRender: false,
                 error: err ? {
                     message: err.message,
@@ -57,5 +57,5 @@
     var runBeforeRender = "\nif (typeof beforeRender === 'function') { beforeRender(doneMethods); } else { if (typeof afterRender === 'function') doneMethods(); }";
     var runAfterRender = "\nif (typeof afterRender === 'function') { afterRender(doneMethods); } else { done(); }";
 
-    vm.runInNewContext(req.body.script + (req.body.method === "beforeRender" ? runBeforeRender : runAfterRender), sandbox);
+    vm.runInNewContext(inputs.script + (inputs.method === "beforeRender" ? runBeforeRender : runAfterRender), sandbox);
 };
\ No newline at end of file
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index dd9d2882e327ccf7d47cbb78a6f0bbe4440c9441..4f55ec16d81d6f3c4c3d0db98ffcdb2d403a60f9 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -23,45 +23,39 @@ var Scripts = function (reporter, definition) {
     this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
 };
 
-Scripts.prototype.create = function (context, script) {
-    var entity = new this.ScriptType(script);
-    context.scripts.add(entity);
-    return context.scripts.saveChanges().then(function () {
-        return q(entity);
-    });
-};
-
 Scripts.prototype.handleAfterRender = function (request, response) {
     if (!request.parsedScript)
         return q();
 
+    if (!request.options.isRootRequest)
+        return q();
+
     var self = this;
 
-    return request.reporter.taskManager.execute({
-            body: {
-                script: request.parsedScript,
-                allowedModules: self.allowedModules,
-                method: "afterRender",
-                request: {
-                    data: request.data,
-                    template: {
-                        content: request.template.content,
-                        helpers: request.template.helpers
-                    },
-                    options: request.options,
-                    headers: request.headers
-                },
-                response: {
-                    headers: response.headers,
-                    content: response.result
-                }
+    return q.ninvoke(request.reporter.scriptManager, "execute", {
+        script: request.parsedScript,
+        allowedModules: self.allowedModules,
+        method: "afterRender",
+        request: {
+            data: request.data,
+            template: {
+                content: request.template.content,
+                helpers: request.template.helpers
             },
-            execModulePath: path.join(__dirname, "scriptEvalChild.js"),
-            timeout: self.definition.options.timeout
-        }).then(function (body) {
-            response.headers = body.response.headers;
-            response.result = new Buffer(body.response.content);
-        });
+            options: request.options,
+            headers: request.headers
+        },
+        response: {
+            headers: response.headers,
+            content: response.result
+        }
+    }, {
+        execModulePath: path.join(__dirname, "scriptEvalChild.js"),
+        timeout: self.definition.options.timeout
+    }).then(function (body) {
+        response.headers = body.response.headers;
+        response.result = new Buffer(body.response.content);
+    });
 };
 
 Scripts.prototype.handleBeforeRender = function (request, response) {
@@ -69,11 +63,10 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 
     //back compatibility
     if (!request.template.script && request.template.scriptId) {
-        request.template.script = { shortid: request.template.scriptId};
+        request.template.script = {shortid: request.template.scriptId};
     }
 
     if (!request.template.script || (!request.template.script.shortid && !request.template.script.content)) {
-        self.reporter.logger.debug("Script not defined for this template.");
         return q();
     }
 
@@ -81,34 +74,33 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         if (request.template.script.content)
             return q(request.template.script);
 
-        self.reporter.logger.debug("Searching for before script to apply - " + request.template.script.shortid);
-
-        return request.context.scripts.single(function (s) {
-            return s.shortid === this.id;
-        }, { id: request.template.script.shortid });
+        return self.reporter.documentStore.collection("scripts").find({shortid: request.template.script.shortid}).then(function (items) {
+            if (items.length < 1)
+                throw new Error("Script not found or user not authorized to read it (" + request.template.script.shortid + ")");
+            return items[0];
+        });
     }
 
     return findScript().then(function (script) {
+        self.reporter.logger.debug("Executing script " + script.shortid);
         script = script.content || script;
 
         request.parsedScript = script;
-
-        return request.reporter.taskManager.execute({
-            body: {
-                script: script,
-                allowedModules: self.allowedModules,
-                method: "beforeRender",
-                request: {
-                    data: request.data,
-                    template: request.template,
-                    headers: request.headers,
-                    options: request.options
-                },
-                response: response
+        return q.ninvoke(request.reporter.scriptManager, "execute", {
+            script: script,
+            allowedModules: self.allowedModules,
+            method: "beforeRender",
+            request: {
+                data: request.data,
+                template: request.template,
+                headers: request.headers,
+                options: request.options
             },
+            response: response
+        }, {
             execModulePath: path.join(__dirname, "scriptEvalChild.js"),
             timeout: self.definition.options.timeout
-        }).then(function(body) {
+        }).then(function (body) {
             if (body.cancelRequest) {
                 var error = new Error("Rendering request canceled  from the script " + body.additionalInfo);
                 error.weak = true;
@@ -137,41 +129,36 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     });
 };
 
-Scripts.prototype._beforeCreateHandler = function (args, entity) {
-    if (!entity.shortid)
-        entity.shortid = shortid.generate();
-
-    entity.creationDate = new Date();
-    entity.modificationDate = new Date();
-};
-
-Scripts.prototype._beforeUpdateHandler = function (args, entity) {
-    entity.modificationDate = new Date();
-};
-
-Scripts.prototype._defineEntities = function() {
-
-    this.ScriptType = this.reporter.dataProvider.createEntityType("ScriptType", {
-        shortid: { type: "string"},
-        creationDate: { type: "date" },
-        modificationDate: { type: "date" },
-        content: { type: "string" },
-        name: { type: "string" }
+Scripts.prototype._defineEntities = function () {
+    var self = this;
+    this.reporter.documentStore.registerEntityType("ScriptType", {
+        _id: {type: "Edm.String", key: true},
+        shortid: {type: "Edm.String"},
+        creationDate: {type: "Edm.DateTimeOffset"},
+        modificationDate: {type: "Edm.DateTimeOffset"},
+        content: {type: "Edm.String"},
+        name: {type: "Edm.String"}
     });
 
-    this.ScriptRefType = this.reporter.dataProvider.createEntityType("ScriptRefType", {
-        content: { type: "string" },
-        shortid: { type: "string" }
+    this.reporter.documentStore.registerComplexType("ScriptRefType", {
+        content: {type: "Edm.String"},
+        shortid: {type: "Edm.String"}
     });
 
-    this.reporter.templates.TemplateType.addMember("script", { type: this.ScriptRefType });
-
-    this.ScriptType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-
-    this.ScriptType.addEventListener("beforeCreate", Scripts.prototype._beforeCreateHandler.bind(this));
-    this.ScriptType.addEventListener("beforeUpdate", Scripts.prototype._beforeUpdateHandler.bind(this));
+    this.reporter.documentStore.model.entityTypes["TemplateType"].script = {type: "jsreport.ScriptRefType"};
+    this.reporter.documentStore.registerEntitySet("scripts", {entityType: "ScriptType", humanReadableKey: "shortid"});
 
-    this.reporter.dataProvider.registerEntitySet("scripts", this.ScriptType, { tableOptions: { humanReadableKeys: [ "shortid"] }  });
+    this.reporter.initializeListener.add("scripts", function () {
+        var col = self.reporter.documentStore.collection("scripts");
+        col.beforeUpdateListeners.add("scripts", function (query, update) {
+            update.$set.modificationDate = new Date();
+        });
+        col.beforeInsertListeners.add("scripts", function (doc) {
+            doc.shortid = doc.shortid || shortid.generate();
+            doc.creationDate = new Date();
+            doc.modificationDate = new Date();
+        });
+    });
 };
 
 module.exports = function (reporter, definition) {
diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index c988f4fb538ad6008e6441e0b5c5175332a123f7..db357e2d1cc981151a82740151282e5b67dab300 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -1,8 +1,7 @@
 ﻿define(["app", "marionette", "backbone",
         "./scripts.list.model", "./scripts.list.view", "./scripts.list.toolbar.view",
         "./scripts.model", "./scripts.template.standard.view",
-        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view",
-        "./scripts.entityRegistration"],
+        "./scripts.template.standard.model", "./scripts.detail.view", "./scripts.toolbar.view"],
     function (app, Marionette, Backbone, ScriptsListModel, ScriptsListView, ScriptsListToolbarView,
               ScriptsModel, StandardTemplateView, StandardTemplateModel, ScriptsDetailView, ToolbarView,
               entityRegistration) {
@@ -68,7 +67,5 @@
                     }
                 });
             });
-
-            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/main_embed_dev.js b/extension/scripts/public/js/main_embed_dev.js
index b3708f0eb8e20281c65c33e22ba6c1ceb6aaf042..fa8e27fc723e236cb0a070dff3a7af6058b449bc 100644
--- a/extension/scripts/public/js/main_embed_dev.js
+++ b/extension/scripts/public/js/main_embed_dev.js
@@ -3,9 +3,9 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./scripts.template.standard.model", "./scripts.template.standard.view",
-        "core/aceBinder", "./scripts.entityRegistration"],
+        "core/aceBinder"],
     function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView,
-              aceBinder, entityRegistration) {
+              aceBinder) {
 
         app.options.scripts = $.extend(app.options.scripts, { allowSelection: false, allowCustom: true}, app.options.scripts);
 
@@ -69,7 +69,5 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     });
                 });
             });
-
-            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.entityRegistration.js b/extension/scripts/public/js/scripts.entityRegistration.js
deleted file mode 100644
index c1228e2c0aba818f4ee80dcd52e35457d042592f..0000000000000000000000000000000000000000
--- a/extension/scripts/public/js/scripts.entityRegistration.js
+++ /dev/null
@@ -1,27 +0,0 @@
-define([], function() {
-    return function(context) {
-        $data.Class.define("$entity.Script", $data.Entity, null, {
-            '_id':{ 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' },
-            'content': { 'type': 'Edm.String' },
-            'name': { 'type': 'Edm.String' },
-            'shortid': { 'type': 'Edm.String' },
-            "creationDate": { type: "date" },
-            "modificationDate": { type: "date" }
-        }, null);
-
-        $data.Class.define("$entity.ScriptRefType", $data.Entity, null, {
-            content: { type: 'Edm.String' },
-            shortid: { type: 'Edm.String' }
-        });
-
-        $entity.Script.prototype.toString = function () {
-            return "Script " + (this.name || "");
-        };
-
-        $entity.Template.addMember("script", { 'type': "$entity.ScriptRefType" });
-        //back compatibility
-        $entity.Template.addMember("scriptId", { 'type': "Edm.String" });
-
-        context["scripts"] = { type: $data.EntitySet, elementType: $entity.Script };
-    };
-})
\ No newline at end of file
diff --git a/extension/scripts/public/js/scripts.list.model.js b/extension/scripts/public/js/scripts.list.model.js
index 5f780ae0272330db56a96540b0d9afc1cefff3d3..889dccaa276f5989a2a62ba694a07ce09ffb2419 100644
--- a/extension/scripts/public/js/scripts.list.model.js
+++ b/extension/scripts/public/js/scripts.list.model.js
@@ -1,6 +1,12 @@
 ﻿define(["app", "backbone", "core/dataGrid", "./scripts.model"], function (app, Backbone, DataGrid, ScriptModel) {
     return Backbone.Collection.extend({
 
+        url: function() {
+            var qs =  this.filter.toOData();
+            qs.$orderby = "modificationDate desc";
+            return "odata/scripts?" + $.param(qs);
+        },
+
         initialize: function () {
             var self = this;
             this.filter = new DataGrid.Filter.Base();
@@ -10,15 +16,11 @@
         },
         
         parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
+            if (this.meta && this.meta["@odata.count"])
+                this.filter.set("totalCount", this.meta["@odata.count"]);
 
             return data;
         },
-        
-        fetchQuery: function () {
-            return app.dataContext.scripts.applyFilter(this.filter).toArray();
-        },
 
         model: ScriptModel
     });
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index 412731fff4e1f2b9fb11d6ccfd02b7e6b061475a..ddea6e5c6ae00e0c149985f7fafb2ece8bd668dc 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -1,18 +1,6 @@
-﻿define(["app", "core/jaydataModel", "jquery"], function (app, ModelBase, $) {
+﻿define(["app", "core/basicModel", "jquery"], function (app, ModelBase, $) {
     return ModelBase.extend({
-        contextSet: function () { return app.dataContext.scripts; },
-
-       fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid === this.id; }, { id: this.get("shortid") });
-        },    
-        
-        setTemplateModel: function(templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        _initialize: function () {
-            this.Entity = $entity.Script;
-        },
+        odata: "scripts",
 
         toString: function() {
             return "Script " + (this.get("name") || "");
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 9ee43b7e36997c723b92d5b10c70d11af5861ccb..5ecf65b53870f84bf1550953124e20b7e0d19f98 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -6,12 +6,12 @@
             var self = this;
 
             function processItems(items) {
-                self.items = items.map(function(i) { return i.initData; });
+                self.items = items;
 
                 var script = self.templateModel.get("script");
 
                 if (!script) {
-                    script = new $entity.ScriptRefType();
+                    script = {};
 
                     //back compatibility
                     if (self.templateModel.get("scriptId")) {
@@ -21,7 +21,6 @@
                     self.templateModel.set("script", script);
                 }
 
-
                 var custom;
                 if (app.options.scripts.allowCustom) {
                     custom = {name: "- custom -", shortid: "custom", content: script.content};
@@ -35,7 +34,7 @@
                     self.set(custom || empty, { silent: true });
 
                 if (script.shortid)
-                    self.set(_.findWhere(items, { shortid: script.shortid }).toJSON(), { silent: true });
+                    self.set(_.findWhere(items, { shortid: script.shortid }), { silent: true });
 
                 if (script.content)
                     self.set(custom || empty, { silent: true });
@@ -44,7 +43,7 @@
             }
 
             if (app.options.scripts.allowSelection) {
-                app.dataContext.scripts.toArray().then(processItems);
+                return app.dataProvider.get("odata/scripts").then(processItems);
             } else {
                 processItems([]);
             }
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index 8988da797bb924f5e5d8b11255dd37a363f2636c..bd96067feef7af902809b14ee72bc603504ad8c4 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -12,20 +12,18 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
     describe('scripts', function () {
 
         function prepareTemplate(scriptContent) {
-            var script = new reporter.scripts.ScriptType({content: scriptContent});
-            reporter.context.scripts.add(script);
-            return reporter.context.scripts.saveChanges().then(function () {
-                return reporter.templates.create({
+            return reporter.documentStore.collection("scripts").insert({content: scriptContent}).then(function (script) {
+                return reporter.documentStore.collection("templates").insert({
                     content: "foo",
                     script: {shortid: script.shortid}
                 });
             });
-        }
+        };
 
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function (template) {
                 return q({
-                    request: {template: template, context: reporter.context, reporter: reporter},
+                    request: {template: template, reporter: reporter, options: {}},
                     response: {}
                 });
             });
@@ -129,7 +127,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     done(new Error('no error was thrown when it should have been'));
                 });
-            }).catch(function() {
+            }).catch(function () {
                 done();
             });
         });
@@ -139,11 +137,13 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
                     done(new Error('no error was thrown when it should have been'));
                 });
-            }).catch(function(e) {
+            }).catch(function (e) {
                 try {
                     e.message.should.containEql("foo");
                 }
-                catch(e) { return done(e);}
+                catch (e) {
+                    return done(e);
+                }
                 done();
             });
         });

From be456c7aaae047c3bbdce01de376bc091ea53e10 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 29 Mar 2015 15:11:11 +0200
Subject: [PATCH] fixing last bugs for release 0.3

---
 extension/scripts/lib/scripts.js             | 2 +-
 extension/scripts/public/js/scripts.model.js | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 4f55ec16d81d6f3c4c3d0db98ffcdb2d403a60f9..7e84779f82856248f53eb6ee6e1ff71d5fe401bf 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -146,7 +146,7 @@ Scripts.prototype._defineEntities = function () {
     });
 
     this.reporter.documentStore.model.entityTypes["TemplateType"].script = {type: "jsreport.ScriptRefType"};
-    this.reporter.documentStore.registerEntitySet("scripts", {entityType: "ScriptType", humanReadableKey: "shortid"});
+    this.reporter.documentStore.registerEntitySet("scripts", {entityType: "jsreport.ScriptType", humanReadableKey: "shortid"});
 
     this.reporter.initializeListener.add("scripts", function () {
         var col = self.reporter.documentStore.collection("scripts");
diff --git a/extension/scripts/public/js/scripts.model.js b/extension/scripts/public/js/scripts.model.js
index ddea6e5c6ae00e0c149985f7fafb2ece8bd668dc..19277edc6c6716735592b9a40595ad51b837cba3 100644
--- a/extension/scripts/public/js/scripts.model.js
+++ b/extension/scripts/public/js/scripts.model.js
@@ -1,6 +1,7 @@
 ﻿define(["app", "core/basicModel", "jquery"], function (app, ModelBase, $) {
     return ModelBase.extend({
         odata: "scripts",
+        url: "odata/scripts",
 
         toString: function() {
             return "Script " + (this.get("name") || "");

From 8b83b6a45522638dd16a129dd0d5a3d4e79030ff Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Mon, 30 Mar 2015 16:05:54 +0200
Subject: [PATCH] change isRootRequest into isChildRequest

---
 extension/scripts/lib/scripts.js | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 7e84779f82856248f53eb6ee6e1ff71d5fe401bf..fe78b491e7c2839fa989b4bddbcf847569db1c89 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -17,7 +17,9 @@ var Scripts = function (reporter, definition) {
 
     this._defineEntities();
 
-    this.reporter.beforeRenderListeners.add(definition.name, this, Scripts.prototype.handleBeforeRender);
+    //we want to put it after templates...
+    //TODO this should be refactored with some kind of a workflow schema where is clear what is the order in the pipeline
+    this.reporter.beforeRenderListeners.insert(1, definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
     this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
@@ -27,7 +29,7 @@ Scripts.prototype.handleAfterRender = function (request, response) {
     if (!request.parsedScript)
         return q();
 
-    if (!request.options.isRootRequest)
+    if (request.options.isChildRequest)
         return q();
 
     var self = this;
@@ -61,6 +63,9 @@ Scripts.prototype.handleAfterRender = function (request, response) {
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
+    if (request.options.isChildRequest)
+        return q();
+
     //back compatibility
     if (!request.template.script && request.template.scriptId) {
         request.template.script = {shortid: request.template.scriptId};

From 5666b2a8177dc5a791723c43580fc1d07ab8204f Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Mon, 6 Apr 2015 17:38:08 +0200
Subject: [PATCH] #52 Assure Script extension is running just after data but
 before child templates

---
 extension/scripts/lib/scripts.js | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index fe78b491e7c2839fa989b4bddbcf847569db1c89..b10f9da15fe821f851c9a20c8af573a250b2903e 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -17,9 +17,7 @@ var Scripts = function (reporter, definition) {
 
     this._defineEntities();
 
-    //we want to put it after templates...
-    //TODO this should be refactored with some kind of a workflow schema where is clear what is the order in the pipeline
-    this.reporter.beforeRenderListeners.insert(1, definition.name, this, Scripts.prototype.handleBeforeRender);
+    this.reporter.beforeRenderListeners.insert({ after: "data", before: "childTemplates"}, definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
     this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];

From 01365e96248c13b3ffdc824f0e41e068fdf24c88 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 9 Apr 2015 21:55:00 +0200
Subject: [PATCH] scripts can call reporter.render

---
 extension/scripts/lib/scriptEvalChild.js           |   9 +-
 extension/scripts/lib/scripts.js                   |  47 +++++++++-
 .../public/js/scripts.template.standard.model.js   |   2 +-
 extension/scripts/test/scriptsTest.js              | 104 ++++++++++++++++++++-
 4 files changed, 155 insertions(+), 7 deletions(-)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index 9cf479f8e525f7cfffd63c685f00d754eacc3b24..1d438675c03bfb48e21a44e4775c493070d1f79d 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -1,4 +1,4 @@
-﻿module.exports = function (inputs, done) {
+﻿module.exports = function (inputs, callback, done) {
 
     var vm = require('vm');
 
@@ -13,7 +13,7 @@
             return require(modules[0].path || modules[0]);
         }
 
-        throw new Error("Unsupported module " + moduleName);
+        done(new Error("Unsupported module " + moduleName));
     };
 
     inputs.request.cancel = function(e) {
@@ -40,6 +40,11 @@
                 } : undefined
             });
         },
+        reporter: {
+            render: function(shortid, cb) {
+                callback(shortid, cb);
+            }
+        },
         done: function (err) {
             done(null, {
                 request: inputs.request,
diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index b10f9da15fe821f851c9a20c8af573a250b2903e..4e783c5be90ed2d173d401b7a6a60c2cafde816e 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -17,7 +17,10 @@ var Scripts = function (reporter, definition) {
 
     this._defineEntities();
 
-    this.reporter.beforeRenderListeners.insert({ after: "data", before: "childTemplates"}, definition.name, this, Scripts.prototype.handleBeforeRender);
+    this.reporter.beforeRenderListeners.insert({
+        after: "data",
+        before: "childTemplates"
+    }, definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
     this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
@@ -31,6 +34,7 @@ Scripts.prototype.handleAfterRender = function (request, response) {
         return q();
 
     var self = this;
+    var domain = process.domain;
 
     return q.ninvoke(request.reporter.scriptManager, "execute", {
         script: request.parsedScript,
@@ -50,6 +54,11 @@ Scripts.prototype.handleAfterRender = function (request, response) {
             content: response.result
         }
     }, {
+        callback: function (req, cb) {
+            domain.run(function() {
+                self._handleCallback(request, req, cb);
+            });
+        },
         execModulePath: path.join(__dirname, "scriptEvalChild.js"),
         timeout: self.definition.options.timeout
     }).then(function (body) {
@@ -89,6 +98,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         script = script.content || script;
 
         request.parsedScript = script;
+        var domain = process.domain;
         return q.ninvoke(request.reporter.scriptManager, "execute", {
             script: script,
             allowedModules: self.allowedModules,
@@ -102,7 +112,12 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             response: response
         }, {
             execModulePath: path.join(__dirname, "scriptEvalChild.js"),
-            timeout: self.definition.options.timeout
+            timeout: self.definition.options.timeout,
+            callback: function (req, cb) {
+                domain.run(function() {
+                    self._handleCallback(request, req, cb);
+                });
+            }
         }).then(function (body) {
             if (body.cancelRequest) {
                 var error = new Error("Rendering request canceled  from the script " + body.additionalInfo);
@@ -132,6 +147,29 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     });
 };
 
+Scripts.prototype._handleCallback = function (originalReq, req, cb) {
+    req.user = req.user || originalReq.user;
+
+    process.domain.req._scriptRequestCounter = process.domain.req._scriptRequestCounter || 0;
+    process.domain.req._scriptRequestCounter++;
+
+    if (process.domain.req._scriptRequestCounter > 3) {
+        return cb(new Error("Reached maximum number of script rendering requests. Verify reporter.render is not causing cycle."));
+    }
+
+    this.reporter.render(req).then(function (res) {
+        return res.result.toBuffer().then(function (buf) {
+            var serializableResponse = {
+                headers: res.headers,
+                content: buf
+            };
+            cb(null, serializableResponse);
+        });
+    }).catch(function (e) {
+        cb(e);
+    });
+};
+
 Scripts.prototype._defineEntities = function () {
     var self = this;
     this.reporter.documentStore.registerEntityType("ScriptType", {
@@ -149,7 +187,10 @@ Scripts.prototype._defineEntities = function () {
     });
 
     this.reporter.documentStore.model.entityTypes["TemplateType"].script = {type: "jsreport.ScriptRefType"};
-    this.reporter.documentStore.registerEntitySet("scripts", {entityType: "jsreport.ScriptType", humanReadableKey: "shortid"});
+    this.reporter.documentStore.registerEntitySet("scripts", {
+        entityType: "jsreport.ScriptType",
+        humanReadableKey: "shortid"
+    });
 
     this.reporter.initializeListener.add("scripts", function () {
         var col = self.reporter.documentStore.collection("scripts");
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 5ecf65b53870f84bf1550953124e20b7e0d19f98..06ed5b7f8c075285e131406cbffad37d42d67b94 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -18,7 +18,7 @@
                         script.shortid = self.templateModel.get("scriptId");
                     }
 
-                    self.templateModel.set("script", script);
+                    self.templateModel.set("script", script, { silent: true});
                 }
 
                 var custom;
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index bd96067feef7af902809b14ee72bc603504ad8c4..baf5ba0ad5c7806743b54065e5f2d8702edca030 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -3,6 +3,7 @@
 var assert = require("assert"),
     path = require("path"),
     should = require("should"),
+    S = require("string"),
     describeReporting = require("../../../test/helpers.js").describeReporting,
     q = require("q");
 
@@ -18,7 +19,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                     script: {shortid: script.shortid}
                 });
             });
-        };
+        }
 
         function prepareRequest(scriptContent) {
             return prepareTemplate(scriptContent).then(function (template) {
@@ -147,5 +148,106 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 done();
             });
         });
+
+        it('should be abble to callback and call reporter.render', function (done) {
+            reporter.documentStore.collection("templates").insert({
+                name: "foo",
+                content: "foo",
+                engine: "jsrender",
+                recipe: "html"
+            }).then(function (tmpl) {
+                var request = {
+                    template: {
+                        content: "original",
+                        recipe: "html",
+                        engine: "jsrender",
+                        script: {
+                            content: "function afterRender(done) { reporter.render({ template: { shortid: '" + tmpl.shortid + "'} }, function(err, resp) { if (err) return done(err); response.content = resp.content; done(); }); };"
+                        }
+                    }
+                };
+                return reporter.render(request).then(function (response) {
+                    return response.result.toBuffer().then(function (buf) {
+                        buf.toString().should.be.eql("foo");
+                        done();
+                    });
+
+                });
+            }).catch(done);
+        });
+
+        it('should callback error should be gracefully handled', function (done) {
+            var request = {
+                template: {
+                    content: "original",
+                    recipe: "html",
+                    engine: "jsrender",
+                    script: {
+                        content: "function afterRender(done) { reporter.render({ }, function(err, resp) { if (err) return done(err); response.content = resp.content; done(); }); };"
+                    }
+                }
+            };
+            return reporter.render(request).then(function (response) {
+                done(new Error("Should have failed."));
+            }).catch(function (e) {
+                e.message.should.containEql("template property must");
+                done();
+            });
+        });
+
+        it('should be able to substitute template with another template using callback', function (done) {
+            reporter.documentStore.collection("templates").insert({
+                name: "foo",
+                content: "foo",
+                engine: "jsrender",
+                recipe: "html"
+            }).then(function (tmpl) {
+                var request = {
+                    template: {
+                        content: "original",
+                        recipe: "html",
+                        engine: "jsrender",
+                        script: {
+                            content: "function beforeRender(done) { reporter.render({ template: { shortid: '" + tmpl.shortid + "'} }, function(err, resp) { if (err) return done(err); " +
+                            "request.template.content = new Buffer(resp.content).toString(); done(); }); };"
+                        }
+                    }
+                };
+                return reporter.render(request).then(function (response) {
+                    return response.result.toBuffer().then(function (buf) {
+                        buf.toString().should.be.eql("foo");
+                        done();
+                    });
+
+                });
+            }).catch(done);
+        });
+
+        it('should monitor rendering cycles', function (done) {
+            this.timeout(5000);
+            reporter.documentStore.collection("templates").insert({
+                name: "foo",
+                content: "foo",
+                engine: "jsrender",
+                recipe: "html",
+                shortid: "id",
+                script: {
+                    content: "function beforeRender(done) { reporter.render({ template: { shortid: 'id'} }, function(err, resp) { if (err) return done(err); " +
+                    "request.template.content = new Buffer(resp.content).toString(); done(); }); };"
+                }
+            }).then(function (tmpl) {
+                var request = {
+                    template: {
+                        shortid: "id"
+                    }
+                };
+                return reporter.render(request).then(function (response) {
+                    done(new Error("It should have failed"));
+                });
+            }).catch(function(e) {
+                e.message.should.containEql("cycle");
+                done();
+            });
+        });
     });
 });
\ No newline at end of file

From 9072100a2cc913e3321c9aa13a688d103970cc25 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 12 Apr 2015 12:04:42 +0200
Subject: [PATCH] preparing release 0.4.0, add fullscreen options to the embed

---
 extension/scripts/lib/scripts.js                               | 5 +----
 extension/scripts/public/js/scripts.template.standard.model.js | 4 ++--
 2 files changed, 3 insertions(+), 6 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 4e783c5be90ed2d173d401b7a6a60c2cafde816e..3dea81c83aebb5c6094b45da96eecc33b958ad44 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -42,10 +42,7 @@ Scripts.prototype.handleAfterRender = function (request, response) {
         method: "afterRender",
         request: {
             data: request.data,
-            template: {
-                content: request.template.content,
-                helpers: request.template.helpers
-            },
+            template: request.template,
             options: request.options,
             headers: request.headers
         },
diff --git a/extension/scripts/public/js/scripts.template.standard.model.js b/extension/scripts/public/js/scripts.template.standard.model.js
index 06ed5b7f8c075285e131406cbffad37d42d67b94..50ca94b2969303ce57a860f5bedd8a2d7a5faa0d 100644
--- a/extension/scripts/public/js/scripts.template.standard.model.js
+++ b/extension/scripts/public/js/scripts.template.standard.model.js
@@ -54,8 +54,8 @@
             this.listenTo(templateModel, "api-overrides", this.apiOverride);
         },
         
-        apiOverride: function(addProperty) {
-             addProperty("script", { shortid: this.get("shortid"), content: '....' });
+        apiOverride: function(req) {
+             req.template.script = { shortid: this.get("shortid") || "...", content: '....' };
         },
 
         newCustomScript: function() {

From cabc0f16e2a147f279e3ee4ffd2a70e7677a3cff Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 23 Apr 2015 16:00:54 +0200
Subject: [PATCH] #58 make sure that jsreport works correctly under subpath

---
 extension/scripts/public/js/main_dev.js                      | 4 ++--
 extension/scripts/public/templates/scripts-list-toolbar.html | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/public/js/main_dev.js b/extension/scripts/public/js/main_dev.js
index db357e2d1cc981151a82740151282e5b67dab300..dc6f68ddbee3b85f8229b3561795cac6dd473ac1 100644
--- a/extension/scripts/public/js/main_dev.js
+++ b/extension/scripts/public/js/main_dev.js
@@ -49,11 +49,11 @@
             app.scripts.router = new Router();
 
             app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/list'>Scripts</a></li>";
+                context.result += "<li><a href='#/extension/scripts/list'>Scripts</a></li>";
             });
 
             app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/scripts/detail'>Create Script</a></li>";
+                context.result += "<li><a href='#/extension/scripts/detail'>Create Script</a></li>";
             });
 
             app.on("template-extensions-render", function (context) {
diff --git a/extension/scripts/public/templates/scripts-list-toolbar.html b/extension/scripts/public/templates/scripts-list-toolbar.html
index e3e22bd84a50fcc73f3e47407ae61e830ad608dc..ddad344f5e633dc34b07b7146e71d37aa3f6e5a7 100644
--- a/extension/scripts/public/templates/scripts-list-toolbar.html
+++ b/extension/scripts/public/templates/scripts-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-        <li><a href="/#/extension/scripts/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
+        <li><a href="#/extension/scripts/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 

From e297a52476c80a7fb9114fe12c136248ce51367e Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 23 Apr 2015 16:06:54 +0200
Subject: [PATCH]  #61 scripts should be evaluated for child templates as well

---
 extension/scripts/lib/scripts.js | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 3dea81c83aebb5c6094b45da96eecc33b958ad44..0831e2e9ed4f8809b5161c109904cb42893ab840 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -30,9 +30,6 @@ Scripts.prototype.handleAfterRender = function (request, response) {
     if (!request.parsedScript)
         return q();
 
-    if (request.options.isChildRequest)
-        return q();
-
     var self = this;
     var domain = process.domain;
 
@@ -67,9 +64,6 @@ Scripts.prototype.handleAfterRender = function (request, response) {
 Scripts.prototype.handleBeforeRender = function (request, response) {
     var self = this;
 
-    if (request.options.isChildRequest)
-        return q();
-
     //back compatibility
     if (!request.template.script && request.template.scriptId) {
         request.template.script = {shortid: request.template.scriptId};

From dc807ec68585ff25b1b77e26f39d61cd5b055372 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 28 May 2015 12:00:45 +0200
Subject: [PATCH] split rendering part into the toner package

---
 extension/scripts/lib/scripts.js      | 23 +++++++++++------------
 extension/scripts/test/scriptsTest.js | 29 +++++++++++------------------
 2 files changed, 22 insertions(+), 30 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 0831e2e9ed4f8809b5161c109904cb42893ab840..7741481bce3608a467654fcacab1f235db59a419 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -23,7 +23,7 @@ var Scripts = function (reporter, definition) {
     }, definition.name, this, Scripts.prototype.handleBeforeRender);
     this.reporter.afterRenderListeners.add(definition.name, this, Scripts.prototype.handleAfterRender);
 
-    this.allowedModules = this.definition.options.allowedModules || ["handlebars", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
+    this.allowedModules = this.definition.options.allowedModules || ["handlebars", "moment", "request-json", "feedparser", "request", "underscore", "constants", "sendgrid"];
 };
 
 Scripts.prototype.handleAfterRender = function (request, response) {
@@ -45,11 +45,11 @@ Scripts.prototype.handleAfterRender = function (request, response) {
         },
         response: {
             headers: response.headers,
-            content: response.result
+            content: response.content
         }
     }, {
         callback: function (req, cb) {
-            domain.run(function() {
+            domain.run(function () {
                 self._handleCallback(request, req, cb);
             });
         },
@@ -57,7 +57,7 @@ Scripts.prototype.handleAfterRender = function (request, response) {
         timeout: self.definition.options.timeout
     }).then(function (body) {
         response.headers = body.response.headers;
-        response.result = new Buffer(body.response.content);
+        response.content = new Buffer(body.response.content);
     });
 };
 
@@ -105,7 +105,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
             execModulePath: path.join(__dirname, "scriptEvalChild.js"),
             timeout: self.definition.options.timeout,
             callback: function (req, cb) {
-                domain.run(function() {
+                domain.run(function () {
                     self._handleCallback(request, req, cb);
                 });
             }
@@ -149,13 +149,12 @@ Scripts.prototype._handleCallback = function (originalReq, req, cb) {
     }
 
     this.reporter.render(req).then(function (res) {
-        return res.result.toBuffer().then(function (buf) {
-            var serializableResponse = {
-                headers: res.headers,
-                content: buf
-            };
-            cb(null, serializableResponse);
-        });
+        var serializableResponse = {
+            headers: res.headers,
+            content: res.content
+        };
+
+        cb(null, serializableResponse);
     }).catch(function (e) {
         cb(e);
     });
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index baf5ba0ad5c7806743b54065e5f2d8702edca030..e7a7e4bc2fabe98b7a23526f5aa32b04fd2d195a 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -8,7 +8,7 @@ var assert = require("assert"),
     q = require("q");
 
 
-describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts"], function (reporter) {
+describeReporting(path.join(__dirname, "../../../"), ["jsrender", "html", "templates", "scripts"], function (reporter) {
 
     describe('scripts', function () {
 
@@ -57,14 +57,13 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
         });
 
         it('should be able to use linked modules', function (done) {
-            var scriptContent = "var h = require('handlebars'); " +
-                "var compiledTemplate = h.compile('foo'); " +
-                "request.template.content = compiledTemplate();" +
+            var scriptContent = "request.template.content = require('underscore').isArray([]); " +
                 "done();";
 
             prepareRequest(scriptContent).then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
-                    assert.equal('foo', res.request.template.content);
+
+                    res.request.template.content.should.be.eql(true);
                     done();
                 });
             }).catch(done);
@@ -105,9 +104,9 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
         it('should be able to processes afterRender function', function (done) {
             prepareRequest("function afterRender(done){ response.content[0] = 1; done(); }").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {
-                    res.response.result = new Buffer([1]);
+                    res.response.content = new Buffer([1]);
                     return reporter.scripts.handleAfterRender(res.request, res.response).then(function () {
-                        assert.equal(1, res.response.result[0]);
+                        assert.equal(1, res.response.content[0]);
                         done();
                     });
                 });
@@ -167,11 +166,8 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                     }
                 };
                 return reporter.render(request).then(function (response) {
-                    return response.result.toBuffer().then(function (buf) {
-                        buf.toString().should.be.eql("foo");
-                        done();
-                    });
-
+                    response.content.toString().should.be.eql("foo");
+                    done();
                 });
             }).catch(done);
         });
@@ -214,11 +210,8 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                     }
                 };
                 return reporter.render(request).then(function (response) {
-                    return response.result.toBuffer().then(function (buf) {
-                        buf.toString().should.be.eql("foo");
-                        done();
-                    });
-
+                    response.content.toString().should.be.eql("foo");
+                    done();
                 });
             }).catch(done);
         });
@@ -244,7 +237,7 @@ describeReporting(path.join(__dirname, "../../"), ["html", "templates", "scripts
                 return reporter.render(request).then(function (response) {
                     done(new Error("It should have failed"));
                 });
-            }).catch(function(e) {
+            }).catch(function (e) {
                 e.message.should.containEql("cycle");
                 done();
             });

From a9eb226751bb8fe15fd8038db15aa1411a323461 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 19 Jul 2015 15:24:57 +0200
Subject: [PATCH] #88 api calls can identify objects using name in addition to
 shortid

---
 extension/scripts/lib/scripts.js      | 13 ++++++++++---
 extension/scripts/test/scriptsTest.js | 12 ++++++++++++
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 7741481bce3608a467654fcacab1f235db59a419..b1f1982cb4b08ab63e1e182a4076d3d6e26edf19 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -69,7 +69,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         request.template.script = {shortid: request.template.scriptId};
     }
 
-    if (!request.template.script || (!request.template.script.shortid && !request.template.script.content)) {
+    if (!request.template.script || (!request.template.script.shortid && !request.template.script.content && !request.template.script.name)) {
         return q();
     }
 
@@ -77,9 +77,16 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
         if (request.template.script.content)
             return q(request.template.script);
 
-        return self.reporter.documentStore.collection("scripts").find({shortid: request.template.script.shortid}).then(function (items) {
+        var query = {};
+        if (request.template.script.shortid)
+            query.shortid = request.template.script.shortid;
+
+        if (request.template.script.name)
+            query.name = request.template.script.name;
+
+        return self.reporter.documentStore.collection("scripts").find(query).then(function (items) {
             if (items.length < 1)
-                throw new Error("Script not found or user not authorized to read it (" + request.template.script.shortid + ")");
+                throw new Error("Script not found or user not authorized to read it (" + (request.template.script.shortid || request.template.script.name) + ")");
             return items[0];
         });
     }
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index e7a7e4bc2fabe98b7a23526f5aa32b04fd2d195a..fee0bdd62ce57121fd495d800564acf867dadd85 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -30,6 +30,18 @@ describeReporting(path.join(__dirname, "../../../"), ["jsrender", "html", "templ
             });
         }
 
+        it('should find script by its name', function (done) {
+            var req = { template: { script: { name: "foo"} }, reporter: reporter };
+            var res = {};
+
+            return reporter.documentStore.collection("scripts").insert({content: "request.template.content = 'xxx'; done()", "name": "foo"}).then(function (script) {
+                return reporter.scripts.handleBeforeRender(req, res).then(function () {
+                    assert.equal('xxx', req.template.content);
+                    done();
+                });
+            }).catch(done);
+        });
+
         it('should be able to modify request.data', function (done) {
             prepareRequest("request.data = 'xxx'; done()").then(function (res) {
                 return reporter.scripts.handleBeforeRender(res.request, res.response).then(function () {

From f03f5455cf36da95501809be0a7f3dd749e6173f Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 21 Jul 2015 09:07:09 +0200
Subject: [PATCH] fix error handling

---
 extension/scripts/lib/scripts.js      | 12 +++++++++++-
 extension/scripts/test/scriptsTest.js |  4 ++--
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index b1f1982cb4b08ab63e1e182a4076d3d6e26edf19..5ee05aea89f9360aa65c2e16be47331c40a6e99f 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -56,6 +56,11 @@ Scripts.prototype.handleAfterRender = function (request, response) {
         execModulePath: path.join(__dirname, "scriptEvalChild.js"),
         timeout: self.definition.options.timeout
     }).then(function (body) {
+        if (body.error) {
+            body.error.weak = true;
+            return q.reject(body.error);
+        }
+
         response.headers = body.response.headers;
         response.content = new Buffer(body.response.content);
     });
@@ -92,7 +97,7 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
     }
 
     return findScript().then(function (script) {
-        self.reporter.logger.debug("Executing script " + script.shortid);
+        self.reporter.logger.debug("Executing script " + (script.shortid || script.name || "anonymous"));
         script = script.content || script;
 
         request.parsedScript = script;
@@ -117,6 +122,11 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
                 });
             }
         }).then(function (body) {
+            if (body.error) {
+                body.error.weak = true;
+                return q.reject(body.error);
+            }
+
             if (body.cancelRequest) {
                 var error = new Error("Rendering request canceled  from the script " + body.additionalInfo);
                 error.weak = true;
diff --git a/extension/scripts/test/scriptsTest.js b/extension/scripts/test/scriptsTest.js
index fee0bdd62ce57121fd495d800564acf867dadd85..a5e3f6ab1d13523c9e8d4c1ea0df2e9ba543ac44 100644
--- a/extension/scripts/test/scriptsTest.js
+++ b/extension/scripts/test/scriptsTest.js
@@ -184,7 +184,7 @@ describeReporting(path.join(__dirname, "../../../"), ["jsrender", "html", "templ
             }).catch(done);
         });
 
-        it('should callback error should be gracefully handled', function (done) {
+        it('callback error should be gracefully handled', function (done) {
             var request = {
                 template: {
                     content: "original",
@@ -195,7 +195,7 @@ describeReporting(path.join(__dirname, "../../../"), ["jsrender", "html", "templ
                     }
                 }
             };
-            return reporter.render(request).then(function (response) {
+            return reporter.render(request).then(function (response) {              
                 done(new Error("Should have failed."));
             }).catch(function (e) {
                 e.message.should.containEql("template property must");

From 2fa465c4a307029e9a022d80e67b39bb5cc9697c Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 18 Aug 2015 12:28:36 +0200
Subject: [PATCH] allow console logging in scripts

---
 extension/scripts/lib/scriptEvalChild.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/extension/scripts/lib/scriptEvalChild.js b/extension/scripts/lib/scriptEvalChild.js
index 1d438675c03bfb48e21a44e4775c493070d1f79d..b74210d1911906eae2e86d16760ab6962d44359b 100644
--- a/extension/scripts/lib/scriptEvalChild.js
+++ b/extension/scripts/lib/scriptEvalChild.js
@@ -28,6 +28,7 @@
         response: inputs.response,
         require: _require,
         setTimeout: setTimeout,
+        console: console,
         Buffer: Buffer,
         doneMethods: function(err){
             done(null, {

From 5f8d702dca7cb12a72f6e54ac77b1d5f777adff9 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 15 Sep 2015 18:05:00 +0200
Subject: [PATCH] support for command line rendering

---
 extension/scripts/lib/scripts.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 5ee05aea89f9360aa65c2e16be47331c40a6e99f..2188132fda000753bf36cd348d681cbc0ff9f0df 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -158,6 +158,8 @@ Scripts.prototype.handleBeforeRender = function (request, response) {
 Scripts.prototype._handleCallback = function (originalReq, req, cb) {
     req.user = req.user || originalReq.user;
 
+    process.domain.req = process.domain.req || {};
+
     process.domain.req._scriptRequestCounter = process.domain.req._scriptRequestCounter || 0;
     process.domain.req._scriptRequestCounter++;
 

From b95e80a6c1f5f70bf9a20566c32dca145e8cfcf1 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 17 Oct 2015 14:43:51 +0200
Subject: [PATCH] adding support for fs-store

---
 extension/scripts/lib/scripts.js | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/extension/scripts/lib/scripts.js b/extension/scripts/lib/scripts.js
index 2188132fda000753bf36cd348d681cbc0ff9f0df..cb644720a4565254b71850111b24cc972e0b0792 100644
--- a/extension/scripts/lib/scripts.js
+++ b/extension/scripts/lib/scripts.js
@@ -186,8 +186,8 @@ Scripts.prototype._defineEntities = function () {
         shortid: {type: "Edm.String"},
         creationDate: {type: "Edm.DateTimeOffset"},
         modificationDate: {type: "Edm.DateTimeOffset"},
-        content: {type: "Edm.String"},
-        name: {type: "Edm.String"}
+        content: {type: "Edm.String", document: { extension: 'js'} },
+        name: {type: "Edm.String", publicKey: true}
     });
 
     this.reporter.documentStore.registerComplexType("ScriptRefType", {
@@ -198,7 +198,8 @@ Scripts.prototype._defineEntities = function () {
     this.reporter.documentStore.model.entityTypes["TemplateType"].script = {type: "jsreport.ScriptRefType"};
     this.reporter.documentStore.registerEntitySet("scripts", {
         entityType: "jsreport.ScriptType",
-        humanReadableKey: "shortid"
+        humanReadableKey: "shortid",
+        splitIntoDirectories: true
     });
 
     this.reporter.initializeListener.add("scripts", function () {
